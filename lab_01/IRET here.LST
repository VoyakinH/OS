            Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 1

020C:0000  1828			;*ta_1		dw	1828h			; Data table (indexed access)
020C:0000  28 18				db	 28h, 18h
020C:0002  0010			data_2		dw	10h
020C:0004  0808			data_3		dw	808h
020C:0006  0003			data_4		dw	3
020C:0008  6702			data_5		dw	6702h
020C:000A  272D			data_6		dw	272Dh
020C:000C  9028			data_7		dw	9028h

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_9		proc	near
020C:000E  A02B			data_8		dw	0A02Bh
020C:0010  1FBF			data_9		dw	1FBFh
020C:0012  00 4F 0D				add	[bx+0Dh],cl
020C:0015  0E					push	cs
020C:0016  0000 0000		data_11		dd	00000h
020C:001A  AE9C 148F		data_14		dw	0AE9Ch, 148Fh
020C:001E  961F A3B9		data_16		dw	961Fh, 0A3B9h
020C:0022  00FF 0201		data_19		dw	0FFh, 201h
020C:0026  03			data_20		db	3
020C:0027  04			data_21		db	4
020C:0028  05 0714				add	ax,714h
020C:002B  38			data_23		db	38h
020C:002C  3A39			data_24		dw	3A39h
020C:002E  3B 3C				cmp	di,[si]
020C:0030  3D 3F3E				cmp	ax,3F3Eh
020C:0033  000C			data_28		dw	0Ch
020C:0035  080F			data_29		dw	80Fh
020C:0037  0000			data_30		dw	0
020C:0039  00 00				add	[bx+si],al
020C:003B  00			data_31		db	0
020C:003C  10			data_32		db	10h
020C:003D  0E					push	cs
020C:003E  00 FF				add	bh,bh
020C:0040  50			data_34		db	50h
020C:0041  18			data_35		db	18h			; Data table (indexed access)
020C:0042  10 00				adc	[bx+si],al
020C:0044  10 00				adc	[bx+si],al
020C:0046  03 00				add	ax,[bx+si]
020C:0048  02 67 5F				add	ah,[bx+5Fh]
020C:004B  4F					dec	di
020C:004C  50					push	ax
020C:004D  82			data_37		db	82h			; Data table (indexed access)
020C:004E  55					push	bp
020C:004F  81 BF 001F 0D4F			cmp	word ptr ds:[1Fh][bx],0D4Fh	; (020C:001F=0B996h)
020C:0055  000E			data_38		dw	offset sub_9		; (000E)
020C:0057  00 00				add	[bx+si],al
020C:0059  00 9C 8F8E				add	byte ptr ds:[8F8Eh][si],bl	; (020C:8F8E=3Eh)
020C:005D  28 1F				sub	[bx],bl
020C:005F  96					xchg	si,ax
020C:0060  B9 FFA3				mov	cx,0FFA3h
020C:0063  00 01				add	[bx+di],al
020C:0065  02 03				add	al,[bp+di]
020C:0067  04 05				add	al,5
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 2

020C:0069  14 07				adc	al,7
020C:006B  38 39				cmp	[bx+di],bh
020C:006D  3A 3B				cmp	bh,[bp+di]
020C:006F  3C 3D				cmp	al,3Dh			; '='
020C:0071  3E					db	3Eh
020C:0072  3F					aas				; Ascii adjust
020C:0073  0C 00				or	al,0
020C:0075  0F			;*		pop	cs			; Dangerous-8088 only
020C:0075  0F					db	0Fh
020C:0076  08 00				or	[bx+si],al
020C:0078  00					db	0
020C:0079  00 00				add	[bx+si],al
020C:007B  00 10				add	[bx+si],dl
020C:007D  0E					push	cs
020C:007E  00 FF				add	bh,bh
020C:0080  1850			data_44		dw	1850h
020C:0082  0010			data_45		dw	10h
020C:0084  10			data_46		db	10h
020C:0085  00 03				add	[bp+di],al
020C:0087  00 03				add	[bp+di],al
020C:0089  A6					cmpsb				; Cmp [si] to es:[di]
020C:008A  5F					pop	di
020C:008B  504F			data_47		dw	504Fh			; Data table (indexed access)
020C:008D  82 55 81 BF				adc	byte ptr [di-7Fh],0BFh
020C:0091  1F					pop	ds
020C:0092  4D00			data_49		dw	4D00h
020C:0094  0B 0C				or	cx,[si]
020C:0096  0000			data_50		dw	0
020C:0098  00			data_52		db	0
020C:0099  00 83 5DA5				add	[bp+di+5DA5h],al
020C:009D  28 0D				sub	[di],cl
020C:009F  63					db	63h
020C:00A0  BA			data_53		db	0BAh
020C:00A1  A3 00FF				mov	word ptr ds:[0FFh],ax	; (0644:00FF=0FD83h)
020C:00A4  08 08				or	[bx+si],cl
020C:00A6  08 08				or	[bx+si],cl
020C:00A8  08 08				or	[bx+si],cl
020C:00AA  08 10				or	[bx+si],dl
020C:00AC  18 18				sbb	[bx+si],bl
020C:00AE  18 18				sbb	[bx+si],bl
020C:00B0  18 18				sbb	[bx+si],bl
020C:00B2  18 0E 0F00				sbb	byte ptr ds:[0F00h],cl	; (0644:0F00=72h)
020C:00B6  08 00				or	[bx+si],al
020C:00B8  00					db	0
020C:00B9  00 00				add	[bx+si],al
020C:00BB  00 10				add	[bx+si],dl
020C:00BD  0A 00				or	al,[bx+si]
020C:00BF  FF 5E 32				call	dword ptr [bp+32h]	;*
020C:00C2  08 00				or	[bx+si],al
020C:00C4  97					xchg	di,ax
020C:00C5  01 0F				add	[bx],cx
020C:00C7  00 06 6DE7				add	byte ptr ds:[6DE7h],al	; (0644:6DE7=6)
020C:00CB  5D					pop	bp
020C:00CC  5E					pop	si
020C:00CD  90					nop
020C:00CE  61					db	61h
020C:00CF  8F					db	8Fh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 3

020C:00D0  BF 001F				mov	di,1Fh
020C:00D3  40					inc	ax
020C:00D4  00					db	0
020C:00D5  00					db	0
020C:00D6  00					db	0
020C:00D7  00 00				add	[bx+si],al
020C:00D9  00 A2 998E				add	[bp+si-6672h],ah
020C:00DD  2F					das				; Decimal adjust
020C:00DE  00 A1 E3B9				add	byte ptr ds:[0E3B9h][bx+di],ah	; (0644:E3B9=0FBh)
020C:00E2  FF 00				inc	word ptr [bx+si]
020C:00E4  01 02				add	[bp+si],ax
020C:00E6  03 04				add	ax,[si]
020C:00E8  05 0714				add	ax,714h
020C:00EB  38 39				cmp	[bx+di],bh
020C:00ED  3A 3B				cmp	bh,[bp+di]
020C:00EF  3C 3D				cmp	al,3Dh			; '='
020C:00F1  3E					db	3Eh
020C:00F2  3F					aas				; Ascii adjust
020C:00F3  01 00				add	[bx+si],ax
020C:00F5  0F			;*		pop	cs			; Dangerous-8088 only
020C:00F5  0F					db	0Fh
020C:00F6  0007[00]				db	7 dup (0)
020C:00FD  05 FF0F				add	ax,0FF0Fh
020C:0100  28			data_55		db	28h			; Data table (indexed access)
020C:0101  18 0E 0800				sbb	byte ptr ds:[800h],cl	; (0644:0800=0F2h)
020C:0105  09 03				or	[bp+di],ax
020C:0107  00 02				add	[bp+si],al
020C:0109  A3 272D				mov	word ptr ds:[272Dh],ax	; (0644:272D=5BD1h)
020C:010C  9028 A02B		data_58		dw	9028h, 0A02Bh
020C:0110  1FBF 4D00		data_59		dw	1FBFh, 4D00h
020C:0114  0C0B 0000		data_60		dw	0C0Bh, 0
020C:0118  0000 A583		data_61		dw	0, 0A583h
020C:011C  145D 631F		data_62		dw	145Dh, 631Fh
020C:0120  A3BA 00FF		data_63		dw	0A3BAh, 0FFh
020C:0124  0201 0403		data_64		dw	201h, 403h
020C:0128  1405 3807		data_65		dw	1405h, 3807h
020C:012C  3A39 3C3B		data_66		dw	3A39h, 3C3Bh
020C:0130  3E3D 083F		data_67		dw	3E3Dh, 83Fh
020C:0134  00			data_68		db	0
020C:0135  0F			;*		pop	cs			; Dangerous-8088 only
020C:0135  0F					db	0Fh
020C:0136  00					db	0
020C:0137  00					db	0
020C:0138  00					db	0
020C:0139  00 00				add	[bx+si],al
020C:013B  00 10				add	[bx+si],dl
020C:013D  0E					push	cs
020C:013E  00 FF				add	bh,bh
020C:0140  50					push	ax
020C:0141  18 0E 1000				sbb	byte ptr ds:[1000h],cl	; (0644:1000=1Eh)
020C:0145  01 03				add	[bp+di],ax
020C:0147  00 02				add	[bp+si],al
020C:0149  A3 4F5F				mov	word ptr ds:[4F5Fh],ax	; (0644:4F5F=3E8Bh)
020C:014C  50					push	ax
020C:014D  5582			data_69		dw	5582h
020C:014F  81 BF 001F 0B4D			cmp	word ptr ds:[1Fh][bx],0B4Dh	; (0644:001F=0D606h)
020C:0155  0C 00				or	al,0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 4

020C:0157  00 00				add	[bx+si],al
020C:0159  00 83 5DA5				add	[bp+di+5DA5h],al
020C:015D  28 1F				sub	[bx],bl
020C:015F  63					db	63h
020C:0160  BA FFA3				mov	dx,0FFA3h
020C:0163  00 01				add	[bx+di],al
020C:0165  02 03				add	al,[bp+di]
020C:0167  04 05				add	al,5
020C:0169  14 07				adc	al,7
020C:016B  38 39				cmp	[bx+di],bh
020C:016D  3A 3B				cmp	bh,[bp+di]
020C:016F  3C 3D				cmp	al,3Dh			; '='
020C:0171  3E					db	3Eh
020C:0172  3F					aas				; Ascii adjust
020C:0173  08 00				or	[bx+si],al
020C:0175  0F			;*		pop	cs			; Dangerous-8088 only
020C:0175  0F					db	0Fh
020C:0176  00					db	0
020C:0177  00					db	0
020C:0178  00					db	0
020C:0179  00 00				add	[bx+si],al
020C:017B  00 10				add	[bx+si],dl
020C:017D  0E					push	cs
020C:017E  00 FF				add	bh,bh
020C:0180  7F 60				jg	loc_1			; Jump if >
020C:0182  0F			;*		pop	cs			; Dangerous-8088 only
020C:0182  0F					db	0Fh
020C:0183  00					db	0
020C:0184  00 00				add	[bx+si],al
020C:0186  00 07				add	[bx],al
020C:0188  02 08				add	cl,[bx+si]
020C:018A  FF 0E 0000				dec	word ptr ds:[0]		; (0644:0000=1142h)
020C:018E  3F					aas				; Ascii adjust
020C:018F  00 08				add	[bx+si],cl
020C:0191  00 FC				add	ah,bh
020C:0193  02 74 70				add	dh,[si+70h]
020C:0196  00					db	0
020C:0197  00 00				add	[bx+si],al
020C:0199  00 DF				add	bh,bl
020C:019B  DF					db	0DFh
020C:019C  DF					db	0DFh
020C:019D  00			data_71		db	0			; Data table (indexed access)
020C:019E  00 00				add	[bx+si],al
020C:01A0  EC			data_72		db	0ECh			; Data table (indexed access)
020C:01A1  EC					in	al,dx			; port 0F0A3h ??I/O Non-standard
020C:01A2  EC					in	al,dx			; port 0F0A3h ??I/O Non-standard
020C:01A3  00			data_73		db	0			; Data table (indexed access)
020C:01A4  00 00				add	[bx+si],al
020C:01A6  FF 00				inc	word ptr [bx+si]
020C:01A8  00			data_75		db	0			; Data table (indexed access)
020C:01A9  00					db	0
020C:01AA  00					db	0
020C:01AB  00					db	0
020C:01AC  00					db	0
020C:01AD  00					db	0
020C:01AE  00					db	0
020C:01AF  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 5

020C:01B0  00					db	0
020C:01B1  00					db	0
020C:01B2  00					db	0
020C:01B3  00					db	0
020C:01B4  00					db	0
020C:01B5  00					db	0
020C:01B6  00					db	0
020C:01B7  00					db	0
020C:01B8  00					db	0
020C:01B9  00					db	0
020C:01BA  00					db	0
020C:01BB  00					db	0
020C:01BC  00					db	0
020C:01BD  00					db	0
020C:01BE  00					db	0
020C:01BF  00					db	0
020C:01C0  00					db	0
020C:01C1  0000 0000		data_76		dd	00000h
020C:01C5  00					db	0
020C:01C6  00					db	0
020C:01C7  00					db	0
020C:01C8  00					db	0
020C:01C9  00					db	0
020C:01CA  00					db	0
020C:01CB  00					db	0
020C:01CC  00					db	0
020C:01CD  00					db	0
020C:01CE  00					db	0
020C:01CF  00					db	0
020C:01D0  00					db	0
020C:01D1  00					db	0
020C:01D2  00					db	0
020C:01D3  00					db	0
020C:01D4  00					db	0
020C:01D5  00					db	0
020C:01D6  00					db	0
020C:01D7  00					db	0
020C:01D8  00					db	0
020C:01D9  00					db	0
020C:01DA  00					db	0
020C:01DB  00					db	0
020C:01DC  00					db	0
020C:01DD  00					db	0
020C:01DE  00					db	0
020C:01DF  00					db	0
020C:01E0  00					db	0
020C:01E1  00					db	0
020C:01E2			loc_1:
020C:01E2  00					db	0
020C:01E3  00					db	0
020C:01E4  00					db	0
020C:01E5  00					db	0
020C:01E6  00					db	0
020C:01E7  00					db	0
020C:01E8  00					db	0
020C:01E9  00					db	0
020C:01EA  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 6

020C:01EB  00					db	0
020C:01EC  00					db	0
020C:01ED  00					db	0
020C:01EE  00					db	0
020C:01EF  00					db	0
020C:01F0  00					db	0
020C:01F1  00					db	0
020C:01F2  00					db	0
020C:01F3  00					db	0
020C:01F4  00					db	0
020C:01F5  00					db	0
020C:01F6  00					db	0
020C:01F7  00					db	0
020C:01F8  00					db	0
020C:01F9  00					db	0
020C:01FA  00					db	0
020C:01FB  00					db	0
020C:01FC  00					db	0
020C:01FD  00					db	0
020C:01FE  00					db	0
020C:01FF  00					db	0
020C:0200  00					db	0
020C:0201  00					db	0
020C:0202  00					db	0
020C:0203  00					db	0
020C:0204  00					db	0
020C:0205  00					db	0
020C:0206  00					db	0
020C:0207  00					db	0
020C:0208  00					db	0
020C:0209  00					db	0
020C:020A  00					db	0
020C:020B  00					db	0
020C:020C  0000 0000		data_77		dw	0, 0
020C:0210  00					db	0
020C:0211  00					db	0
020C:0212  00					db	0
020C:0213  00					db	0
020C:0214  00					db	0
020C:0215  00					db	0
020C:0216  00					db	0
020C:0217  00					db	0
020C:0218  00					db	0
020C:0219  00					db	0
020C:021A  00					db	0
020C:021B  00					db	0
020C:021C  00					db	0
020C:021D  00					db	0
020C:021E  00					db	0
020C:021F  00					db	0
020C:0220  00					db	0
020C:0221  00					db	0
020C:0222  00					db	0
020C:0223  00					db	0
020C:0224  00					db	0
020C:0225  00					db	0
020C:0226  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 7

020C:0227  00					db	0
020C:0228  00					db	0
020C:0229  00					db	0
020C:022A  00					db	0
020C:022B  00					db	0
020C:022C  00					db	0
020C:022D  00					db	0
020C:022E  00					db	0
020C:022F  00					db	0
020C:0230  00					db	0
020C:0231  00					db	0
020C:0232  00					db	0
020C:0233  00					db	0
020C:0234  00					db	0
020C:0235  00					db	0
020C:0236  00					db	0
020C:0237  00					db	0
020C:0238  00					db	0
020C:0239  00					db	0
020C:023A  00					db	0
020C:023B  00					db	0
020C:023C  00					db	0
020C:023D  00					db	0
020C:023E  00					db	0
020C:023F  00					db	0
020C:0240  00					db	0
020C:0241  00					db	0
020C:0242  00					db	0
020C:0243  00					db	0
020C:0244  00					db	0
020C:0245  00					db	0
020C:0246  00					db	0
020C:0247  00					db	0
020C:0248  00					db	0
020C:0249  00					db	0
020C:024A  00					db	0
020C:024B  00					db	0
020C:024C  00					db	0
020C:024D  00					db	0
020C:024E  00					db	0
020C:024F  00					db	0
020C:0250  00					db	0
020C:0251  00					db	0
020C:0252  00					db	0
020C:0253  00					db	0
020C:0254  00					db	0
020C:0255  00					db	0
020C:0256  0000			data_78		dw	0
020C:0258  00					db	0
020C:0259  00					db	0
020C:025A  00					db	0
020C:025B  00					db	0
020C:025C  00					db	0
020C:025D  00					db	0
020C:025E			loc_2:
020C:025E  00					db	0
020C:025F  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 8

020C:0260  00					db	0
020C:0261  00					db	0
020C:0262  00					db	0
020C:0263  0000			data_79		dw	0
020C:0265  00			data_80		db	0			; Data table (indexed access)
020C:0266  00					db	0
020C:0267  00					db	0
020C:0268  00					db	0
020C:0269  00					db	0
020C:026A  0000 0000		data_81		dw	0, 0
020C:026E  00					db	0
020C:026F  00					db	0
020C:0270  00					db	0
020C:0271  00					db	0
020C:0272  00					db	0
020C:0273  00					db	0
020C:0274  00					db	0
020C:0275  00					db	0
020C:0276  00					db	0
020C:0277  00					db	0
020C:0278  00					db	0
020C:0279  00					db	0
020C:027A  00					db	0
020C:027B  00					db	0
020C:027C  00					db	0
020C:027D  00					db	0
020C:027E  00					db	0
020C:027F  00					db	0
020C:0280  00					db	0
020C:0281  00					db	0
020C:0282  00					db	0
020C:0283  00					db	0
020C:0284  00					db	0
020C:0285  00					db	0
020C:0286  0000 0000		data_82		dw	0, 0
020C:028A  00					db	0
020C:028B  00					db	0
020C:028C  00					db	0
020C:028D  00					db	0
020C:028E  00					db	0
020C:028F  00					db	0
020C:0290  00					db	0
020C:0291  00					db	0
020C:0292  00					db	0
020C:0293  00					db	0
020C:0294  00					db	0
020C:0295  00					db	0
020C:0296  00					db	0
020C:0297  00					db	0
020C:0298  00					db	0
020C:0299			loc_3:
020C:0299  00					db	0
020C:029A  00					db	0
020C:029B  00					db	0
020C:029C			loc_4:
020C:029C  0000			data_83		dw	0
020C:029E  00			data_84		db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 9

020C:029F			loc_5:
020C:029F  00					db	0
020C:02A0  00					db	0
020C:02A1  00					db	0
020C:02A2  00					db	0
020C:02A3  00					db	0
020C:02A4  00 00				add	[bx+si],al
020C:02A6  00 FF				add	bh,bh
020C:02A8  0000			data_86		dw	0
020C:02AA  00			data_87		db	0
020C:02AB  52					push	dx
020C:02AC  3A 45 46				cmp	al,[di+46h]
020C:02AF  38 1D				cmp	[di],bl
020C:02B1  2A 36 4080				sub	dh,byte ptr ds:[4080h]	; (0644:4080=4Eh)
020C:02B5  20 10				and	[bx+si],dl
020C:02B7  08 04				or	[si],al
020C:02B9  02 01				add	al,[bx+di]
020C:02BB  1B FF				sbb	di,di
020C:02BD  00 FF				add	bh,bh
020C:02BF  FF					db	0FFh
020C:02C0  FF 1E FFFF				call	dword ptr ds:[0FFFFh]	; (0644:FFFF)
020C:02C4  FF					db	0FFh
020C:02C5  FF 1F				call	dword ptr [bx]		;*
020C:02C7  FF					db	0FFh
020C:02C8  7F 94				jg	loc_2			; Jump if >
020C:02CA  11 17				adc	[bx],dx
020C:02CC  05 1412				add	ax,1412h
020C:02CF  19 15				sbb	[di],dx
020C:02D1  09 0F				or	[bx],cx
020C:02D3  10 1B				adc	[bp+di],bl
020C:02D5  1D FF0A				sbb	ax,0FF0Ah
020C:02D8  01 13				add	[bp+di],dx
020C:02DA  04 06				add	al,6
020C:02DC  07					pop	es
020C:02DD  08 0A				or	[bp+si],cl
020C:02DF  0B 0C				or	cx,[si]
020C:02E1  FF					db	0FFh
020C:02E2  FF					db	0FFh
020C:02E3  FF					db	0FFh
020C:02E4  FF 1C				call	dword ptr [si]		;*
020C:02E6  1A 18				sbb	bl,[bx+si]
020C:02E8  03 16 0E02				add	dx,word ptr ds:[0E02h]	; (0644:0E02=0FF2Eh)
020C:02EC  0D FFFF				or	ax,0FFFFh
020C:02EF  FF					db	0FFh
020C:02F0  FF 96 20FF				call	word ptr [bp+20FFh]	;*
020C:02F4  FF 5E 5F				call	dword ptr [bp+5Fh]	;*
020C:02F7  60					db	60h
020C:02F8  61					db	61h
020C:02F9  62					db	62h
020C:02FA  63					db	63h
020C:02FB  64					db	64h
020C:02FC  65					db	65h
020C:02FD  66					db	66h
020C:02FE  67					db	67h
020C:02FF  FF					db	0FFh
020C:0300  FF 77 8D				push	word ptr [bx-73h]
020C:0303  84 8E 8F73				test	cl,[bp-708Dh]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 10

020C:0307  74 90				jz	loc_3			; Jump if zero
020C:0309  75 91				jnz	loc_4			; Jump if not zero
020C:030B  76 92				jbe	loc_5			; Jump if below or =
020C:030D  93					xchg	bx,ax
020C:030E  FF					db	0FFh
020C:030F  FF					db	0FFh
020C:0310  FF 89 1B8A				dec	word ptr ds:[1B8Ah][bx+di]	; (0644:1B8A=1000h)
020C:0314  3231			data_89		dw	3231h
020C:0316  33 34				xor	si,[si]
020C:0318  35 3736				xor	ax,3736h
020C:031B  38 39				cmp	[bx+di],bh
020C:031D  30 2D				xor	[di],ch
020C:031F  3D 0908				cmp	ax,908h
020C:0322  71 77				jno	loc_10			; Jump if not overflw
020C:0324  65					db	65h
020C:0325  72 74				jc	loc_10			; Jump if carry Set
020C:0327  79 75				jns	loc_11			; Jump if not sign
020C:0329  69					db	69h
020C:032A  6F					db	6Fh
020C:032B  70 5B				jo	loc_7			; Jump if overflow=1
020C:032D  5D					pop	bp
020C:032E  0D 61FF				or	ax,61FFh
020C:0331  73 64				jnc	loc_9			; Jump if carry=0
020C:0333  66					db	66h
020C:0334  67					db	67h
020C:0335  68					db	68h
020C:0336  6A					db	6Ah
020C:0337  6B			data_91		db	6Bh
020C:0338  6C					db	6Ch
020C:0339  3B 27				cmp	sp,[bx]
020C:033B  60					db	60h
020C:033C  FF 5C 7A				call	dword ptr [si+7Ah]	;*
020C:033F  78 63				js	loc_12			; Jump if sign=1
020C:0341  76 62				jbe	loc_13			; Jump if below or =
020C:0343  6E					db	6Eh
020C:0344  6D					db	6Dh
020C:0345  2C 2E				sub	al,2Eh			; '.'
020C:0347  2F					das				; Decimal adjust
020C:0348  FF 2A				jmp	dword ptr [bp+si]	;*
							                        ;* No entry point to code
020C:034A  FF 20				jmp	word ptr [bx+si]	;*
020C:034C  FF					db	0FFh
							                        ;* No entry point to code
020C:034D  3B 3C				cmp	di,[si]
020C:034F  3D 3F3E				cmp	ax,3F3Eh
020C:0352  40					inc	ax
020C:0353  41					inc	cx
020C:0354  42					inc	dx
020C:0355  43					inc	bx
020C:0356  44					inc	sp
020C:0357  FF					db	0FFh
020C:0358  FF 47 48				inc	word ptr [bx+48h]
020C:035B  49					dec	cx
020C:035C  FF 4B FF				dec	word ptr [bp+di-1]
020C:035F  4D					dec	bp
020C:0360  FF 4F 50				dec	word ptr [bx+50h]
020C:0363  51					push	cx
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 11

020C:0364  52					push	dx
020C:0365  53					push	bx
020C:0366  FF					db	0FFh
020C:0367  FF 5C 85				call	dword ptr [si-7Bh]	;*
020C:036A  86 1B				xchg	[bp+di],bl
020C:036C  21 40 23				and	[bx+si+23h],ax
020C:036F  24 25				and	al,25h			; '%'
020C:0371  5E					pop	si
020C:0372  26: 2A 28				sub	ch,es:[bx+si]
020C:0375  29 5F 2B				sub	[bx+2Bh],bx
020C:0378  08 00				or	[bx+si],al
020C:037A  51					push	cx
020C:037B  57					push	di
020C:037C  45					inc	bp
020C:037D  52					push	dx
020C:037E  54					push	sp
020C:037F  59					pop	cx
020C:0380  55					push	bp
020C:0381  49					dec	cx
020C:0382  4F					dec	di
020C:0383  50					push	ax
020C:0384  7B 7D				jnp	loc_15			; Jump if not parity
020C:0386  0D 41FF				or	ax,41FFh
020C:0389  53					push	bx
020C:038A  44					inc	sp
020C:038B  46					inc	si
020C:038C  47					inc	di
020C:038D  48					dec	ax
020C:038E  4A					dec	dx
020C:038F  4B					dec	bx
020C:0390  4C					dec	sp
020C:0391  3A 22				cmp	ah,[bp+si]
020C:0393  7E					db	7Eh
020C:0394			loc_8:
020C:0394  FF					db	0FFh
020C:0395  7C 5A				jl	loc_14			; Jump if <
020C:0397			loc_9:
020C:0397  58					pop	ax
020C:0398  43					inc	bx
020C:0399  56					push	si
020C:039A  42					inc	dx
020C:039B			loc_10:
020C:039B  4E					dec	si
020C:039C  4D					dec	bp
020C:039D  3C 3E				cmp	al,3Eh			; '>'
020C:039F  3F					aas				; Ascii adjust
020C:03A0  FF 00				inc	word ptr [bx+si]
020C:03A2  FF 20				jmp	word ptr [bx+si]	;*
020C:03A4			loc_12:
020C:03A4  FF 54 55				call	word ptr [si+55h]	;*
020C:03A7  56					push	si
020C:03A8  57					push	di
020C:03A9  58					pop	ax
020C:03AA  59					pop	cx
020C:03AB  5A					pop	dx
020C:03AC  5B					pop	bx
020C:03AD  5C					pop	sp
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 12

020C:03AE  5D					pop	bp
020C:03AF  FF					db	0FFh
020C:03B0  FF 37				push	word ptr [bx]
020C:03B2  38 39				cmp	[bx+di],bh
020C:03B4  2D 3534				sub	ax,3534h
020C:03B7  36: 2B 31				sub	si,ss:[bx+di]
020C:03BA  32 33				xor	dh,[bp+di]
020C:03BC  30 2E FFFF				xor	byte ptr ds:[0FFFFh],ch	; (0644:FFFF=9)
020C:03C0  7C 87		;*		jl	loc_6			;*Jump if <
020C:03C0  7C 87				db	 7Ch, 87h
020C:03C2  88 52 4F				mov	[bp+si+4Fh],dl
020C:03C5  50					push	ax
020C:03C6  51					push	cx
020C:03C7  4B					dec	bx
020C:03C8  4C					dec	sp
020C:03C9  4D					dec	bp
020C:03CA  47					inc	di
020C:03CB  48					dec	ax
020C:03CC  49					dec	cx
020C:03CD  10 11				adc	[bx+di],dl
020C:03CF  12 13				adc	dl,[bp+di]
020C:03D1  14 15				adc	al,15h
020C:03D3  16					push	ss
020C:03D4  17					pop	ss
020C:03D5  18 19				sbb	[bx+di],bl
020C:03D7  1E					push	ds
020C:03D8  1F					pop	ds
020C:03D9  20 21				and	[bx+di],ah
020C:03DB  22 23				and	ah,[bp+di]
020C:03DD  24 25				and	al,25h			; '%'
020C:03DF  26					db	26h
020C:03E0  2C 2D				sub	al,2Dh			; '-'
020C:03E2  2E					db	2Eh
020C:03E3  2F					das				; Decimal adjust
020C:03E4  30 31				xor	[bx+di],dh
020C:03E6  32 CD				xor	cl,ch
020C:03E8  1B C4				sbb	ax,sp
020C:03EA  C4					db	0C4h
020C:03EB  FE CD				dec	ch
020C:03ED  05 C4C4				add	ax,0C4C4h
020C:03F0  FE CD				dec	ch
020C:03F2  15 01EB				adc	ax,1EBh
020C:03F5  90					nop
020C:03F6  EB 01				jmp	short $+3		; delay for I/O
020C:03F8  90					nop
020C:03F9  EB 01				jmp	short $+3		; delay for I/O
020C:03FB  90					nop
020C:03FC  C4					db	0C4h
020C:03FD  C4					db	0C4h
020C:03FE  FE C4				inc	ah
020C:0400  C4 02				les	ax,dword ptr [bp+si]	; Load 32 bit ptr
020C:0402  E9 0247				jmp	loc_36			; (064C)
							                        ;* No entry point to code
020C:0405  CD 13				int	13h			; ??INT Non-standard interrupt
020C:0407  C4					db	0C4h
020C:0408  C4					db	0C4h
020C:0409  FE					db	0FEh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 13

020C:040A  50					push	ax
020C:040B  33 C0				xor	ax,ax			; Zero register
020C:040D  C4					db	0C4h
020C:040E  C4 09				les	cx,dword ptr [bx+di]	; Load 32 bit ptr
020C:0410  58					pop	ax
020C:0411  E9 0238				jmp	loc_36			; (064C)
020C:0414  90					nop
020C:0415  90					nop
020C:0416  E4 60				in	al,60h			; port 60h, keybd scan or sw1
020C:0418  90					nop
020C:0419  90					nop
020C:041A  C4					db	0C4h
020C:041B  C4					db	0C4h
020C:041C  FE C4				inc	ah
020C:041E  C4 5D 00		;*		les	bx,dword ptr [di+0]	; Load 32 bit ptr
020C:041E  C4 5D 00				db	0C4h, 5Dh, 00h
020C:0421  C4					db	0C4h
020C:0422  C4 5D 01				les	bx,dword ptr [di+1]	; Load 32 bit ptr
020C:0425  C4					db	0C4h
020C:0426  C4 5D 02				les	bx,dword ptr [di+2]	; Load 32 bit ptr
020C:0429  C4					db	0C4h
020C:042A  C4 5D 03				les	bx,dword ptr [di+3]	; Load 32 bit ptr
020C:042D  C4					db	0C4h
020C:042E  C4 5D 04				les	bx,dword ptr [di+4]	; Load 32 bit ptr
020C:0431  C4					db	0C4h
020C:0432  C4 5D 05				les	bx,dword ptr [di+5]	; Load 32 bit ptr
020C:0435  C4					db	0C4h
020C:0436  C4 5D 06				les	bx,dword ptr [di+6]	; Load 32 bit ptr
020C:0439  C4					db	0C4h
020C:043A  C4 5D 07				les	bx,dword ptr [di+7]	; Load 32 bit ptr
020C:043D  C4					db	0C4h
020C:043E  C4 5D 08				les	bx,dword ptr [di+8]	; Load 32 bit ptr
020C:0441  C4					db	0C4h
020C:0442  C4 5D 09				les	bx,dword ptr [di+9]	; Load 32 bit ptr
020C:0445  C4					db	0C4h
020C:0446  C4 5D 0A				les	bx,dword ptr [di+0Ah]	; Load 32 bit ptr
020C:0449  C4					db	0C4h
020C:044A  C4 5D 0B				les	bx,dword ptr [di+0Bh]	; Load 32 bit ptr
020C:044D  C4					db	0C4h
020C:044E  C4 5D 0C				les	bx,dword ptr [di+0Ch]	; Load 32 bit ptr
020C:0451  C4					db	0C4h
020C:0452  C4 5D 0D				les	bx,dword ptr [di+0Dh]	; Load 32 bit ptr
020C:0455  C4					db	0C4h
020C:0456  C4 5D 0E				les	bx,dword ptr [di+0Eh]	; Load 32 bit ptr
020C:0459  C4					db	0C4h
020C:045A  C4 5D 0F				les	bx,dword ptr [di+0Fh]	; Load 32 bit ptr
020C:045D  80 FA 80				cmp	dl,80h
020C:0460  72 28				jb	loc_18			; Jump if below
020C:0462  80 FC 02				cmp	ah,2
020C:0465  72 1D				jb	loc_17			; Jump if below
020C:0467  80 FC 05				cmp	ah,5
020C:046A  76 0A				jbe	loc_16			; Jump if below or =
020C:046C  80 FC 0A				cmp	ah,0Ah
020C:046F  72 13				jb	loc_17			; Jump if below
020C:0471  80 FC 0C				cmp	ah,0Ch
020C:0474  77 0E				ja	loc_17			; Jump if above
020C:0476			loc_16:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 14

020C:0476  50					push	ax
020C:0477  B8 0001				mov	ax,1
020C:047A  C4					db	0C4h
020C:047B  C4 59 58				les	bx,dword ptr [bx+di+58h]	; Load 32 bit ptr
020C:047E  B4 80				mov	ah,80h
020C:0480  F9					stc				; Set carry flag
020C:0481  CA 0002				retf	2			; Return far
020C:0484			loc_17:
020C:0484  C4					db	0C4h
020C:0485  C4 13				les	dx,dword ptr [bp+di]	; Load 32 bit ptr
020C:0487  CA 0002				retf	2			; Return far
020C:048A			loc_18:
020C:048A  C4					db	0C4h
020C:048B  C4 40 CA				les	ax,dword ptr [bx+si-36h]	; Load 32 bit ptr
020C:048E  02 00				add	al,[bx+si]
020C:0490  1E					push	ds
020C:0491  50					push	ax
020C:0492  51					push	cx
020C:0493  B8 0040				mov	ax,40h
020C:0496  8E D8				mov	ds,ax
020C:0498  B9 0010				mov	cx,10h

020C:049B			locloop_19:
020C:049B  B0 3E				mov	al,3Eh			; '>'
020C:049D  A8 80				test	al,80h
020C:049F  E1 FA				loopz	locloop_19		; Loop if zf=1, cx>0

020C:04A1  59					pop	cx
020C:04A2  58					pop	ax
020C:04A3  1F					pop	ds
020C:04A4  C4					db	0C4h
020C:04A5  C4					db	0C4h
020C:04A6  FE 01				inc	byte ptr [bx+di]
020C:04A8  C2 8204				retn	8204h
							                        ;* No entry point to code
020C:04AB  CF					iret				; Interrupt return
							                        ;* No entry point to code
020C:04AC  04 02				add	al,2
020C:04AE  DC					db	0DCh
020C:04AF  04 03				add	al,3
020C:04B1  E9 8404				jmp	$-7BF9h
							                        ;* No entry point to code
020C:04B4  F6 04 04				test	byte ptr [si],4
020C:04B7  03 05				add	ax,[di]
020C:04B9  85 10				test	dx,[bx+si]
020C:04BB  05 1D85				add	ax,1D85h
020C:04BE  05 2A05				add	ax,2A05h
020C:04C1  05 02DF				add	ax,2DFh
020C:04C4  25 0902				and	ax,902h
020C:04C7  2A FF				sub	bh,bh
020C:04C9  50					push	ax
020C:04CA  F6					db	0F6h
020C:04CB  0F			;*		pop	cs			; Dangerous-8088 only
020C:04CB  0F					db	0Fh
020C:04CC  08 27				or	[bx],ah
020C:04CE  80 DF 02				sbb	bh,2
020C:04D1  25 0902				and	ax,902h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 15

020C:04D4  2A FF				sub	bh,bh
020C:04D6  50					push	ax
020C:04D7  F6					db	0F6h
020C:04D8  0F			;*		pop	cs			; Dangerous-8088 only
020C:04D8  0F					db	0Fh
020C:04D9  08 27				or	[bx],ah
020C:04DB  40					inc	ax
020C:04DC  DF					db	0DFh
020C:04DD  02 25				add	ah,[di]
020C:04DF  02 0F				add	cl,[bx]
020C:04E1  1B FF				sbb	di,di
020C:04E3  54					push	sp
020C:04E4  F6					db	0F6h
020C:04E5  0F			;*		pop	cs			; Dangerous-8088 only
020C:04E5  0F					db	0Fh
020C:04E6  08 4F 00		;*		or	[bx+0],cl
020C:04E6  08 4F 00				db	 08h, 4Fh, 00h
020C:04E9  DF					db	0DFh
020C:04EA  02 25				add	ah,[di]
020C:04EC  02 09				add	cl,[bx+di]
020C:04EE  2A FF				sub	bh,bh
020C:04F0  50					push	ax
020C:04F1  F6					db	0F6h
020C:04F2  0F			;*		pop	cs			; Dangerous-8088 only
020C:04F2  0F					db	0Fh
020C:04F3  08 4F 80				or	[bx-80h],cl
020C:04F6  DF					db	0DFh
020C:04F7  02 25				add	ah,[di]
020C:04F9  02 09				add	cl,[bx+di]
020C:04FB  2A FF				sub	bh,bh
020C:04FD  50					push	ax
020C:04FE  F6					db	0F6h
020C:04FF  0F			;*		pop	cs			; Dangerous-8088 only
020C:04FF  0F					db	0Fh
020C:0500  08 4F 80				or	[bx-80h],cl
020C:0503  AF					scasw				; Scan es:[di] for ax
020C:0504  02 25				add	ah,[di]
020C:0506  02 12				add	dl,[bp+si]
020C:0508  1B FF				sbb	di,di
020C:050A  6C					db	6Ch
020C:050B  F6					db	0F6h
020C:050C  0F			;*		pop	cs			; Dangerous-8088 only
020C:050C  0F					db	0Fh
020C:050D  08 4F 00		;*		or	[bx+0],cl
020C:050D  08 4F 00				db	 08h, 4Fh, 00h
020C:0510  E1 02				loopz	locloop_20		; Loop if zf=1, cx>0

020C:0512  25 0902				and	ax,902h
020C:0515  2A FF				sub	bh,bh
020C:0517  50					push	ax
020C:0518  F6					db	0F6h
020C:0519  0F			;*		pop	cs			; Dangerous-8088 only
020C:0519  0F					db	0Fh
020C:051A  08 4F 80				or	[bx-80h],cl
020C:051D  D1 02				rol	word ptr [bp+si],1	; Rotate
020C:051F  25 1202				and	ax,1202h
020C:0522  1B FF				sbb	di,di
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 16

020C:0524  65					db	65h
020C:0525  F6					db	0F6h
020C:0526  0F			;*		pop	cs			; Dangerous-8088 only
020C:0526  0F					db	0Fh
020C:0527  08 4F 00		;*		or	[bx+0],cl
020C:0527  08 4F 00				db	 08h, 4Fh, 00h
020C:052A  A1 2502				mov	ax,word ptr ds:[2502h]	; (0644:2502=0B057h)
020C:052D  02 24				add	ah,[si]
020C:052F  38 FF				cmp	bh,bh
020C:0531  53					push	bx
020C:0532  F6					db	0F6h
020C:0533  0F			;*		pop	cs			; Dangerous-8088 only
020C:0533  0F					db	0Fh
020C:0534  08 4F C0				or	[bx-40h],cl
020C:0537  DF					db	0DFh
020C:0538  02 25				add	ah,[di]
020C:053A  02 12				add	dl,[bp+si]
020C:053C  1B FF				sbb	di,di
020C:053E  54					push	sp
020C:053F  F6					db	0F6h
020C:0540  0F			;*		pop	cs			; Dangerous-8088 only
020C:0540  0F					db	0Fh
020C:0541  08 E8				or	al,ch
020C:0543  94					xchg	sp,ax
020C:0544  02 80 88FC				add	al,byte ptr ds:[88FCh][bx+si]	; (0644:88FC=80h)
020C:0548  74 10				jz	loc_21			; Jump if zero
020C:054A  80 FC 91				cmp	ah,91h
020C:054D  74 0B				je	loc_21			; Jump if equal
020C:054F  80 FC 86				cmp	ah,86h
020C:0552  74 0C				je	loc_22			; Jump if equal
020C:0554  C4					db	0C4h
020C:0555  C4 15				les	dx,dword ptr [di]	; Load 32 bit ptr
020C:0557  CA 0002				retf	2			; Return far
020C:055A			loc_21:
020C:055A  C4					db	0C4h
020C:055B  C4 15				les	dx,dword ptr [di]	; Load 32 bit ptr
020C:055D  E9 00EC				jmp	loc_36			; (064C)
020C:0560			loc_22:
020C:0560  C4					db	0C4h
020C:0561  C4 15				les	dx,dword ptr [di]	; Load 32 bit ptr
020C:0563  72 23				jc	loc_25			; Jump if carry Set
020C:0565  51					push	cx
020C:0566  52					push	dx
020C:0567  06					push	es
020C:0568  B8 0040				mov	ax,40h
020C:056B  8E C0				mov	es,ax
020C:056D  87 D1				xchg	dx,cx

020C:056F			locloop_23:
020C:056F  26: F6 06 00A0 80			test	byte ptr es:[0A0h],80h	; (0040:00A0=0)
020C:0575  E1 F8				loopz	locloop_23		; Loop if zf=1, cx>0

020C:0577  75 05				jnz	loc_24			; Jump if not zero
020C:0579  83 EA 01				sub	dx,1
020C:057C  73 F1				jnc	locloop_23		; Jump if carry=0
020C:057E			loc_24:
020C:057E  26: C6 06 00A0 00			mov	byte ptr es:[0A0h],0	; (0040:00A0=0)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 17

020C:0584  07					pop	es
020C:0585  5A					pop	dx
020C:0586  59					pop	cx
020C:0587  F8					clc				; Clear carry flag
020C:0588			loc_25:
020C:0588  CA 0002				retf	2
							                        ;* No entry point to code
020C:058B  56					push	si
020C:058C  52					push	dx
020C:058D  50					push	ax
020C:058E  8B C2				mov	ax,dx
020C:0590  33 D2				xor	dx,dx			; Zero register
020C:0592  BE 0003				mov	si,3
020C:0595  F7 F6				div	si			; ax,dx rem=dx:ax/reg
020C:0597  8B F2				mov	si,dx
020C:0599  58					pop	ax
020C:059A  80 FC 02				cmp	ah,2
020C:059D  74 07				je	loc_26			; Jump if equal
020C:059F  0A E4				or	ah,ah			; Zero ?
020C:05A1  74 15				jz	loc_27			; Jump if zero
020C:05A3  E9 0082				jmp	loc_32			; (0628)
020C:05A6			loc_26:
020C:05A6  2E: 80 BC 019D 00			cmp	cs:data_71[si],0	; (020C:019D=0)
020C:05AC  75 7A				jne	loc_32			; Jump if not equal
020C:05AE  2E: F6 84 01A0 10			test	cs:data_72[si],10h	; (020C:01A0=0ECh)
020C:05B4  74 7B				jz	loc_33			; Jump if zero
020C:05B6  EB 70				jmp	short loc_32		; (0628)
020C:05B8			loc_27:
020C:05B8  2E: 80 3E 02A7 FF			cmp	byte ptr cs:[2A7h],0FFh	; (020C:02A7=0FFh)
020C:05BE  75 14				jne	loc_28			; Jump if not equal
020C:05C0  2E: 88 16 02A7			mov	byte ptr cs:[2A7h],dl	; (020C:02A7=0FFh)
020C:05C5  2E: C7 06 02A8 0000			mov	cs:data_86,0		; (020C:02A8=0)
020C:05CC  2E: C6 06 02AA FF			mov	cs:data_87,0FFh		; (020C:02AA=0)
020C:05D2  EB 54				jmp	short loc_32		; (0628)
020C:05D4			loc_28:
020C:05D4  2E: 38 16 02A7			cmp	byte ptr cs:[2A7h],dl	; (020C:02A7=0FFh)
020C:05D9  74 15				je	loc_29			; Jump if equal
020C:05DB  56					push	si
020C:05DC  33 F6				xor	si,si			; Zero register
020C:05DE  C4					db	0C4h
020C:05DF  C4 17				les	dx,dword ptr [bx]	; Load 32 bit ptr
020C:05E1  5E					pop	si
020C:05E2  2E: C7 06 02A8 0000			mov	cs:data_86,0		; (020C:02A8=0)
020C:05E9  2E: 88 16 02A7			mov	byte ptr cs:[2A7h],dl	; (020C:02A7=0FFh)
020C:05EE  EB 38				jmp	short loc_32		; (0628)
020C:05F0			loc_29:
020C:05F0  2E: 8B 16 02A8			mov	dx,cs:data_86		; (020C:02A8=0)
020C:05F5  8B F2				mov	si,dx
020C:05F7  2E: 88 84 01A8			mov	cs:data_75[si],al	; (020C:01A8=0)
020C:05FC  2E: FF 06 02A8			inc	cs:data_86		; (020C:02A8=0)
020C:0601  2E: 81 3E 02A8 00FF			cmp	cs:data_86,0FFh		; (020C:02A8=0)
020C:0608  75 18				jne	loc_31			; Jump if not equal
020C:060A  33 F6				xor	si,si			; Zero register
020C:060C  C4					db	0C4h
020C:060D  C4 17				les	dx,dword ptr [bx]	; Load 32 bit ptr
020C:060F  F6 C4 08				test	ah,8
020C:0612  74 07				jz	loc_30			; Jump if zero
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 18

020C:0614  2E			data_95		db	2Eh
020C:0615  FF 0E 02A8				dec	word ptr ds:[2A8h]	; (0644:02A8=45B8h)
020C:0619  EB 2F				jmp	short loc_35		; (064A)
020C:061B			loc_30:
020C:061B  2E: C7 06 02A8 0000			mov	cs:data_86,0		; (020C:02A8=0)
020C:0622			loc_31:
020C:0622  B4 90				mov	ah,90h
020C:0624  EB 24				jmp	short loc_35		; (064A)
020C:0626  56					push	si
020C:0627  52					push	dx
020C:0628			loc_32:
020C:0628  BE FFFF				mov	si,0FFFFh
020C:062B  C4					db	0C4h
020C:062C  C4 17				les	dx,dword ptr [bx]	; Load 32 bit ptr
020C:062E  EB 1A				jmp	short loc_35		; (064A)
020C:0630  90					nop
020C:0631			loc_33:
020C:0631  2E: F6 84 01A3 01			test	cs:data_73[si],1	; (020C:01A3=0)
020C:0637  75 06				jnz	loc_34			; Jump if not zero
020C:0639  2E: 80 8C 019A 80			or	byte ptr cs:[19Ah][si],80h	; (020C:019A=0DFh)
020C:063F			loc_34:
020C:063F  2E: 8A A4 019A			mov	ah,byte ptr cs:[19Ah][si]	; (020C:019A=0DFh)
020C:0644  80 E4 F8				and	ah,0F8h
020C:0647  80 F4 48				xor	ah,48h			; 'H'
020C:064A			loc_35:
020C:064A  5A					pop	dx
020C:064B  5E					pop	si
020C:064C			loc_36:
020C:064C  1E					push	ds
020C:064D  50					push	ax
020C:064E  B8 0040				mov	ax,40h
020C:0651  8E D8				mov	ds,ax
020C:0653  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020C:0659  75 4F				jnz	loc_44			; Jump if not zero
020C:065B  55					push	bp
020C:065C  8B EC				mov	bp,sp
020C:065E  8B 46 0A				mov	ax,[bp+0Ah]
020C:0661  5D					pop	bp
020C:0662  A9 0100				test	ax,100h
020C:0665  75 43				jnz	loc_44			; Jump if not zero
020C:0667  A9 0200				test	ax,200h
020C:066A  74 22				jz	loc_40			; Jump if zero
020C:066C  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020C:0673  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020C:0679  75 2F				jnz	loc_44			; Jump if not zero
020C:067B			loc_37:
020C:067B  86 E0				xchg	ah,al
020C:067D  FC					cld				; Clear direction
020C:067E  A8 04				test	al,4
020C:0680  75 25				jnz	loc_43			; Jump if not zero
020C:0682			loc_38:
020C:0682  A8 08				test	al,8
020C:0684  75 11				jnz	loc_41			; Jump if not zero
020C:0686  70 19				jo	loc_42			; Jump if overflow=1
020C:0688			loc_39:
020C:0688  9E					sahf				; Store ah into flags
020C:0689  58					pop	ax
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 19

020C:068A  1F					pop	ds
020C:068B  CA 0002				retf	2
020C:068E			loc_40:
020C:068E  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0644:0314=30CDh)
020C:0695  EB E4				jmp	short loc_37		; (067B)
020C:0697			loc_41:
020C:0697  70 EF				jo	loc_39			; Jump if overflow=1
020C:0699  B050			data_98		dw	0B050h
020C:069B  047F			data_99		dw	47Fh
020C:069D  02 58 EB				add	bl,[bx+si-15h]
020C:06A0  E7 50				out	50h,ax			; port 50h ??I/O Non-standard
020C:06A2  32 C0				xor	al,al			; Zero register
020C:06A4  58					pop	ax
020C:06A5  EB E1				jmp	short loc_39		; (0688)
020C:06A7			loc_43:
020C:06A7  FD					std				; Set direction flag
020C:06A8  EB D8				jmp	short loc_38		; (0682)
020C:06AA			loc_44:
020C:06AA  58					pop	ax
020C:06AB  1F					pop	ds
020C:06AC  CF					iret				; Interrupt return
				sub_9		endp

							                        ;* No entry point to code
020C:06AD  EB 9D				jmp	short loc_36		; (064C)
020C:06AF  C4					db	0C4h
							                        ;* No entry point to code
020C:06B0  C4 72 EB				les	si,dword ptr [bp+si-15h]	; Load 32 bit ptr
020C:06B3  98					cbw				; Convrt byte to word
020C:06B4  C4					db	0C4h
020C:06B5  C4 72 EB				les	si,dword ptr [bp+si-15h]	; Load 32 bit ptr
020C:06B8  93					xchg	bx,ax
020C:06B9  E8 011D				call	sub_12			; (07D9)
020C:06BC  50					push	ax
020C:06BD  53					push	bx
020C:06BE  51					push	cx
020C:06BF  52					push	dx
020C:06C0  1E					push	ds
020C:06C1  B8 0040				mov	ax,40h
020C:06C4  8E D8				mov	ds,ax
020C:06C6  80 3E 0100 01			cmp	byte ptr ds:[100h],1	; (0040:0100=0)
020C:06CB  74 5A				je	loc_50			; Jump if equal
020C:06CD  C6 06 0100 01			mov	byte ptr ds:[100h],1	; (0040:0100=0)
020C:06D2  8A 2E 004A				mov	ch,byte ptr ds:[4Ah]	; (0040:004A=50h)
020C:06D6  8A 0E 0084				mov	cl,byte ptr ds:[84h]	; (0040:0084=18h)
020C:06DA  8A 3E 0062				mov	bh,byte ptr ds:[62h]	; (0040:0062=0)
020C:06DE  E8 004E				call	sub_10			; (072F)
020C:06E1  51					push	cx
020C:06E2  B4 03				mov	ah,3
020C:06E4  CD 10				int	10h			; Video display   ah=functn 03h
										;  get cursor loc in dx, mode cx
020C:06E6  59					pop	cx
020C:06E7  52					push	dx
020C:06E8  32 F6				xor	dh,dh			; Zero register
020C:06EA			loc_45:
020C:06EA  32 D2				xor	dl,dl			; Zero register
020C:06EC			loc_46:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 20

020C:06EC  52					push	dx
020C:06ED  B4 02				mov	ah,2
020C:06EF  CD 10				int	10h			; Video display   ah=functn 02h
										;  set cursor location in dx
020C:06F1  B4 08				mov	ah,8
020C:06F3  CD 10				int	10h			; Video display   ah=functn 08h
										;  get char al & attrib ah @curs
020C:06F5  0A C0				or	al,al			; Zero ?
020C:06F7  75 02				jnz	loc_47			; Jump if not zero
020C:06F9  B0 20				mov	al,20h			; ' '
020C:06FB			loc_47:
020C:06FB  33 D2				xor	dx,dx			; Zero register
020C:06FD  32 E4				xor	ah,ah			; Zero register
020C:06FF  CD			data_102	db	0CDh
020C:0700  17					pop	ss
020C:0701  5A					pop	dx
020C:0702  80 E4 25				and	ah,25h			; '%'
020C:0705  74 07				jz	loc_48			; Jump if zero
020C:0707  C6 06 0100 FF			mov	byte ptr ds:[100h],0FFh	; (0040:0100=0)
020C:070C  EB 14				jmp	short loc_49		; (0722)
020C:070E			loc_48:
020C:070E  FE C2				inc	dl
020C:0710  3A D5				cmp	dl,ch
020C:0712  72 D8				jb	loc_46			; Jump if below
020C:0714  E8 0018				call	sub_10			; (072F)
020C:0717  FE C6				inc	dh
020C:0719  3A F1				cmp	dh,cl
020C:071B  76 CD				jbe	loc_45			; Jump if below or =
020C:071D  C6 06 0100 00			mov	byte ptr ds:[100h],0	; (0040:0100=0)
020C:0722			loc_49:
020C:0722  5A					pop	dx
020C:0723  B4 02				mov	ah,2
020C:0725  CD 10				int	10h			; Video display   ah=functn 02h
										;  set cursor location in dx
020C:0727			loc_50:
020C:0727  1F					pop	ds
020C:0728  5A					pop	dx
020C:0729  59					pop	cx
020C:072A  5B					pop	bx
020C:072B  58					pop	ax
020C:072C  E9 FF1D				jmp	loc_36			; (064C)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_10		proc	near
020C:072F  52					push	dx
020C:0730  33 D2				xor	dx,dx			; Zero register
020C:0732  B8 000D				mov	ax,0Dh
020C:0735  CD 17				int	17h			; Printer  dx=prn1, ah=func 00h
										;  print char al, get status ah
020C:0737  33 D2				xor	dx,dx			; Zero register
020C:0739  B8 000A				mov	ax,0Ah
020C:073C  CD 17				int	17h			; Printer  dx=prn1, ah=func 00h
										;  print char al, get status ah
020C:073E  5A					pop	dx
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 21

020C:073F  C3					retn
				sub_10		endp

020C:0740  C4					db	0C4h
							                        ;* No entry point to code
020C:0741  C4 06 06E9				les	ax,dword ptr ds:[6E9h]	; (020C:06E9=32F6h) Load 32 bit ptr
020C:0745  FF					db	0FFh
020C:0746  E8 0070				call	sub_11			; (07B9)
020C:0749  06					push	es
020C:074A  1E					push	ds
020C:074B  50					push	ax
020C:074C  52					push	dx
020C:074D  B8 0040				mov	ax,40h
020C:0750  8E D8				mov	ds,ax
020C:0752  33 C0				xor	ax,ax			; Zero register
020C:0754  8E C0				mov	es,ax
020C:0756  FF 06 006C				inc	word ptr ds:[6Ch]	; (0040:006C=0B45Dh)
020C:075A  75 04				jnz	loc_51			; Jump if not zero
020C:075C  FF 06 006E				inc	word ptr ds:[6Eh]	; (0040:006E=10h)
020C:0760			loc_51:
020C:0760  83 3E 006E 18			cmp	word ptr ds:[6Eh],18h	; (0040:006E=10h)
020C:0765  75 15				jne	loc_52			; Jump if not equal
020C:0767  81 3E 006C 00B0			cmp	word ptr ds:[6Ch],0B0h	; (0040:006C=0B45Dh)
020C:076D  75 0D				jne	loc_52			; Jump if not equal
020C:076F  A3 006E				mov	word ptr ds:[6Eh],ax	; (0040:006E=10h)
020C:0772  A3 006C				mov	word ptr ds:[6Ch],ax	; (0040:006C=0B45Dh)
020C:0775  C6 06 0070 01			mov	byte ptr ds:[70h],1	; (0040:0070=0)
020C:077A  0C 08				or	al,8
020C:077C			loc_52:
020C:077C  50					push	ax
020C:077D  FE 0E 0040				dec	byte ptr ds:[40h]	; (0040:0040=0CCh)
020C:0781  75 0B				jnz	loc_53			; Jump if not zero
020C:0783  80 26 003F F0			and	byte ptr ds:[3Fh],0F0h	; (0040:003F=0)
020C:0788  B0 0C				mov	al,0Ch
020C:078A  BA 03F2				mov	dx,3F2h
020C:078D  EE					out	dx,al			; port 3F2h, dsk0 contrl output
020C:078E			loc_53:
020C:078E  58					pop	ax
020C:078F  F7 06 0314 0004			test	word ptr ds:[314h],4	; (0040:0314=3200h)
020C:0795  75 0C				jnz	loc_54			; Jump if not zero
020C:0797  9F					lahf				; Load ah from flags
020C:0798  86 E0				xchg	ah,al
020C:079A  50					push	ax
020C:079B  26: FF 1E 0070			call	dword ptr es:[70h]	; (0000:0070=6ADh)
020C:07A0  EB 03				jmp	short loc_55		; (07A5)
020C:07A2  90					nop
020C:07A3			loc_54:
020C:07A3  CD 1C				int	1Ch			; Timer break (call each 18.2ms)
020C:07A5			loc_55:
020C:07A5  E8 0011				call	sub_11			; (07B9)
020C:07A8  B0 20				mov	al,20h			; ' '
020C:07AA  E6 20				out	20h,al			; port 20h, 8259-1 int command
										;  al = 20h, end of interrupt
020C:07AC  5A					pop	dx
020C:07AD  58					pop	ax
020C:07AE  1F					pop	ds
020C:07AF  07					pop	es
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 22

020C:07B0  E9 FE99				jmp	loc_36			; (064C)
020C:07B3  C4					db	0C4h
							                        ;* No entry point to code
020C:07B4  C4 0E 93E9				les	cx,dword ptr ds:[93E9h]	; (32F6:93E9=9D57h) Load 32 bit ptr
020C:07B8  FE					db	0FEh

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_11		proc	near
020C:07B9  1E					push	ds
020C:07BA  50					push	ax
020C:07BB  B8 0040				mov	ax,40h
020C:07BE  8E D8				mov	ds,ax
020C:07C0  9F					lahf				; Load ah from flags
020C:07C1  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020C:07C7  75 0C				jnz	loc_57			; Jump if not zero
020C:07C9  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020C:07D0			loc_56:
020C:07D0  9E					sahf				; Store ah into flags
020C:07D1  58					pop	ax
020C:07D2  1F					pop	ds
020C:07D3  EB 03				jmp	short loc_58		; (07D8)
020C:07D5			loc_57:
020C:07D5  FA					cli				; Disable interrupts
020C:07D6  EB F8				jmp	short loc_56		; (07D0)
020C:07D8			loc_58:
020C:07D8  C3					retn
				sub_11		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_12		proc	near
020C:07D9  1E					push	ds
020C:07DA  50					push	ax
020C:07DB  B8 0040				mov	ax,40h
020C:07DE  8E D8				mov	ds,ax
020C:07E0  9F					lahf				; Load ah from flags
020C:07E1  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020C:07E7  75 14				jnz	loc_60			; Jump if not zero
020C:07E9  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020C:07EF  0C75			data_104	dw	0C75h
020C:07F1  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020C:07F8			loc_59:
020C:07F8  9E					sahf				; Store ah into flags
020C:07F9  58					pop	ax
020C:07FA  1F					pop	ds
020C:07FB  EB 03				jmp	short loc_61		; (0800)
020C:07FD			loc_60:
020C:07FD  FB					sti				; Enable interrupts
020C:07FE  EB F8				jmp	short loc_59		; (07F8)
020C:0800			loc_61:
020C:0800  C3					retn
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 23

				sub_12		endp

020C:0801  00					db	0
020C:0802  0000			data_105	dw	0
020C:0804  0000			data_106	dw	0

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_13		proc	near
020C:0806  2E: FF 06 0804			inc	cs:data_106		; (020C:0804=0)
020C:080B  3D 13FF				cmp	ax,13FFh
020C:080E  75 5B				jne	loc_64			; Jump if not equal
020C:0810  83 F9 01				cmp	cx,1
020C:0813  74 40				je	loc_62			; Jump if equal
020C:0815  56					push	si
020C:0816  BE 00A4				mov	si,0A4h
020C:0819  2E: 2B 36 0802			sub	si,cs:data_105		; (020C:0802=0)
020C:081E  3B CE				cmp	cx,si
020C:0820  73 3E				jae	loc_63			; Jump if above or =
020C:0822  57					push	di
020C:0823  51					push	cx
020C:0824  52					push	dx
020C:0825  1E					push	ds
020C:0826  06					push	es
020C:0827  8C C2				mov	dx,es
020C:0829  8E DA				mov	ds,dx
020C:082B  BA B000				mov	dx,0B000h
020C:082E  8E C2				mov	es,dx
020C:0830  8B D1				mov	dx,cx
020C:0832  8B F7				mov	si,di
020C:0834  2E: 8B 3E 0802			mov	di,cs:data_105		; (020C:0802=0)
020C:0839  FC					cld				; Clear direction
020C:083A  D1 E9				shr	cx,1			; Shift w/zeros fill
020C:083C  F3/ A5				rep	movsw			; Rep when cx >0 Mov [si] to es:[di]
020C:083E  80 D1 00				adc	cl,0
020C:0841  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:0843  2E: 01 16 0802			add	cs:data_105,dx		; (020C:0802=0)
020C:0848  07					pop	es
020C:0849  1F					pop	ds
020C:084A  5A					pop	dx
020C:084B  59					pop	cx
020C:084C  5F					pop	di
020C:084D  5E					pop	si
020C:084E  F9					stc				; Set carry flag
020C:084F  2E: FF 0E 0804			dec	cs:data_106		; (020C:0804=0)
020C:0854  C3					retn
020C:0855			loc_62:
020C:0855  B450 260E		data_108	dw	0B450h, 260Eh
020C:0859  058A 12E8		data_109	dw	58Ah, 12E8h
020C:085D  5800 5EC3		data_110	dw	5800h, 5EC3h
020C:0861  FF2E 040E		data_111	dw	0FF2Eh, 40Eh
020C:0865  C408 42C4		data_112	dw	0C408h, 42C4h
020C:0869  C3F9 FC80		data_113	dw	0C3F9h, 0FC80h
020C:086D  0E					push	cs
020C:086E  75 28				jnz	loc_65			; Jump if not zero
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 24

020C:0870  56					push	si
020C:0871  2E: 8B 36 0802			mov	si,cs:data_105		; (020C:0802=0)
020C:0876  81 FE 00A4				cmp	si,0A4h
020C:087A  73 E4		;*		jae	loc_63			;*Jump if above or =
020C:087A  73 E4				db	 73h,0E4h
020C:087C  1E					push	ds
020C:087D  BE B000				mov	si,0B000h
020C:0880  8E DE				mov	ds,si
020C:0882  2E: 8B 36 0802			mov	si,cs:data_105		; (020C:0802=0)
020C:0887  88 04				mov	[si],al
020C:0889  46					inc	si
020C:088A  2E: 89 36 0802			mov	cs:data_105,si		; (020C:0802=0)
020C:088F  1F					pop	ds
020C:0890  5E					pop	si
020C:0891  F9					stc				; Set carry flag
020C:0892  2E: FF 0E 0804			dec	cs:data_106		; (020C:0804=0)
020C:0897  C3					retn
020C:0898			loc_65:
020C:0898  50					push	ax
020C:0899  B8 13FE				mov	ax,13FEh
020C:089C  C4					db	0C4h
020C:089D  C4 42 58				les	ax,dword ptr [bp+si+58h]	; Load 32 bit ptr
020C:08A0  F8					clc				; Clear carry flag
020C:08A1  2E: FF 0E 0804			dec	cs:data_106		; (020C:0804=0)
020C:08A6  C3					retn
				sub_13		endp

020C:08A7  00			data_114	db	0
020C:08A8  00			data_115	db	0
020C:08A9  2E: 80 3E 08A7 02			cmp	cs:data_114,2		; (020C:08A7=0)
020C:08AF  75 05				jne	loc_66			; Jump if not equal
020C:08B1  E8 FF52				call	sub_13			; (0806)
020C:08B4  72 5F				jc	loc_72			; Jump if carry Set
020C:08B6			loc_66:
020C:08B6  2E: 80 3E 08A7 01			cmp	cs:data_114,1		; (020C:08A7=0)
020C:08BC  74 5D				je	loc_74			; Jump if equal
020C:08BE  80 FC 00				cmp	ah,0
020C:08C1  74 30				je	loc_70			; Jump if equal
020C:08C3  80 FC 1C				cmp	ah,1Ch
020C:08C6  77 0B				ja	loc_67			; Jump if above
020C:08C8  80 FC 04				cmp	ah,4
020C:08CB  74 20				je	loc_69			; Jump if equal
020C:08CD  C4					db	0C4h
020C:08CE  C4 42 EB				les	ax,dword ptr [bp+si-15h]	; Load 32 bit ptr
020C:08D1  43					inc	bx
020C:08D2  90					nop
020C:08D3			loc_67:
020C:08D3  80 FC 4F				cmp	ah,4Fh			; 'O'
020C:08D6  75 06				jne	loc_68			; Jump if not equal
020C:08D8  C4					db	0C4h
020C:08D9  C4 BE 73EB				les	di,dword ptr [bp+73EBh]	; Load 32 bit ptr
020C:08DD  90					nop
020C:08DE			loc_68:
020C:08DE  80 FC F0				cmp	ah,0F0h
020C:08E1  72 35				jb	loc_73			; Jump if below
020C:08E3  80 FC F7				cmp	ah,0F7h
020C:08E6  76 05				jbe	loc_69			; Jump if below or =
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 25

020C:08E8  80 FC FA				cmp	ah,0FAh
020C:08EB  75 2B				jne	loc_73			; Jump if not equal
020C:08ED			loc_69:
020C:08ED  C4					db	0C4h
020C:08EE  C4 BE 23EB				les	di,dword ptr [bp+23EBh]	; Load 32 bit ptr
020C:08F2  90					nop
020C:08F3			loc_70:
020C:08F3  2E: C6 06 08A8 01			mov	cs:data_115,1		; (020C:08A8=0)
020C:08F9  C4					db	0C4h
020C:08FA  C4 BE 9090				les	di,dword ptr [bp-6F70h]	; Load 32 bit ptr
020C:08FE  50					push	ax
020C:08FF  25 007F				and	ax,7Fh
020C:0902  3C 03				cmp	al,3
020C:0904  76 08				jbe	loc_71			; Jump if below or =
020C:0906  3C 07				cmp	al,7
020C:0908  74 04				je	loc_71			; Jump if equal
020C:090A  58					pop	ax
020C:090B  EB 0E				jmp	short loc_74		; (091B)
							                        ;* No entry point to code
020C:090D  90					nop
020C:090E			loc_71:
020C:090E  58					pop	ax
020C:090F  2E: C6 06 08A8 00			mov	cs:data_115,0		; (020C:08A8=0)
020C:0915			loc_72:
020C:0915  E9 FD34				jmp	loc_36			; (064C)
020C:0918			loc_73:
020C:0918  F9					stc				; Set carry flag
020C:0919  EB FA				jmp	short loc_72		; (0915)
020C:091B			loc_74:
020C:091B  2E: C6 06 08A8 00			mov	cs:data_115,0		; (020C:08A8=0)
020C:0921  3D 13FF				cmp	ax,13FFh
020C:0924  74 2F				je	loc_78			; Jump if equal
020C:0926  80 FC F0				cmp	ah,0F0h
020C:0929  72 0D				jb	loc_75			; Jump if below
020C:092B  80 FC F7				cmp	ah,0F7h
020C:092E  76 BD				jbe	loc_69			; Jump if below or =
020C:0930  80 FC FA				cmp	ah,0FAh
020C:0933  74 B8				je	loc_69			; Jump if equal
020C:0935  EB 19				jmp	short loc_77		; (0950)
020C:0937  90					nop
020C:0938			loc_75:
020C:0938  80 FC 04				cmp	ah,4
020C:093B  74 B0				je	loc_69			; Jump if equal
020C:093D  80 FC 00				cmp	ah,0
020C:0940  75 06				jne	loc_76			; Jump if not equal
020C:0942  C4					db	0C4h
020C:0943  C4 BE 09EB				les	di,dword ptr [bp+9EBh]	; Load 32 bit ptr
020C:0947  90					nop
020C:0948			loc_76:
020C:0948  80 FC 11				cmp	ah,11h
020C:094B  75 03				jne	loc_77			; Jump if not equal
020C:094D  C4					db	0C4h
020C:094E  C4 BE 10EA				les	di,dword ptr [bp+10EAh]	; Load 32 bit ptr
020C:0952  01 00				add	[bx+si],ax
020C:0954  C0					db	0C0h
020C:0955			loc_78:
020C:0955  56					push	si
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 26

020C:0956  57					push	di
020C:0957  55					push	bp

020C:0958			locloop_79:
020C:0958  BA 0046				mov	dx,46h
020C:095B  52					push	dx
020C:095C  0E					push	cs
020C:095D  BB 096C				mov	bx,96Ch
020C:0960  53					push	bx
020C:0961  BB 0007				mov	bx,7
020C:0964  B4 0E				mov	ah,0Eh
020C:0966  26: 8A 05				mov	al,es:[di]
020C:0969  47					inc	di
020C:096A  EB E4		;*		jmp	short loc_77		;*(0950)
020C:096A  EB E4				db	0EBh,0E4h
							                        ;* No entry point to code
020C:096C  E2 EA				loop	locloop_79		; Loop if cx > 0

020C:096E  5D					pop	bp
020C:096F  5F					pop	di
020C:0970  5E					pop	si
020C:0971  B8 0001				mov	ax,1
020C:0974			loc_80:
020C:0974  EB 9F				jmp	short loc_72		; (0915)
							                        ;* No entry point to code
020C:0976  2E: 80 3E 08A7 02			cmp	cs:data_114,2		; (020C:08A7=0)
020C:097C  75 05				jne	loc_81			; Jump if not equal
020C:097E  E8 FE85				call	sub_13			; (0806)
020C:0981  72 F1				jc	loc_80			; Jump if carry Set
020C:0983			loc_81:
020C:0983  2E: 80 3E 08A7 01			cmp	cs:data_114,1		; (020C:08A7=0)
020C:0989  74 06				je	loc_82			; Jump if equal
020C:098B  C4					db	0C4h
020C:098C  C4 10				les	dx,dword ptr [bx+si]	; Load 32 bit ptr
020C:098E  E9 FCBB				jmp	loc_36			; (064C)
020C:0991			loc_82:
020C:0991  80 FC 13				cmp	ah,13h
020C:0994  75 04				jne	loc_83			; Jump if not equal
020C:0996  3C FF				cmp	al,0FFh
020C:0998  74 BB				je	loc_78			; Jump if equal
020C:099A			loc_83:
020C:099A  EA F000:FF53		;*		jmp	far ptr loc_692		;*(F000:FF53)
020C:099A  EA					db	0EAh
020C:099B  FF53 F000				dw	0FF53h, 0F000h
020C:099F  CD 10				int	10h			; Video display   ah=functn 00h
										;  set display mode in al
020C:09A1  C4					db	0C4h
020C:09A2  C4					db	0C4h
020C:09A3  FE C4				inc	ah
020C:09A5  C4 11				les	dx,dword ptr [bx+di]	; Load 32 bit ptr
020C:09A7  E9 FCA2				jmp	loc_36			; (064C)
020C:09AA  C4					db	0C4h
							                        ;* No entry point to code
020C:09AB  C4 12				les	dx,dword ptr [bp+si]	; Load 32 bit ptr
020C:09AD  E9 FC9C				jmp	loc_36			; (064C)
020C:09B0  C4					db	0C4h
							                        ;* No entry point to code
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 27

020C:09B1  C4 14				les	dx,dword ptr [si]	; Load 32 bit ptr
020C:09B3  E9 FC96				jmp	loc_36			; (064C)
020C:09B6  87 DB				xchg	bx,bx
020C:09B8  0000			data_117	dw	0
020C:09BA  00 00				add	[bx+si],al
020C:09BC  00CA			data_118	dw	0CAh
020C:09BE  00 00				add	[bx+si],al
020C:09C0  0032			data_119	dw	32h
020C:09C2  00 00				add	[bx+si],al
020C:09C4  1E					push	ds
020C:09C5  53					push	bx
020C:09C6  BB 0040				mov	bx,40h
020C:09C9  8E DB				mov	ds,bx
020C:09CB  80 FC 10				cmp	ah,10h
020C:09CE  E8 FDE8				call	sub_11			; (07B9)
020C:09D1  72 03				jc	locloop_84		; Jump if carry Set
020C:09D3  E9 00E0				jmp	$+0E3h

020C:09D6			locloop_84:
020C:09D6  0A E4				or	ah,ah			; Zero ?
020C:09D8  74 3E				jz	loc_89			; Jump if zero
020C:09DA  FE CC				dec	ah
020C:09DC  74 74				jz	loc_93			; Jump if zero
020C:09DE  FE CC				dec	ah
020C:09E0  74 11				jz	loc_86			; Jump if zero
020C:09E2  FE CC				dec	ah
020C:09E4  74 08				jz	loc_85			; Jump if zero
020C:09E6  FE CC				dec	ah
020C:09E8  74 04				jz	loc_85			; Jump if zero
020C:09EA  FE CC				dec	ah
020C:09EC  74 0A				jz	loc_87			; Jump if zero
020C:09EE			loc_85:
020C:09EE  5B					pop	bx
020C:09EF  1F					pop	ds
020C:09F0  E9 FC59				jmp	loc_36			; (064C)
020C:09F3			loc_86:
020C:09F3  A0 0017				mov	al,byte ptr data_11+1	; (020C:0017=0)
020C:09F6  EB F6				jmp	short loc_85		; (09EE)
020C:09F8			loc_87:
020C:09F8  56					push	si
020C:09F9  8B 1E 001C				mov	bx,word ptr data_14+2	; (020C:001C=148Fh)
020C:09FD  8B F3				mov	si,bx
020C:09FF  E8 01B9				call	sub_18			; (0BBB)
020C:0A02  3B 1E 001A				cmp	bx,data_14		; (020C:001A=0AE9Ch)
020C:0A06  74 0B				je	loc_88			; Jump if equal
020C:0A08  89 0C				mov	[si],cx
020C:0A0A  89 1E 001C				mov	word ptr data_14+2,bx	; (020C:001C=148Fh)
020C:0A0E  B0 00				mov	al,0
020C:0A10  5E					pop	si
020C:0A11  EB DB				jmp	short loc_85		; (09EE)
020C:0A13			loc_88:
020C:0A13  B0 01				mov	al,1
020C:0A15  5E					pop	si
020C:0A16  EB D6				jmp	short loc_85		; (09EE)
020C:0A18			loc_89:
020C:0A18  8B 1E 001A				mov	bx,data_14		; (020C:001A=0AE9Ch)
020C:0A1C  3B 1E 001C				cmp	bx,word ptr data_14+2	; (020C:001C=148Fh)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 28

020C:0A20  75 13				jne	loc_91			; Jump if not equal
020C:0A22  E8 FDB4				call	sub_12			; (07D9)
020C:0A25  B8 9002				mov	ax,9002h
020C:0A28  CD 15				int	15h			; General services, ah=func 90h
										;  device busy, al=type,
										;   es:bx=ptr of request block
020C:0A2A			loc_90:
020C:0A2A  E8 FD8C				call	sub_11			; (07B9)
020C:0A2D  8B 1E 001A				mov	bx,data_14		; (020C:001A=0AE9Ch)
020C:0A31  3B 1E 001C				cmp	bx,word ptr data_14+2	; (020C:001C=148Fh)
020C:0A35			loc_91:
020C:0A35  E8 0190				call	sub_19			; (0BC8)
020C:0A38  75 05				jnz	loc_92			; Jump if not zero
020C:0A3A  E8 00E3				call	sub_14			; (0B20)
020C:0A3D  EB EB				jmp	short loc_90		; (0A2A)
020C:0A3F			loc_92:
020C:0A3F  8B 07				mov	ax,[bx]
020C:0A41  E8 0177				call	sub_18			; (0BBB)
020C:0A44  89 1E 001A				mov	data_14,bx		; (020C:001A=0AE9Ch)
020C:0A48  E8 0129				call	sub_17			; (0B74)
020C:0A4B  72 DD				jc	loc_90			; Jump if carry Set
020C:0A4D  E8 00FC				call	sub_15			; (0B4C)
020C:0A50  EB 9C				jmp	short loc_85		; (09EE)
020C:0A52			loc_93:
020C:0A52  8B 1E 001A				mov	bx,data_14		; (020C:001A=0AE9Ch)
020C:0A56  3B 1E 001C				cmp	bx,word ptr data_14+2	; (020C:001C=148Fh)
020C:0A5A  8B 07				mov	ax,[bx]
020C:0A5C  E8 0169				call	sub_19			; (0BC8)
020C:0A5F  74 2F				jz	loc_95			; Jump if zero
020C:0A61  E8 00E8				call	sub_15			; (0B4C)
020C:0A64  E8 010D				call	sub_17			; (0B74)
020C:0A67  E8 FD6F				call	sub_12			; (07D9)
020C:0A6A  73 45				jnc	loc_97			; Jump if carry=0
020C:0A6C  E8 014C				call	sub_18			; (0BBB)
020C:0A6F  89 1E 001A				mov	data_14,bx		; (020C:001A=0AE9Ch)
020C:0A73  EB DD				jmp	short loc_93		; (0A52)
020C:0A75			loc_94:
020C:0A75  8B 1E 001A				mov	bx,data_14		; (020C:001A=0AE9Ch)
020C:0A79  3B 1E 001C				cmp	bx,word ptr data_14+2	; (020C:001C=148Fh)
020C:0A7D  8B 07				mov	ax,[bx]
020C:0A7F  E8 0146				call	sub_19			; (0BC8)
020C:0A82  74 0C				jz	loc_95			; Jump if zero
020C:0A84  E8 00C5				call	sub_15			; (0B4C)
020C:0A87  E8 00D1				call	sub_16			; (0B5B)
020C:0A8A  E8 FD4C				call	sub_12			; (07D9)
020C:0A8D  EB 22				jmp	short loc_97		; (0AB1)
020C:0A8F  90					nop
020C:0A90			loc_95:
020C:0A90  E8 FD46				call	sub_12			; (07D9)
020C:0A93  50					push	ax
020C:0A94  9F					lahf				; Load ah from flags
020C:0A95  50					push	ax
020C:0A96  2E: A1 09B8				mov	ax,cs:data_117		; (020C:09B8=0)
020C:0A9A  2E: 3B 06 09C0			cmp	ax,cs:data_119		; (020C:09C0=32h)
020C:0A9F  72 08				jb	loc_96			; Jump if below
020C:0AA1  B4 01				mov	ah,1
020C:0AA3  C4					db	0C4h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 29

020C:0AA4  C4 16 06EB				les	dx,dword ptr data_100+2	; (020C:06EB=52D2h) Load 32 bit ptr
020C:0AA8  90					nop
020C:0AA9			loc_96:
020C:0AA9  2E: FF 06 09BC			inc	cs:data_118		; (020C:09BC=190h)
020C:0AAE  58					pop	ax
020C:0AAF  9E					sahf				; Store ah into flags
020C:0AB0  58					pop	ax
020C:0AB1			loc_97:
020C:0AB1  5B					pop	bx
020C:0AB2  1F					pop	ds
020C:0AB3  CA 0002				retf	2
							                        ;* No entry point to code
020C:0AB6  80 EC 10				sub	ah,10h
020C:0AB9  74 2C				jz	loc_99			; Jump if zero
020C:0ABB  FE CC				dec	ah
020C:0ABD  74 B6				jz	loc_94			; Jump if zero
020C:0ABF  FE CC				dec	ah
020C:0AC1  74 03				jz	loc_98			; Jump if zero
020C:0AC3  E9 FF28				jmp	loc_85			; (09EE)
020C:0AC6			loc_98:
020C:0AC6  A0 0018				mov	al,byte ptr data_11+2	; (020C:0018=0)
020C:0AC9  8A E0				mov	ah,al
020C:0ACB  24 04				and	al,4
020C:0ACD  51					push	cx
020C:0ACE  B1 05				mov	cl,5
020C:0AD0  D2 E0				shl	al,cl			; Shift w/zeros fill
020C:0AD2  59					pop	cx
020C:0AD3  80 E4 73				and	ah,73h			; 's'
020C:0AD6  0A C4				or	al,ah
020C:0AD8  8A 26 0096				mov	ah,byte ptr data_50	; (020C:0096=0)
020C:0ADC  80 E4 0C				and	ah,0Ch
020C:0ADF  0A E0				or	ah,al
020C:0AE1  A0 0017				mov	al,byte ptr data_11+1	; (020C:0017=0)
020C:0AE4  E9 FF07				jmp	loc_85			; (09EE)
020C:0AE7			loc_99:
020C:0AE7  8B 1E 001A				mov	bx,data_14		; (020C:001A=0AE9Ch)
020C:0AEB  3B 1E 001C				cmp	bx,word ptr data_14+2	; (020C:001C=148Fh)
020C:0AEF  75 13				jne	loc_101			; Jump if not equal
020C:0AF1  E8 FCE5				call	sub_12			; (07D9)
020C:0AF4  B8 9002				mov	ax,9002h
020C:0AF7  CD 15				int	15h			; General services, ah=func 90h
										;  device busy, al=type,
										;   es:bx=ptr of request block
020C:0AF9			loc_100:
020C:0AF9  E8 FCBD				call	sub_11			; (07B9)
020C:0AFC  8B 1E 001A				mov	bx,data_14		; (020C:001A=0AE9Ch)
020C:0B00  3B 1E 001C				cmp	bx,word ptr data_14+2	; (020C:001C=148Fh)
020C:0B04			loc_101:
020C:0B04  E8 00C1				call	sub_19			; (0BC8)
020C:0B07  75 05				jnz	loc_102			; Jump if not zero
020C:0B09  E8 0014				call	sub_14			; (0B20)
020C:0B0C  EB EB				jmp	short loc_100		; (0AF9)
020C:0B0E			loc_102:
020C:0B0E  8B 07				mov	ax,[bx]
020C:0B10  E8 00A8				call	sub_18			; (0BBB)
020C:0B13  89 1E 001A				mov	data_14,bx		; (020C:001A=0AE9Ch)
020C:0B17  E8 0041				call	sub_16			; (0B5B)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 30

020C:0B1A  E8 002F				call	sub_15			; (0B4C)
020C:0B1D  E9 FECE				jmp	loc_85			; (09EE)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_14		proc	near
020C:0B20  50					push	ax
020C:0B21  E8 FCB5				call	sub_12			; (07D9)
020C:0B24  B4 02				mov	ah,2
020C:0B26  C4					db	0C4h
020C:0B27  C4 16 1E8B				les	dx,data_173		; (020C:1E8B=0) Load 32 bit ptr
020C:0B2B  1A 00				sbb	al,[bx+si]
020C:0B2D  3B 1E 001C				cmp	bx,word ptr data_14+2	; (020C:001C=148Fh)
020C:0B31  75 17				jne	loc_105			; Jump if not equal
020C:0B33  2E: A1 09B8				mov	ax,cs:data_117		; (020C:09B8=0)
020C:0B37  2E: 3B 06 09C0			cmp	ax,cs:data_119		; (020C:09C0=32h)
020C:0B3C  73 07				jae	loc_104			; Jump if above or =
020C:0B3E  2E: FF 06 09BC			inc	cs:data_118		; (020C:09BC=20Ah)
020C:0B43  EB E4		;*		jmp	short loc_103		;*(0B29)
020C:0B43  EB E4				db	0EBh,0E4h
020C:0B45			loc_104:
020C:0B45  B4 01				mov	ah,1
020C:0B47  C4					db	0C4h
020C:0B48  C4 16 C358				les	dx,dword ptr ds:[0C358h]	; (020C:C358=9A02h) Load 32 bit ptr

				;ßßßß External Entry into Subroutine ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß

				sub_15:
020C:0B4C  2E: C7 06 09B8 0000			mov	cs:data_117,0		; (020C:09B8=0)
020C:0B53  2E: C7 06 09BC 0000			mov	cs:data_118,0		; (020C:09BC=21Ah)
020C:0B5A  C3					retn
				sub_14		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_16		proc	near
020C:0B5B  53					push	bx
020C:0B5C  50					push	ax
020C:0B5D  9F					lahf				; Load ah from flags
020C:0B5E  8B D8				mov	bx,ax
020C:0B60  58					pop	ax
020C:0B61  53					push	bx
020C:0B62  3C F0				cmp	al,0F0h
020C:0B64  75 06				jne	loc_106			; Jump if not equal
020C:0B66  0A E4				or	ah,ah			; Zero ?
020C:0B68  74 02				jz	loc_106			; Jump if zero
020C:0B6A  32 C0				xor	al,al			; Zero register
020C:0B6C			loc_106:
020C:0B6C  8B D8				mov	bx,ax
020C:0B6E  58					pop	ax
020C:0B6F  9E					sahf				; Store ah into flags
020C:0B70  8B C3				mov	ax,bx
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 31

020C:0B72  5B					pop	bx
020C:0B73  C3					retn
				sub_16		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_17		proc	near
020C:0B74  53					push	bx
020C:0B75  50					push	ax
020C:0B76  9F					lahf				; Load ah from flags
020C:0B77  8B D8				mov	bx,ax
020C:0B79  58					pop	ax
020C:0B7A  53					push	bx
020C:0B7B  80 FC E0				cmp	ah,0E0h
020C:0B7E  75 0F				jne	loc_107			; Jump if not equal
020C:0B80  B4 1C				mov	ah,1Ch
020C:0B82  3C 0D				cmp	al,0Dh
020C:0B84  74 23				je	loc_109			; Jump if equal
020C:0B86  3C 0A				cmp	al,0Ah
020C:0B88  74 1F				je	loc_109			; Jump if equal
020C:0B8A  B4 35				mov	ah,35h			; '5'
020C:0B8C  EB 1B				jmp	short loc_109		; (0BA9)
020C:0B8E  90					nop
020C:0B8F			loc_107:
020C:0B8F  80 FC 84				cmp	ah,84h
020C:0B92  77 1E				ja	loc_110			; Jump if above
020C:0B94  3C F0				cmp	al,0F0h
020C:0B96  75 07				jne	loc_108			; Jump if not equal
020C:0B98  0A E4				or	ah,ah			; Zero ?
020C:0B9A  74 0D				jz	loc_109			; Jump if zero
020C:0B9C  EB 14				jmp	short loc_110		; (0BB2)
020C:0B9E  90					nop
020C:0B9F			loc_108:
020C:0B9F  3C E0				cmp	al,0E0h
020C:0BA1  75 06				jne	loc_109			; Jump if not equal
020C:0BA3  0A E4				or	ah,ah			; Zero ?
020C:0BA5  74 02				jz	loc_109			; Jump if zero
020C:0BA7  32 C0				xor	al,al			; Zero register
020C:0BA9			loc_109:
020C:0BA9  8B D8				mov	bx,ax
020C:0BAB  58					pop	ax
020C:0BAC  9E					sahf				; Store ah into flags
020C:0BAD  8B C3				mov	ax,bx
020C:0BAF  5B					pop	bx
020C:0BB0  F8					clc				; Clear carry flag
020C:0BB1  C3					retn
020C:0BB2			loc_110:
020C:0BB2  8B D8				mov	bx,ax
020C:0BB4  58					pop	ax
020C:0BB5  9E					sahf				; Store ah into flags
020C:0BB6  8B C3				mov	ax,bx
020C:0BB8  5B					pop	bx
020C:0BB9  F9					stc				; Set carry flag
020C:0BBA  C3					retn
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 32

				sub_17		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_18		proc	near
020C:0BBB  43					inc	bx
020C:0BBC  43					inc	bx
020C:0BBD  3B 1E 0082				cmp	bx,data_45		; (020C:0082=10h)
020C:0BC1  75 04				jne	loc_111			; Jump if not equal
020C:0BC3  8B 1E 0080				mov	bx,data_44		; (020C:0080=1850h)
020C:0BC7			loc_111:
020C:0BC7  C3					retn
				sub_18		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_19		proc	near
020C:0BC8  53					push	bx
020C:0BC9  51					push	cx
020C:0BCA  50					push	ax
020C:0BCB  9F					lahf				; Load ah from flags
020C:0BCC  50					push	ax
020C:0BCD  A0 0017				mov	al,byte ptr data_11+1	; (020C:0017=0)
020C:0BD0  24 70				and	al,70h			; 'p'
020C:0BD2  B1 04				mov	cl,4
020C:0BD4  D2 E8				shr	al,cl			; Shift w/zeros fill
020C:0BD6  24 07				and	al,7
020C:0BD8  8A 1E 0097				mov	bl,byte ptr data_50+1	; (020C:0097=0)
020C:0BDC  32 D8				xor	bl,al
020C:0BDE  80 E3 07				and	bl,7
020C:0BE1  74 25				jz	loc_112			; Jump if zero
020C:0BE3  F6 06 0097 40			test	byte ptr data_50+1,40h	; (020C:0097=0) '@'
020C:0BE8  75 1E				jnz	loc_112			; Jump if not zero
020C:0BEA  80 0E 0097 40			or	byte ptr data_50+1,40h	; (020C:0097=0) '@'
020C:0BEF  D2 E3				shl	bl,cl			; Shift w/zeros fill
020C:0BF1  0A C3				or	al,bl
020C:0BF3  B4 03				mov	ah,3
020C:0BF5  C4					db	0C4h
020C:0BF6  C4 16 2680				les	dx,dword ptr data_209	; (020C:2680=6572h) Load 32 bit ptr
020C:0BFA  97					xchg	di,ax
020C:0BFB  00 F8				add	al,bh
020C:0BFD  24 0F				and	al,0Fh
020C:0BFF  08 06 0097				or	byte ptr data_50+1,al	; (020C:0097=0)
020C:0C03  80 26 0097 BF			and	byte ptr data_50+1,0BFh	; (020C:0097=0)
020C:0C08			loc_112:
020C:0C08  58					pop	ax
020C:0C09  9E					sahf				; Store ah into flags
020C:0C0A  58					pop	ax
020C:0C0B  59					pop	cx
020C:0C0C  5B			data_122	db	5Bh			; Data table (indexed access)
020C:0C0D  C3					retn
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 33

				sub_19		endp

020C:0C0E  C4					db	0C4h
							                        ;* No entry point to code
020C:0C0F  C4 18				les	bx,dword ptr [bx+si]	; Load 32 bit ptr
020C:0C11  E9 FA38				jmp	loc_36			; (064C)
020C:0C14  C4					db	0C4h
							                        ;* No entry point to code
020C:0C15  C4 19				les	bx,dword ptr [bx+di]	; Load 32 bit ptr
020C:0C17  E9 FA32				jmp	loc_36			; (064C)
020C:0C1A  B45D			data_123	dw	0B45Dh
020C:0C1C  0010			data_124	dw	10h
020C:0C1E  01			data_125	db	1
020C:0C1F  E8 FBB7				call	sub_12			; (07D9)
020C:0C22  80 FC 02				cmp	ah,2
020C:0C25  72 06				jb	loc_113			; Jump if below
020C:0C27  C4					db	0C4h
020C:0C28  C4 1A				les	bx,dword ptr [bp+si]	; Load 32 bit ptr
020C:0C2A  E9 FA1F				jmp	loc_36			; (064C)
020C:0C2D			loc_113:
020C:0C2D  1E					push	ds
020C:0C2E  53					push	bx
020C:0C2F  50					push	ax
020C:0C30  B8 0040				mov	ax,40h
020C:0C33  8E D8				mov	ds,ax
020C:0C35  58					pop	ax
020C:0C36  E8 FB80				call	sub_11			; (07B9)
020C:0C39  0A E4				or	ah,ah			; Zero ?
020C:0C3B  75 3F				jnz	loc_116			; Jump if not zero
020C:0C3D			loc_114:
020C:0C3D  A0 0070				mov	al,byte ptr ds:[70h]	; (0040:0070=0)
020C:0C40  8B 0E 006E				mov	cx,word ptr ds:[6Eh]	; (0040:006E=10h)
020C:0C44  8B 16 006C				mov	dx,word ptr ds:[6Ch]	; (0040:006C=0B45Eh)
020C:0C48  2E: 39 0E 0C1C			cmp	cs:data_124,cx		; (020C:0C1C=10h)
020C:0C4D  75 35				jne	loc_117			; Jump if not equal
020C:0C4F  2E: 8B 1E 0C1A			mov	bx,cs:data_123		; (020C:0C1A=0B45Dh)
020C:0C54  3B DA				cmp	bx,dx
020C:0C56  74 05				je	loc_115			; Jump if equal
020C:0C58  43					inc	bx
020C:0C59  3B DA				cmp	bx,dx
020C:0C5B  75 27				jne	loc_117			; Jump if not equal
020C:0C5D			loc_115:
020C:0C5D  2E: FE 06 0C1E			inc	cs:data_125		; (020C:0C1E=1)
020C:0C62  2E: 80 3E 0C1E 10			cmp	cs:data_125,10h		; (020C:0C1E=1)
020C:0C68  72 20				jb	loc_118			; Jump if below
020C:0C6A  E8 FB6C				call	sub_12			; (07D9)
020C:0C6D  33 C0				xor	ax,ax			; Zero register
020C:0C6F  2E: FF 0E 0C1A			dec	cs:data_123		; (020C:0C1A=0B45Dh)
020C:0C74  C4					db	0C4h
020C:0C75  C4 5A E8				les	bx,dword ptr [bp+si-18h]	; Load 32 bit ptr
020C:0C78  3F					aas				; Ascii adjust
020C:0C79  FB					sti				; Enable interrupts
020C:0C7A  EB C1				jmp	short loc_114		; (0C3D)
020C:0C7C			loc_116:
020C:0C7C  89 16 006C				mov	word ptr ds:[6Ch],dx	; (0040:006C=0B45Eh)
020C:0C80  89 0E 006E				mov	word ptr ds:[6Eh],cx	; (0040:006E=10h)
020C:0C84			loc_117:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 34

020C:0C84  2E: C6 06 0C1E 00			mov	cs:data_125,0		; (020C:0C1E=1)
020C:0C8A			loc_118:
020C:0C8A  2E: 89 16 0C1A			mov	cs:data_123,dx		; (020C:0C1A=0B45Dh)
020C:0C8F  2E: 89 0E 0C1C			mov	cs:data_124,cx		; (020C:0C1C=10h)
020C:0C94  C6 06 0070 00			mov	byte ptr ds:[70h],0	; (0040:0070=0)
020C:0C99  5B					pop	bx
020C:0C9A  1F					pop	ds
020C:0C9B  E9 F9AE				jmp	loc_36			; (064C)
020C:0C9E  C4					db	0C4h
							                        ;* No entry point to code
020C:0C9F  C4 1E A8E9				les	bx,dword ptr ds:[0A8E9h]	; (020C:A8E9=84Ch) Load 32 bit ptr
020C:0CA3  F9					stc				; Set carry flag
020C:0CA4  C4					db	0C4h
020C:0CA5  C4 70 E9				les	si,dword ptr [bx+si-17h]	; Load 32 bit ptr
020C:0CA8  A2 E8F9				mov	byte ptr ds:[0E8F9h],al	; (020C:E8F9=9Ah)
020C:0CAB  2C FB				sub	al,0FBh
020C:0CAD  CD 4A				int	4Ah			; RTC Alarm occurred
020C:0CAF  EB 01				jmp	short $+3		; delay for I/O
020C:0CB1  90					nop
020C:0CB2  EB 01				jmp	short $+3		; delay for I/O
020C:0CB4  90					nop
020C:0CB5  EB 01				jmp	short $+3		; delay for I/O
020C:0CB7  90					nop
020C:0CB8  E8 FAFE				call	sub_11			; (07B9)
020C:0CBB  C4					db	0C4h
020C:0CBC  C4					db	0C4h
020C:0CBD  FE C4				inc	ah
020C:0CBF  C4 71 CD				les	si,dword ptr [bx+di-33h]	; Load 32 bit ptr
020C:0CC2  0A E9				or	ch,cl
020C:0CC4  86 F9				xchg	bh,cl
020C:0CC6  C4					db	0C4h
020C:0CC7			loc_119:
020C:0CC7  C4 75 CD				les	si,dword ptr [di-33h]	; Load 32 bit ptr
020C:0CCA  02 E9				add	ch,cl
020C:0CCC  7E F9				jle	loc_119			; Jump if < or =
020C:0CCE  E8 FB08				call	sub_12			; (07D9)
020C:0CD1  EB 00				jmp	short $+2		; delay for I/O
020C:0CD3  EB 00				jmp	short $+2		; delay for I/O
020C:0CD5  EB 00				jmp	short $+2		; delay for I/O
020C:0CD7  C4					db	0C4h
020C:0CD8  C4					db	0C4h
020C:0CD9  FE					db	0FEh
020C:0CDA  33 F6				xor	si,si			; Zero register
020C:0CDC  8E DE				mov	ds,si
020C:0CDE  B8 4400				mov	ax,4400h
020C:0CE1  DB					db	0DBh
020C:0CE2  02 4E 00				add	cl,[bp]
020C:0CE5  0B DB				or	bx,bx			; Zero ?
020C:0CE7  07					pop	es
020C:0CE8  48					dec	ax
020C:0CE9  49					dec	cx
020C:0CEA  4D					dec	bp
020C:0CEB  45					inc	bp
020C:0CEC  4D					dec	bp
020C:0CED  20 20				and	[bx+si],ah
020C:0CEF  20 24				and	[si],ah
020C:0CF1  00 70 00		;*		add	[bx+si+0],dh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 35

020C:0CF1  00 70 00				db	 00h, 70h, 00h
020C:0CF4  00 A0 0041				add	byte ptr ds:[41h][bx+si],ah	; (0000:0041=8)
020C:0CF8  4C					dec	sp
020C:0CF9  00 58 4D				add	[bx+si+4Dh],bl
020C:0CFC  53					push	bx
020C:0CFD  58					pop	ax
020C:0CFE  58					pop	ax
020C:0CFF  58					pop	ax
020C:0D00  58					pop	ax
020C:0D01  30 DE				xor	dh,bl
020C:0D03  04 74				add	al,74h			; 't'
020C:0D05  00 82 FB04				add	[bp+si-4FCh],al
020C:0D09  8D 54 00				lea	dx,[si+0]		; Load effective addr
020C:0D0C  00 00				add	[bx+si],al
020C:0D0E  42					inc	dx
020C:0D0F  05 020C				add	ax,20Ch
020C:0D12  A4					movsb				; Mov [si] to es:[di]
020C:0D13  10 A7 0100				adc	byte ptr ds:[100h][bx],ah	; (0000:0100=8Ah)
020C:0D17  01 01				add	[bx+di],ax
020C:0D19  01 00				add	[bx+si],ax
020C:0D1B  01 00				add	[bx+si],ax
020C:0D1D  01 00				add	[bx+si],ax
020C:0D1F  01 00				add	[bx+si],ax
020C:0D21  000A[00]				db	10 dup (0)
020C:0D2B  02 01				add	al,[bx+di]
020C:0D2D  00					db	0
020C:0D2E  00 00				add	[bx+si],al
020C:0D30  00 2E 1E89				add	byte ptr ds:[1E89h],ch	; (0000:1E89=0)
020C:0D34  16					push	ss
020C:0D35  00 2E 068C				add	byte ptr ds:[68Ch],ch	; (0000:068C=0)
020C:0D39  18 00				sbb	[bx+si],al
020C:0D3B  CB					retf
							                        ;* No entry point to code
020C:0D3C  53					push	bx
020C:0D3D  1E					push	ds
020C:0D3E  2E: C5 1E 0016			lds	bx,cs:data_11		; (020C:0016=0) Load 32 bit ptr
020C:0D43  80 7F 02 10				cmp	byte ptr [bx+2],10h
020C:0D47  C7 47 03 0100			mov	word ptr [bx+3],100h
020C:0D4C  76 05				jbe	loc_120			; Jump if below or =
020C:0D4E  81 4F 03 8003			or	word ptr [bx+3],8003h
020C:0D53			loc_120:
020C:0D53  1F					pop	ds
020C:0D54  5B					pop	bx
020C:0D55  CB					retf
							                        ;* No entry point to code
020C:0D56  E8 03DB				call	sub_28			; (1134)
020C:0D59  80 FC 43				cmp	ah,43h			; 'C'
020C:0D5C  75 15				jne	loc_122			; Jump if not equal
020C:0D5E  0A C0				or	al,al			; Zero ?
020C:0D60  75 05				jnz	loc_121			; Jump if not zero
020C:0D62  B0 80				mov	al,80h
020C:0D64  E9 03F5				jmp	loc_173			; (115C)
020C:0D67			loc_121:
020C:0D67  3C 10				cmp	al,10h
020C:0D69  75 08				jne	loc_122			; Jump if not equal
020C:0D6B  0E					push	cs
020C:0D6C  07					pop	es
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 36

020C:0D6D  BB 00AF				mov	bx,0AFh
020C:0D70  E9 03E9				jmp	loc_173			; (115C)
020C:0D73			loc_122:
020C:0D73  E8 039E				call	sub_27			; (1114)
020C:0D76  2E: FF 2E 0022			jmp	dword ptr cs:data_19	; (020C:0022=0FFh)
							                        ;* No entry point to code
020C:0D7B  12 A0 0265				adc	ah,data_80[bx+si]	; (020C:0265=0)
020C:0D7F  98					cbw				; Convrt byte to word
020C:0D80  02 B2 D402				add	dh,[bp+si-2BFEh]
020C:0D84  02 F6				add	dh,dh
020C:0D86  02 30				add	dh,[bx+si]
020C:0D88  03 99 2B03				add	bx,data_213[bx+di]	; (020C:2B03=8D1Eh)
020C:0D8C  A0 A03C				mov	al,byte ptr ds:[0A03Ch]	; (020C:A03C=2Eh)
020C:0D8F  94					xchg	sp,ax
020C:0D90  A0 A264				mov	al,byte ptr ds:[0A264h]	; (020C:A264=0EAh)
020C:0D93  CF					iret				; Interrupt return
							                        ;* No entry point to code
020C:0D94  A0 A0FF				mov	al,byte ptr ds:[0A0FFh]	; (020C:A0FF=0FFh)
020C:0D97  23 A1 A159				and	sp,word ptr ds:[0A159h][bx+di]	; (020C:A159=544h)
020C:0D9B  11 A2 A216				adc	[bp+si-5DEAh],sp
020C:0D9F  EB 03				jmp	short loc_123		; (0DA4)
020C:0DA1  90					nop
020C:0DA2  90					nop
020C:0DA3  90					nop
020C:0DA4			loc_123:
020C:0DA4  51					push	cx
020C:0DA5  56					push	si
020C:0DA6  57					push	di
020C:0DA7  1E					push	ds
020C:0DA8  06					push	es
020C:0DA9  9C					pushf				; Push flags
020C:0DAA  FC					cld				; Clear direction
020C:0DAB  1E					push	ds
020C:0DAC  07					pop	es
020C:0DAD  0E					push	cs
020C:0DAE  1F					pop	ds
020C:0DAF  50					push	ax
020C:0DB0  0A E4				or	ah,ah			; Zero ?
020C:0DB2  74 31				jz	loc_126			; Jump if zero
020C:0DB4  80 FC 12				cmp	ah,12h
020C:0DB7  72 07				jb	loc_124			; Jump if below
020C:0DB9  58					pop	ax
020C:0DBA  33 C0				xor	ax,ax			; Zero register
020C:0DBC  B3 80				mov	bl,80h
020C:0DBE  EB 72				jmp	short loc_130		; (0E32)
020C:0DC0			loc_124:
020C:0DC0  9C					pushf				; Push flags
020C:0DC1  E8 0350				call	sub_27			; (1114)
020C:0DC4  83 3E 0020 00			cmp	word ptr data_16+2,0	; (020C:0020=0A3B9h)
020C:0DC9  75 05				jne	loc_125			; Jump if not equal
020C:0DCB  52					push	dx
020C:0DCC  E8 0076				call	sub_21			; (0E45)
020C:0DCF  5A					pop	dx
020C:0DD0			loc_125:
020C:0DD0  0E					push	cs
020C:0DD1  FF 16 0014				call	word ptr ds:[14h]	; (020C:0014=0E0Dh)
020C:0DD5  80 3E 002C 00			cmp	byte ptr data_24,0	; (020C:002C=39h)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 37

020C:0DDA  74 09				je	loc_126			; Jump if equal
020C:0DDC  58					pop	ax
020C:0DDD  33 C0				xor	ax,ax			; Zero register
020C:0DDF  B3 81				mov	bl,81h
020C:0DE1  33 D2				xor	dx,dx			; Zero register
020C:0DE3  EB			data_127	db	0EBh
020C:0DE4  4D					dec	bp
020C:0DE5			loc_126:
020C:0DE5  58					pop	ax
020C:0DE6  50					push	ax
020C:0DE7  8A C4				mov	al,ah
020C:0DE9  32 E4				xor	ah,ah			; Zero register
020C:0DEB  D1 E0				shl	ax,1			; Shift w/zeros fill
020C:0DED  8B F8				mov	di,ax
020C:0DEF  58					pop	ax
020C:0DF0  8B BD 008B				mov	di,data_47[di]		; (020C:008B=504Fh)
020C:0DF4  0B FF				or	di,di			; Zero ?
020C:0DF6  79 38				jns	loc_129			; Jump if not sign
020C:0DF8  80 3E 002B 00			cmp	data_23,0		; (020C:002B=38h)
020C:0DFD  74 12				je	loc_127			; Jump if equal
020C:0DFF  56					push	si
020C:0E00  57					push	di
020C:0E01  50					push	ax
020C:0E02  5153			data_128	dw	5153h
020C:0E04  E8 01DF				call	sub_23			; (0FE6)
020C:0E07  3D 0001				cmp	ax,1
020C:0E0A  59					pop	cx
020C:0E0B  5B					pop	bx
020C:0E0C  58					pop	ax
020C:0E0D  5F					pop	di
020C:0E0E  5E					pop	si
020C:0E0F  75 17				jnz	loc_128			; Jump if not zero
020C:0E11			loc_127:
020C:0E11  0E E8 002A				callf	sub_20			; (0E3F)
020C:0E15  80 3E 002B 00			cmp	data_23,0		; (020C:002B=38h)
020C:0E1A  74 16				je	loc_130			; Jump if equal
020C:0E1C  50					push	ax
020C:0E1D  53					push	bx
020C:0E1E  E8 01FF				call	sub_24			; (1020)
020C:0E21  3D 0001				cmp	ax,1
020C:0E24  5B					pop	bx
020C:0E25  58					pop	ax
020C:0E26  74 0A				jz	loc_130			; Jump if zero
020C:0E28			loc_128:
020C:0E28  33 C0				xor	ax,ax			; Zero register
020C:0E2A  33 D2				xor	dx,dx			; Zero register
020C:0E2C  B3 82				mov	bl,82h
020C:0E2E  EB 02				jmp	short loc_130		; (0E32)
020C:0E30			loc_129:
020C:0E30  FF D7				call	di			;*
020C:0E32			loc_130:
020C:0E32  0E					push	cs
020C:0E33  FF 16 0014				call	word ptr ds:[14h]	; (020C:0014=0E0Dh)
020C:0E37  07					pop	es
020C:0E38  1F					pop	ds
020C:0E39  5F					pop	di
020C:0E3A  5E					pop	si
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 38

020C:0E3B  59					pop	cx
020C:0E3C  CB					retf				; Return far
020C:0E3D  6E					db	6Eh
020C:0E3E  FB					sti				; Enable interrupts

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_20		proc	near
020C:0E3F  FF 36 014D				push	data_69			; (020C:014D=5582h)
020C:0E43  57					push	di
020C:0E44  CB					retf				; Return far
				sub_20		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_21		proc	near
020C:0E45  06					push	es
020C:0E46  E8 0071				call	sub_22			; (0EBA)
020C:0E49  80 3E 002C 00			cmp	byte ptr data_24,0	; (020C:002C=39h)
020C:0E4E  74 02				je	loc_131			; Jump if equal
020C:0E50  07					pop	es
020C:0E51  C3					retn
020C:0E52			loc_131:
020C:0E52  B8 020D				mov	ax,20Dh
020C:0E55  C4					db	0C4h
020C:0E56  C4 52 09				les	dx,dword ptr [bp+si+9]	; Load 32 bit ptr
020C:0E59  C4 36 001A				les	si,dword ptr data_14	; (020C:001A=0AE9Ch) Load 32 bit ptr
020C:0E5D  26: 87 04				xchg	es:[si],ax
020C:0E60  A3 001E				mov	data_16,ax		; (020C:001E=961Fh)
020C:0E63  8C C8				mov	ax,cs
020C:0E65  26: 87 44 02				xchg	es:[si+2],ax
020C:0E69  A3 0020				mov	word ptr data_16+2,ax	; (020C:0020=0A3B9h)
020C:0E6C  8B C1				mov	ax,cx
020C:0E6E  3D 3C00				cmp	ax,3C00h
020C:0E71  72 03				jb	loc_132			; Jump if below
020C:0E73  B8 3C00				mov	ax,3C00h
020C:0E76			loc_132:
020C:0E76  2B 06 0037				sub	ax,data_30		; (020C:0037=0)
020C:0E7A  3D 0040				cmp	ax,40h
020C:0E7D  72 0C				jb	loc_133			; Jump if below
020C:0E7F  83 3E 0035 00			cmp	data_29,0		; (020C:0035=80Fh)
020C:0E84  75 05				jne	loc_133			; Jump if not equal
020C:0E86  C6 06 0029 01			mov	byte ptr ds:[29h],1	; (020C:0029=14h)
020C:0E8B			loc_133:
020C:0E8B  0B C0				or	ax,ax			; Zero ?
020C:0E8D  74 20				jz	loc_136			; Jump if zero
020C:0E8F  B9 0400				mov	cx,400h
020C:0E92  33 DB				xor	bx,bx			; Zero register
020C:0E94  80 3E 0029 00			cmp	byte ptr ds:[29h],0	; (020C:0029=14h)
020C:0E99  74 03				je	loc_134			; Jump if equal
020C:0E9B  BB 0040				mov	bx,40h
020C:0E9E			loc_134:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 39

020C:0E9E  3B 1E 0035				cmp	bx,data_29		; (020C:0035=80Fh)
020C:0EA2  73 04				jae	loc_135			; Jump if above or =
020C:0EA4  8B 1E 0035				mov	bx,data_29		; (020C:0035=80Fh)
020C:0EA8			loc_135:
020C:0EA8  03 CB				add	cx,bx
020C:0EAA  2B C3				sub	ax,bx
020C:0EAC  E8 01E2				call	sub_26			; (1091)
020C:0EAF			loc_136:
020C:0EAF  07					pop	es
020C:0EB0  C3					retn
				sub_21		endp

							                        ;* No entry point to code
020C:0EB1  13 00				adc	ax,[bx+si]
020C:0EB3  FF					db	0FFh
020C:0EB4  FF 56 44				call	word ptr [bp+44h]	;*
020C:0EB7  49					dec	cx
020C:0EB8  53					push	bx
020C:0EB9  4B					dec	bx

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_22		proc	near
020C:0EBA  06					push	es
020C:0EBB  33 C0				xor	ax,ax			; Zero register
020C:0EBD  8E C0				mov	es,ax
020C:0EBF  26: 8E 06 0066			mov	es,word ptr es:[66h]	; (0000:0066=20Ch)
020C:0EC4  BF 0012				mov	di,12h
020C:0EC7  BE 01C5				mov	si,1C5h
020C:0ECA  B9 0005				mov	cx,5
020C:0ECD  FC					cld				; Clear direction
020C:0ECE  F3/ A6				repe	cmpsb			; Rep zf=1+cx >0 Cmp [si] to es:[di]
020C:0ED0  07					pop	es
020C:0ED1  74 24				jz	loc_137			; Jump if zero
020C:0ED3  E8 0110				call	sub_23			; (0FE6)
020C:0ED6  06					push	es
020C:0ED7  2E: C4 3E 01C1			les	di,cs:data_76		; (020C:01C1=0) Load 32 bit ptr
020C:0EDC  BE 01C5				mov	si,1C5h
020C:0EDF  B9 0005				mov	cx,5
020C:0EE2  FC					cld				; Clear direction
020C:0EE3  F3/ A6				repe	cmpsb			; Rep zf=1+cx >0 Cmp [si] to es:[di]
020C:0EE5  07					pop	es
020C:0EE6  9C					pushf				; Push flags
020C:0EE7  E8 0136				call	sub_24			; (1020)
020C:0EEA  0E					push	cs
020C:0EEB  FF 16 0014				call	word ptr ds:[14h]	; (020C:0014=0E0Dh)
020C:0EEF  74 06				jz	loc_137			; Jump if zero
020C:0EF1  C6 06 002C 00			mov	byte ptr data_24,0	; (020C:002C=39h)
020C:0EF6  C3					retn
020C:0EF7			loc_137:
020C:0EF7  C6 06 002C 01			mov	byte ptr data_24,1	; (020C:002C=39h)
020C:0EFC  C3					retn
				sub_22		endp

							                        ;* No entry point to code
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 40

020C:0EFD  80 FC 88				cmp	ah,88h
020C:0F00  74 0A				je	loc_138			; Jump if equal
020C:0F02  80 FC 87				cmp	ah,87h
020C:0F05  74 0C				je	loc_139			; Jump if equal
020C:0F07  2E: FF 2E 001E			jmp	dword ptr cs:data_16	; (020C:001E=961Fh)
020C:0F0C			loc_138:
020C:0F0C  2E: A1 0035				mov	ax,cs:data_29		; (020C:0035=80Fh)
020C:0F10  E9 0249				jmp	loc_173			; (115C)
020C:0F13			loc_139:
020C:0F13  E8 01FE				call	sub_27			; (1114)
020C:0F16  83 EC 04				sub	sp,4
020C:0F19  60					db	60h
020C:0F1A  E8 016C				call	sub_25			; (1089)
020C:0F1D  8B EC				mov	bp,sp
020C:0F1F  89 46 12				mov	[bp+12h],ax
020C:0F22  8B 46 18				mov	ax,[bp+18h]
020C:0F25  89 46 10				mov	[bp+10h],ax
020C:0F28  61					db	61h
020C:0F29  2E: FF 1E 001E			call	dword ptr cs:data_16	; (020C:001E=961Fh)
020C:0F2E  50					push	ax
020C:0F2F  9C					pushf				; Push flags
020C:0F30  55					push	bp
020C:0F31  8B EC				mov	bp,sp
020C:0F33  8B 46 02				mov	ax,[bp+2]
020C:0F36  89 46 0C				mov	[bp+0Ch],ax
020C:0F39  83 7E 06 00				cmp	word ptr [bp+6],0
020C:0F3D  5D					pop	bp
020C:0F3E  58					pop	ax
020C:0F3F  58					pop	ax
020C:0F40  74 0B				jz	loc_140			; Jump if zero
020C:0F42  E8 01CF				call	sub_27			; (1114)
020C:0F45  60					db	60h
020C:0F46  B8 0001				mov	ax,1
020C:0F49  E8 0272				call	sub_29			; (11BE)
020C:0F4C  61					db	61h
020C:0F4D			loc_140:
020C:0F4D  83 C4 02				add	sp,2
020C:0F50  E9 0209				jmp	loc_173			; (115C)
							                        ;* No entry point to code
020C:0F53  00 00				add	[bx+si],al
020C:0F55  E8 01BC				call	sub_27			; (1114)
020C:0F58  B3 91				mov	bl,91h
020C:0F5A  3C 40				cmp	al,40h			; '@'
020C:0F5C  75 06				jne	loc_141			; Jump if not equal
020C:0F5E  3B 16 0263				cmp	dx,data_79		; (020C:0263=0)
020C:0F62  74 21				je	loc_142			; Jump if equal
020C:0F64			loc_141:
020C:0F64  80 3E 0026 01			cmp	data_20,1		; (020C:0026=3)
020C:0F69  74 1A				je	loc_142			; Jump if equal
020C:0F6B  B3 90				mov	bl,90h
020C:0F6D  80 3E 0029 00			cmp	byte ptr ds:[29h],0	; (020C:0029=14h)
020C:0F72  74 11				je	loc_142			; Jump if equal
020C:0F74  B3 92				mov	bl,92h
020C:0F76  3B 16 0033				cmp	dx,data_28		; (020C:0033=0Ch)
020C:0F7A  72 09				jb	loc_142			; Jump if below
020C:0F7C  B8 0001				mov	ax,1
020C:0F7F  A2 0026				mov	data_20,al		; (020C:0026=3)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 41

020C:0F82  32 DB				xor	bl,bl			; Zero register
020C:0F84  C3					retn
020C:0F85			loc_142:
020C:0F85  33 C0				xor	ax,ax			; Zero register
020C:0F87  C3					retn
							                        ;* No entry point to code
020C:0F88  E8 0189				call	sub_27			; (1114)
020C:0F8B  A0 0026				mov	al,data_20		; (020C:0026=3)
020C:0F8E  0A C0				or	al,al			; Zero ?
020C:0F90  74 0B				jz	loc_143			; Jump if zero
020C:0F92  C6 06 0026 00			mov	data_20,0		; (020C:0026=3)
020C:0F97  B8 0001				mov	ax,1
020C:0F9A  32 DB				xor	bl,bl			; Zero register
020C:0F9C  C3					retn
020C:0F9D			loc_143:
020C:0F9D  33 C0				xor	ax,ax			; Zero register
020C:0F9F  B3 93				mov	bl,93h
020C:0FA1  C3					retn
							                        ;* No entry point to code
020C:0FA2  E8 016F				call	sub_27			; (1114)
020C:0FA5  83 3E 0031 01			cmp	word ptr ds:[31h],1	; (020C:0031=3F3Eh)
020C:0FAA  74 0D				je	loc_144			; Jump if equal
020C:0FAC  E8 0037				call	sub_23			; (0FE6)
020C:0FAF  0B C0				or	ax,ax			; Zero ?
020C:0FB1  74 0C				jz	loc_145			; Jump if zero
020C:0FB3  C7 06 0031 0001			mov	word ptr ds:[31h],1	; (020C:0031=3F3Eh)
020C:0FB9			loc_144:
020C:0FB9  B8 0001				mov	ax,1
020C:0FBC  32 DB				xor	bl,bl			; Zero register
020C:0FBE  C3					retn
020C:0FBF			loc_145:
020C:0FBF  B3 82				mov	bl,82h
020C:0FC1  33 C0				xor	ax,ax			; Zero register
020C:0FC3  C3					retn
							                        ;* No entry point to code
020C:0FC4  E8 014D				call	sub_27			; (1114)
020C:0FC7  83 3E 0031 00			cmp	word ptr ds:[31h],0	; (020C:0031=3F3Eh)
020C:0FCC  74 0D				je	loc_146			; Jump if equal
020C:0FCE  E8 004F				call	sub_24			; (1020)
020C:0FD1  0B C0				or	ax,ax			; Zero ?
020C:0FD3  74 0C				jz	loc_147			; Jump if zero
020C:0FD5  C7 06 0031 0000			mov	word ptr ds:[31h],0	; (020C:0031=3F3Eh)
020C:0FDB			loc_146:
020C:0FDB  B8 0001				mov	ax,1
020C:0FDE  32 DB				xor	bl,bl			; Zero register
020C:0FE0  C3					retn
020C:0FE1			loc_147:
020C:0FE1  B3 82				mov	bl,82h
020C:0FE3  33			data_130	db	33h
020C:0FE4  C0					db	0C0h
020C:0FE5  C3					retn

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_23		proc	near
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 42

020C:0FE6  E8 012B				call	sub_27			; (1114)
020C:0FE9  80 3E 0027 01			cmp	data_21,1		; (020C:0027=4)
020C:0FEE  75 25				jne	loc_151			; Jump if not equal
020C:0FF0  C6 06 003B 03			mov	data_31,3		; (020C:003B=0)
020C:0FF5  83 3E 002F 00			cmp	word ptr ds:[2Fh],0	; (020C:002F=3D3Ch)
020C:0FFA  74 07				je	loc_149			; Jump if equal
020C:0FFC			loc_148:
020C:0FFC  E8 008A				call	sub_25			; (1089)
020C:0FFF  0B C0				or	ax,ax			; Zero ?
020C:1001  75			data_132	db	75h			; Data table (indexed access)
020C:1002  0E					push	cs
020C:1003			loc_149:
020C:1003  B8 0001				mov	ax,1
020C:1006  E8 01B5				call	sub_29			; (11BE)
020C:1009  FE 0E 003B				dec	data_31			; (020C:003B=0)
020C:100D  75 ED				jnz	loc_148			; Jump if not zero
020C:100F  EB 0A				jmp	short loc_152		; (101B)
020C:1011			loc_150:
020C:1011  FF 06 002F				inc	word ptr ds:[2Fh]	; (020C:002F=3D3Ch)
020C:1015			loc_151:
020C:1015  B8 0001				mov	ax,1
020C:1018  32 DB				xor	bl,bl			; Zero register
020C:101A  C3					retn
020C:101B			loc_152:
020C:101B  B3 82				mov	bl,82h
020C:101D  33 C0				xor	ax,ax			; Zero register
020C:101F  C3					retn
				sub_23		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_24		proc	near
020C:1020  E8 00F1				call	sub_27			; (1114)
020C:1023  80 3E 0027 00			cmp	data_21,0		; (020C:0027=4)
020C:1028  74 34				je	loc_157			; Jump if equal
020C:102A  83 3E 002F 00			cmp	word ptr ds:[2Fh],0	; (020C:002F=3D3Ch)
020C:102F  74 33				je	loc_158			; Jump if equal
020C:1031  C6 06 003B 03			mov	data_31,3		; (020C:003B=0)
020C:1036			loc_153:
020C:1036  E8 0050				call	sub_25			; (1089)
020C:1039  83 3E 002F 01			cmp	word ptr ds:[2Fh],1	; (020C:002F=3D3Ch)
020C:103E  75 08				jne	loc_154			; Jump if not equal
020C:1040  0B C0				or	ax,ax			; Zero ?
020C:1042  74 16				jz	loc_156			; Jump if zero
020C:1044  33 C0				xor	ax,ax			; Zero register
020C:1046  EB 07				jmp	short loc_155		; (104F)
020C:1048			loc_154:
020C:1048  0B C0				or	ax,ax			; Zero ?
020C:104A  75 0E				jnz	loc_156			; Jump if not zero
020C:104C  B8 0001				mov	ax,1
020C:104F			loc_155:
020C:104F  E8 016C				call	sub_29			; (11BE)
020C:1052  FE 0E 003B				dec	data_31			; (020C:003B=0)
020C:1056  75 DE				jnz	loc_153			; Jump if not zero
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 43

020C:1058  EB 0A				jmp	short loc_158		; (1064)
020C:105A			loc_156:
020C:105A  FF 0E 002F				dec	word ptr ds:[2Fh]	; (020C:002F=3D3Ch)
020C:105E			loc_157:
020C:105E  B8 0001				mov	ax,1
020C:1061  32 DB				xor	bl,bl			; Zero register
020C:1063  C3					retn
020C:1064			loc_158:
020C:1064  B3 82				mov	bl,82h
020C:1066  33 C0				xor	ax,ax			; Zero register
020C:1068  C3					retn
				sub_24		endp

							                        ;* No entry point to code
020C:1069  2E: 80 3E 002B 00			cmp	cs:data_23,0		; (020C:002B=38h)
020C:106F  74 04				je	loc_159			; Jump if equal
020C:1071  B8 0001				mov	ax,1
020C:1074  CB					retf				; Return far
020C:1075			loc_159:
020C:1075  E8 FF6E				call	sub_23			; (0FE6)
020C:1078  CB					retf
							                        ;* No entry point to code
020C:1079  2E: 80 3E 002B 00			cmp	cs:data_23,0		; (020C:002B=38h)
020C:107F  74 04				je	loc_160			; Jump if equal
020C:1081  B8 0001				mov	ax,1
020C:1084  CB					retf				; Return far
020C:1085			loc_160:
020C:1085  E8 FF98				call	sub_24			; (1020)
020C:1088  CB					retf				; Return far

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_25		proc	near
020C:1089  2E: A0 003C				mov	al,cs:data_32		; (020C:003C=10h)
020C:108D  98					cbw				; Convrt byte to word
020C:108E  32 DB				xor	bl,bl			; Zero register
020C:1090  C3					retn
				sub_25		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_26		proc	near
020C:1091  8B D0				mov	dx,ax
020C:1093  8B F1				mov	si,cx
020C:1095  33 FF				xor	di,di			; Zero register
020C:1097  06					push	es
020C:1098  8E 06 014D				mov	es,data_69		; (020C:014D=5582h)
020C:109C  26: 8B 1E A004			mov	bx,word ptr es:[0A004h]	; (5582:A004=1)
020C:10A1  26: 8B 0E A008			mov	cx,word ptr es:[0A008h]	; (5582:A008=20Ch)

020C:10A6			locloop_161:
020C:10A6  26: 80 3F 04				cmp	byte ptr es:[bx],4
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 44

020C:10AA  75 08				jne	loc_162			; Jump if not equal
020C:10AC  0B FF				or	di,di			; Zero ?
020C:10AE  75 48				jnz	loc_165			; Jump if not zero
020C:10B0  8B FB				mov	di,bx
020C:10B2  EB 44				jmp	short loc_165		; (10F8)
020C:10B4			loc_162:
020C:10B4  26: 80 3F 01				cmp	byte ptr es:[bx],1
020C:10B8  75 3E				jne	loc_165			; Jump if not equal
020C:10BA  26: 8B 47 02				mov	ax,es:[bx+2]
020C:10BE  26: 03 47 04				add	ax,es:[bx+4]
020C:10C2  3B C6				cmp	ax,si
020C:10C4  72 32				jb	loc_165			; Jump if below
020C:10C6  8B C6				mov	ax,si
020C:10C8  03 C2				add	ax,dx
020C:10CA  26: 3B 47 02				cmp	ax,es:[bx+2]
020C:10CE  72 28				jb	loc_165			; Jump if below
020C:10D0  26: 3B 77 02				cmp	si,es:[bx+2]
020C:10D4  76 08				jbe	loc_163			; Jump if below or =
020C:10D6  03 D6				add	dx,si
020C:10D8  26: 8B 77 02				mov	si,es:[bx+2]
020C:10DC  2B D6				sub	dx,si
020C:10DE			loc_163:
020C:10DE  26: 8B 47 02				mov	ax,es:[bx+2]
020C:10E2  26: 03 47 04				add	ax,es:[bx+4]
020C:10E6  2B C2				sub	ax,dx
020C:10E8  2B C6				sub	ax,si
020C:10EA  76 02				jbe	loc_164			; Jump if below or =
020C:10EC  03 D0				add	dx,ax
020C:10EE			loc_164:
020C:10EE  26: C6 07 04				mov	byte ptr es:[bx],4
020C:10F2  0B FF				or	di,di			; Zero ?
020C:10F4  75 02				jnz	loc_165			; Jump if not zero
020C:10F6  8B FB				mov	di,bx
020C:10F8			loc_165:
020C:10F8  83 C3 06				add	bx,6
020C:10FB  E2 A9				loop	locloop_161		; Loop if cx > 0

020C:10FD  0B FF				or	di,di			; Zero ?
020C:10FF  74 11				jz	loc_166			; Jump if zero
020C:1101  26: C6 45 01 00			mov	byte ptr es:[di+1],0
020C:1106  26: C6 05 01				mov	byte ptr es:[di],1
020C:110A  26: 89 75 02				mov	es:[di+2],si
020C:110E  26: 89 55 04				mov	es:[di+4],dx
020C:1112			loc_166:
020C:1112  07					pop	es
020C:1113  C3					retn
				sub_26		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_27		proc	near
020C:1114  1E					push	ds
020C:1115  50					push	ax
020C:1116  B8 0040				mov	ax,40h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 45

020C:1119  8E D8				mov	ds,ax
020C:111B  9F					lahf				; Load ah from flags
020C:111C  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020C:1122  75 0C				jnz	loc_168			; Jump if not zero
020C:1124  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020C:112B			loc_167:
020C:112B  9E					sahf				; Store ah into flags
020C:112C  58					pop	ax
020C:112D  1F					pop	ds
020C:112E  EB 03				jmp	short loc_169		; (1133)
020C:1130			loc_168:
020C:1130  FA					cli				; Disable interrupts
020C:1131  EB F8				jmp	short loc_167		; (112B)
020C:1133			loc_169:
020C:1133  C3					retn
				sub_27		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_28		proc	near
020C:1134  1E					push	ds
020C:1135  50					push	ax
020C:1136  B8 0040				mov	ax,40h
020C:1139  8E D8				mov	ds,ax
020C:113B  9F					lahf				; Load ah from flags
020C:113C  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020C:1142  75 14				jnz	loc_171			; Jump if not zero
020C:1144  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020C:114A  75 0C				jnz	loc_171			; Jump if not zero
020C:114C  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020C:1153			loc_170:
020C:1153  9E					sahf				; Store ah into flags
020C:1154  58					pop	ax
020C:1155  1F					pop	ds
020C:1156  EB 03				jmp	short loc_172		; (115B)
020C:1158			loc_171:
020C:1158  FB					sti				; Enable interrupts
020C:1159  EB F8				jmp	short loc_170		; (1153)
020C:115B			loc_172:
020C:115B  C3					retn
				sub_28		endp

020C:115C			loc_173:
020C:115C  1E					push	ds
020C:115D  50					push	ax
020C:115E  B8 0040				mov	ax,40h
020C:1161  8E D8				mov	ds,ax
020C:1163  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020C:1169  75 4F				jnz	loc_181			; Jump if not zero
020C:116B  55					push	bp
020C:116C  8B EC				mov	bp,sp
020C:116E  8B 46 0A				mov	ax,[bp+0Ah]
020C:1171  5D					pop	bp
020C:1172  A9 0100				test	ax,100h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 46

020C:1175  75 43				jnz	loc_181			; Jump if not zero
020C:1177  A9 0200				test	ax,200h
020C:117A  74 22				jz	loc_177			; Jump if zero
020C:117C  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020C:1183  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020C:1189  75 2F				jnz	loc_181			; Jump if not zero
020C:118B			loc_174:
020C:118B  86 E0				xchg	ah,al
020C:118D  FC					cld				; Clear direction
020C:118E  A8 04				test	al,4
020C:1190  75 25				jnz	loc_180			; Jump if not zero
020C:1192			loc_175:
020C:1192  A8 08				test	al,8
020C:1194  75 11				jnz	loc_178			; Jump if not zero
020C:1196  70 19				jo	loc_179			; Jump if overflow=1
020C:1198			loc_176:
020C:1198  9E					sahf				; Store ah into flags
020C:1199  58					pop	ax
020C:119A  1F					pop	ds
020C:119B  CA 0002				retf	2			; Return far
020C:119E			loc_177:
020C:119E  F0> 81 26 0314 FDFF	                           lock	and	data_89,0FDFFh		; (020C:0314=3231h)
020C:11A5  EB E4				jmp	short loc_174		; (118B)
020C:11A7			loc_178:
020C:11A7  70 EF				jo	loc_176			; Jump if overflow=1
020C:11A9  50					push	ax
020C:11AA  B0 7F				mov	al,7Fh
020C:11AC  04 02				add	al,2
020C:11AE  58					pop	ax
020C:11AF  EB E7				jmp	short loc_176		; (1198)
020C:11B1			loc_179:
020C:11B1  50					push	ax
020C:11B2  32 C0				xor	al,al			; Zero register
020C:11B4  58					pop	ax
020C:11B5  EB E1				jmp	short loc_176		; (1198)
020C:11B7			loc_180:
020C:11B7  FD					std				; Set direction flag
020C:11B8  EB D8				jmp	short loc_175		; (1192)
020C:11BA			loc_181:
020C:11BA  58					pop	ax
020C:11BB  1F					pop	ds
020C:11BC  CF					iret				; Interrupt return
020C:11BD  00 3D				add	[di],bh
020C:11BF  02 00				add	al,[bx+si]
020C:11C1  75 06				jnz	loc_182			; Jump if not zero
020C:11C3  2E: A0 003C				mov	al,cs:data_32		; (020C:003C=10h)
020C:11C7  98					cbw				; Convrt byte to word
020C:11C8  C3					retn
020C:11C9			loc_182:
020C:11C9  C4					db	0C4h
020C:11CA  C4 52 00		;*		les	dx,dword ptr [bp+si+0]	; Load 32 bit ptr
020C:11CA  C4 52 00				db	0C4h, 52h, 00h
020C:11CD  C3					retn
							                        ;* No entry point to code
020C:11CE  2E: C6 46 2A 03			mov	byte ptr cs:[bp+2Ah],3
020C:11D3  49					dec	cx
020C:11D4  00 00				add	[bx+si],al
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 47

020C:11D6  0D 002F				or	ax,2Fh
020C:11D9  00 06 0600				add	byte ptr ds:[600h],al	; (020C:0600=2)
020C:11DD  00 0F				add	[bx],cl
020C:11DF  61					db	61h
020C:11E0  FF					db	0FFh
020C:11E1  FF 06 2300				inc	data_202		; (020C:2300=0)
020C:11E5  0021[00]				db	33 dup (0)
020C:1206  00			data_134	db	0
020C:1207  00			data_135	db	0
020C:1208  00			data_136	db	0
020C:1209  00			data_137	db	0
020C:120A  00					db	0
020C:120B  00					db	0
020C:120C  00					db	0
020C:120D  00					db	0
020C:120E  00					db	0
020C:120F  00					db	0
020C:1210  00					db	0
020C:1211  00					db	0
020C:1212  00					db	0
020C:1213  00					db	0
020C:1214  00					db	0
020C:1215  00					db	0
020C:1216  00					db	0
020C:1217  00					db	0
020C:1218  00					db	0
020C:1219  00					db	0
020C:121A  00					db	0
020C:121B  00					db	0
020C:121C  00					db	0
020C:121D  00					db	0
020C:121E  00					db	0
020C:121F  00					db	0
020C:1220  00					db	0
020C:1221  00					db	0
020C:1222  00					db	0
020C:1223  00					db	0
020C:1224  00					db	0
020C:1225  00					db	0
020C:1226  00					db	0
020C:1227  00					db	0
020C:1228  00					db	0
020C:1229  00					db	0
020C:122A  00					db	0
020C:122B  00					db	0
020C:122C  00					db	0
020C:122D  00					db	0
020C:122E  00					db	0
020C:122F  00					db	0
020C:1230  00					db	0
020C:1231  00					db	0
020C:1232  00					db	0
020C:1233  00					db	0
020C:1234  00					db	0
020C:1235  00					db	0
020C:1236  00					db	0
020C:1237  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 48

020C:1238  00					db	0
020C:1239  00					db	0
020C:123A  00					db	0
020C:123B  00					db	0
020C:123C  00					db	0
020C:123D  00					db	0
020C:123E  00					db	0
020C:123F  00					db	0
020C:1240  00					db	0
020C:1241  00					db	0
020C:1242  00					db	0
020C:1243  00					db	0
020C:1244  00					db	0
020C:1245  00					db	0
020C:1246  00					db	0
020C:1247  00					db	0
020C:1248  00					db	0
020C:1249  00					db	0
020C:124A  00					db	0
020C:124B  00					db	0
020C:124C  00					db	0
020C:124D  00					db	0
020C:124E  00					db	0
020C:124F  00					db	0
020C:1250  00					db	0
020C:1251  00					db	0
020C:1252  00					db	0
020C:1253  00					db	0
020C:1254  00					db	0
020C:1255  00					db	0
020C:1256  00					db	0
020C:1257  00					db	0
020C:1258  00					db	0
020C:1259  00					db	0
020C:125A  00					db	0
020C:125B  00					db	0
020C:125C  00					db	0
020C:125D  00					db	0
020C:125E  00					db	0
020C:125F  00					db	0
020C:1260  00					db	0
020C:1261  00					db	0
020C:1262  00					db	0
020C:1263  00					db	0
020C:1264  00					db	0
020C:1265  00					db	0
020C:1266  00					db	0
020C:1267  00					db	0
020C:1268  00					db	0
020C:1269  00					db	0
020C:126A  00					db	0
020C:126B  00					db	0
020C:126C  00					db	0
020C:126D  00					db	0
020C:126E  00					db	0
020C:126F  00					db	0
020C:1270  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 49

020C:1271  00					db	0
020C:1272  00					db	0
020C:1273  00					db	0
020C:1274  00					db	0
020C:1275  00					db	0
020C:1276  00					db	0
020C:1277  00					db	0
020C:1278  00					db	0
020C:1279  00					db	0
020C:127A  00					db	0
020C:127B  00					db	0
020C:127C  00					db	0
020C:127D  00					db	0
020C:127E  00					db	0
020C:127F  00					db	0
020C:1280  00					db	0
020C:1281  00					db	0
020C:1282  00					db	0
020C:1283  00					db	0
020C:1284  00					db	0
020C:1285  00					db	0
020C:1286  00					db	0
020C:1287  00					db	0
020C:1288  00					db	0
020C:1289  00					db	0
020C:128A  00					db	0
020C:128B  00					db	0
020C:128C  00					db	0
020C:128D  00					db	0
020C:128E  00					db	0
020C:128F  00					db	0
020C:1290  00					db	0
020C:1291  00					db	0
020C:1292  00					db	0
020C:1293  00					db	0
020C:1294  00					db	0
020C:1295  00					db	0
020C:1296  00					db	0
020C:1297  00					db	0
020C:1298  00					db	0
020C:1299  00					db	0
020C:129A  00					db	0
020C:129B  00					db	0
020C:129C  00					db	0
020C:129D  00					db	0
020C:129E  00					db	0
020C:129F  00					db	0
020C:12A0  00					db	0
020C:12A1  00					db	0
020C:12A2  00					db	0
020C:12A3  00					db	0
020C:12A4  00					db	0
020C:12A5  00					db	0
020C:12A6  00					db	0
020C:12A7  00					db	0
020C:12A8  00					db	0
020C:12A9  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 50

020C:12AA  00					db	0
020C:12AB  00					db	0
020C:12AC  00					db	0
020C:12AD  00					db	0
020C:12AE  00					db	0
020C:12AF  00					db	0
020C:12B0  00					db	0
020C:12B1  00					db	0
020C:12B2  00					db	0
020C:12B3  00					db	0
020C:12B4  00					db	0
020C:12B5  00					db	0
020C:12B6  00					db	0
020C:12B7  00					db	0
020C:12B8  00					db	0
020C:12B9  00					db	0
020C:12BA  00					db	0
020C:12BB  00					db	0
020C:12BC  00					db	0
020C:12BD  00					db	0
020C:12BE  00					db	0
020C:12BF  00					db	0
020C:12C0  00					db	0
020C:12C1  00					db	0
020C:12C2  00					db	0
020C:12C3  00					db	0
020C:12C4  00					db	0
020C:12C5  00					db	0
020C:12C6  00					db	0
020C:12C7  00					db	0
020C:12C8  00					db	0
020C:12C9  00					db	0
020C:12CA  00					db	0
020C:12CB  00					db	0
020C:12CC  00					db	0
020C:12CD  00					db	0
020C:12CE  00					db	0
020C:12CF  00					db	0
020C:12D0  00					db	0
020C:12D1  00					db	0
020C:12D2  00					db	0
020C:12D3  00					db	0
020C:12D4  00					db	0
020C:12D5  00					db	0
020C:12D6  00					db	0
020C:12D7  00					db	0
020C:12D8  00					db	0
020C:12D9  00					db	0
020C:12DA  00					db	0
020C:12DB  00					db	0
020C:12DC  00					db	0
020C:12DD  00					db	0
020C:12DE  00					db	0
020C:12DF  00					db	0
020C:12E0  00					db	0
020C:12E1  00					db	0
020C:12E2  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 51

020C:12E3  00					db	0
020C:12E4  00					db	0
020C:12E5  00					db	0
020C:12E6  00					db	0
020C:12E7  00					db	0
020C:12E8  00					db	0
020C:12E9  00					db	0
020C:12EA  00					db	0
020C:12EB  00					db	0
020C:12EC  00					db	0
020C:12ED  00					db	0
020C:12EE  00					db	0
020C:12EF  00					db	0
020C:12F0  00					db	0
020C:12F1  00					db	0
020C:12F2  00					db	0
020C:12F3  00					db	0
020C:12F4  00					db	0
020C:12F5  00					db	0
020C:12F6  00					db	0
020C:12F7  00					db	0
020C:12F8  00					db	0
020C:12F9  00					db	0
020C:12FA  00					db	0
020C:12FB  00					db	0
020C:12FC  00					db	0
020C:12FD  00					db	0
020C:12FE  00					db	0
020C:12FF  00					db	0
020C:1300  00					db	0
020C:1301  00					db	0
020C:1302  00					db	0
020C:1303  00					db	0
020C:1304  00					db	0
020C:1305  00					db	0
020C:1306  00					db	0
020C:1307  00					db	0
020C:1308  00					db	0
020C:1309  00					db	0
020C:130A  00					db	0
020C:130B  00					db	0
020C:130C  00					db	0
020C:130D  00					db	0
020C:130E  00					db	0
020C:130F  00					db	0
020C:1310  00					db	0
020C:1311  00					db	0
020C:1312  00					db	0
020C:1313  00					db	0
020C:1314  00					db	0
020C:1315  00					db	0
020C:1316  00					db	0
020C:1317  00					db	0
020C:1318  00					db	0
020C:1319  00					db	0
020C:131A  00					db	0
020C:131B  0000			data_138	dw	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 52

020C:131D  0000			data_139	dw	0
020C:131F  0000			data_140	dw	0
020C:1321  0000			data_141	dw	0
020C:1323  00					db	0
020C:1324  00					db	0
020C:1325  00					db	0
020C:1326  0000			data_142	dw	0
020C:1328  00					db	0
020C:1329  00			data_143	db	0
020C:132A  00					db	0
020C:132B  00					db	0
020C:132C  00					db	0
020C:132D  00					db	0
020C:132E  00					db	0
020C:132F  00					db	0
020C:1330  00					db	0
020C:1331  00					db	0
020C:1332  00					db	0
020C:1333  00					db	0
020C:1334  00					db	0
020C:1335  00					db	0
020C:1336  00					db	0
020C:1337  00					db	0
020C:1338  00					db	0
020C:1339  00					db	0
020C:133A  00					db	0
020C:133B  00					db	0
020C:133C  00					db	0
020C:133D  00					db	0
020C:133E  00					db	0
020C:133F  00					db	0
020C:1340  00					db	0
020C:1341  00					db	0
020C:1342  00					db	0
020C:1343  00					db	0
020C:1344  00					db	0
020C:1345  00					db	0
020C:1346  00					db	0
020C:1347  00					db	0
020C:1348  00					db	0
020C:1349  00					db	0
020C:134A  00					db	0
020C:134B  00					db	0
020C:134C  00					db	0
020C:134D  00					db	0
020C:134E  00					db	0
020C:134F  00					db	0
020C:1350  00					db	0
020C:1351  00					db	0
020C:1352  00					db	0
020C:1353  00					db	0
020C:1354  00					db	0
020C:1355  00					db	0
020C:1356  00					db	0
020C:1357  00					db	0
020C:1358  00					db	0
020C:1359  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 53

020C:135A  00					db	0
020C:135B  00					db	0
020C:135C  00					db	0
020C:135D  00					db	0
020C:135E  00					db	0
020C:135F  00					db	0
020C:1360  00					db	0
020C:1361  00					db	0
020C:1362  00					db	0
020C:1363  00					db	0
020C:1364  00					db	0
020C:1365  00					db	0
020C:1366  00					db	0
020C:1367  00					db	0
020C:1368  00					db	0
020C:1369  00					db	0
020C:136A  00					db	0
020C:136B  00					db	0
020C:136C  00					db	0
020C:136D  00					db	0
020C:136E  00					db	0
020C:136F  00					db	0
020C:1370  00					db	0
020C:1371  00					db	0
020C:1372  00					db	0
020C:1373  00					db	0
020C:1374  00					db	0
020C:1375  00					db	0
020C:1376  00					db	0
020C:1377  00					db	0
020C:1378  00					db	0
020C:1379  00					db	0
020C:137A  00					db	0
020C:137B  00					db	0
020C:137C  00					db	0
020C:137D  00					db	0
020C:137E  00					db	0
020C:137F  00					db	0
020C:1380  00					db	0
020C:1381  00					db	0
020C:1382  00					db	0
020C:1383  00					db	0
020C:1384  00					db	0
020C:1385  00					db	0
020C:1386  00					db	0
020C:1387  00					db	0
020C:1388  00					db	0
020C:1389  00					db	0
020C:138A  00					db	0
020C:138B  00					db	0
020C:138C  00					db	0
020C:138D  00					db	0
020C:138E  00					db	0
020C:138F  00					db	0
020C:1390  00					db	0
020C:1391  00					db	0
020C:1392  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 54

020C:1393  00					db	0
020C:1394  00					db	0
020C:1395  00					db	0
020C:1396  00					db	0
020C:1397  00					db	0
020C:1398  00					db	0
020C:1399  00					db	0
020C:139A  00					db	0
020C:139B  00					db	0
020C:139C  00					db	0
020C:139D  00					db	0
020C:139E  00					db	0
020C:139F  00					db	0
020C:13A0  00					db	0
020C:13A1  00					db	0
020C:13A2  00					db	0
020C:13A3  00					db	0
020C:13A4  00					db	0
020C:13A5  00					db	0
020C:13A6  00					db	0
020C:13A7  00					db	0
020C:13A8  00					db	0
020C:13A9  00					db	0
020C:13AA  00					db	0
020C:13AB  00					db	0
020C:13AC  00					db	0
020C:13AD  00					db	0
020C:13AE  00					db	0
020C:13AF  00					db	0
020C:13B0  00					db	0
020C:13B1  00					db	0
020C:13B2  00					db	0
020C:13B3  00					db	0
020C:13B4  00					db	0
020C:13B5  00					db	0
020C:13B6  00					db	0
020C:13B7  00					db	0
020C:13B8  00					db	0
020C:13B9  00					db	0
020C:13BA  00					db	0
020C:13BB  00					db	0
020C:13BC  00					db	0
020C:13BD  00					db	0
020C:13BE  00					db	0
020C:13BF  00					db	0
020C:13C0  00					db	0
020C:13C1  00					db	0
020C:13C2  00					db	0
020C:13C3  00					db	0
020C:13C4  00					db	0
020C:13C5  00					db	0
020C:13C6  00					db	0
020C:13C7  00					db	0
020C:13C8  00					db	0
020C:13C9  00					db	0
020C:13CA  00					db	0
020C:13CB  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 55

020C:13CC  00					db	0
020C:13CD  00					db	0
020C:13CE  00					db	0
020C:13CF  00					db	0
020C:13D0  00					db	0
020C:13D1  00					db	0
020C:13D2  00					db	0
020C:13D3  00					db	0
020C:13D4  00					db	0
020C:13D5  00					db	0
020C:13D6  00					db	0
020C:13D7  00					db	0
020C:13D8  00					db	0
020C:13D9  00					db	0
020C:13DA  00					db	0
020C:13DB  00					db	0
020C:13DC  00					db	0
020C:13DD  00					db	0
020C:13DE  00					db	0
020C:13DF  00					db	0
020C:13E0  00					db	0
020C:13E1  00					db	0
020C:13E2  00					db	0
020C:13E3  00					db	0
020C:13E4  00			data_144	db	0
020C:13E5  00			data_145	db	0
020C:13E6  0000			data_146	dw	0
020C:13E8  00					db	0
020C:13E9  00					db	0
020C:13EA  00					db	0
020C:13EB  00					db	0
020C:13EC  00					db	0
020C:13ED  00					db	0
020C:13EE  00					db	0
020C:13EF  00					db	0
020C:13F0  00					db	0
020C:13F1  00					db	0
020C:13F2  00					db	0
020C:13F3  00					db	0
020C:13F4  00					db	0
020C:13F5  00					db	0
020C:13F6  00					db	0
020C:13F7  00					db	0
020C:13F8  00					db	0
020C:13F9  00					db	0
020C:13FA  00					db	0
020C:13FB  00					db	0
020C:13FC  00					db	0
020C:13FD  00					db	0
020C:13FE  00					db	0
020C:13FF  00					db	0
020C:1400  00					db	0
020C:1401  00					db	0
020C:1402  00					db	0
020C:1403  00					db	0
020C:1404  00					db	0
020C:1405  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 56

020C:1406  00					db	0
020C:1407  00					db	0
020C:1408  00					db	0
020C:1409  00					db	0
020C:140A  00					db	0
020C:140B  00					db	0
020C:140C  00					db	0
020C:140D  00					db	0
020C:140E  00					db	0
020C:140F  00					db	0
020C:1410  00					db	0
020C:1411  00					db	0
020C:1412  00					db	0
020C:1413  00					db	0
020C:1414  00					db	0
020C:1415  00					db	0
020C:1416  00					db	0
020C:1417  00					db	0
020C:1418  00					db	0
020C:1419  00					db	0
020C:141A  00					db	0
020C:141B  00					db	0
020C:141C  00					db	0
020C:141D  00					db	0
020C:141E  00					db	0
020C:141F  00					db	0
020C:1420  00					db	0
020C:1421  00					db	0
020C:1422  00					db	0
020C:1423  00					db	0
020C:1424  00					db	0
020C:1425  00					db	0
020C:1426  00					db	0
020C:1427  00					db	0
020C:1428  00					db	0
020C:1429  00					db	0
020C:142A  00					db	0
020C:142B  00					db	0
020C:142C  00					db	0
020C:142D  00					db	0
020C:142E  00					db	0
020C:142F  00					db	0
020C:1430  00					db	0
020C:1431  00					db	0
020C:1432  00					db	0
020C:1433  00					db	0
020C:1434  00					db	0
020C:1435  00					db	0
020C:1436  00					db	0
020C:1437  00					db	0
020C:1438  00					db	0
020C:1439  00					db	0
020C:143A  00					db	0
020C:143B  00					db	0
020C:143C  00					db	0
020C:143D  00					db	0
020C:143E  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 57

020C:143F  00					db	0
020C:1440  00					db	0
020C:1441  00					db	0
020C:1442  00					db	0
020C:1443  00					db	0
020C:1444  00					db	0
020C:1445  00					db	0
020C:1446  00					db	0
020C:1447  00					db	0
020C:1448  00					db	0
020C:1449  00					db	0
020C:144A  00					db	0
020C:144B  00					db	0
020C:144C  00					db	0
020C:144D  00					db	0
020C:144E  00					db	0
020C:144F  00					db	0
020C:1450  00					db	0
020C:1451  00					db	0
020C:1452  00					db	0
020C:1453  00					db	0
020C:1454  00					db	0
020C:1455  00					db	0
020C:1456  00					db	0
020C:1457  00					db	0
020C:1458  00					db	0
020C:1459  00					db	0
020C:145A  00					db	0
020C:145B  00					db	0
020C:145C  00					db	0
020C:145D  00					db	0
020C:145E  00					db	0
020C:145F  00					db	0
020C:1460  00					db	0
020C:1461  00					db	0
020C:1462  00					db	0
020C:1463  00					db	0
020C:1464  00					db	0
020C:1465  00					db	0
020C:1466  00					db	0
020C:1467  00					db	0
020C:1468  00					db	0
020C:1469  00					db	0
020C:146A  00					db	0
020C:146B  00					db	0
020C:146C  00					db	0
020C:146D  00					db	0
020C:146E  00					db	0
020C:146F  00					db	0
020C:1470  00					db	0
020C:1471  00					db	0
020C:1472  00					db	0
020C:1473  00					db	0
020C:1474  00					db	0
020C:1475  00					db	0
020C:1476  00					db	0
020C:1477  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 58

020C:1478  00					db	0
020C:1479  00					db	0
020C:147A  00					db	0
020C:147B  00					db	0
020C:147C  00					db	0
020C:147D  00					db	0
020C:147E  00					db	0
020C:147F  00					db	0
020C:1480  00					db	0
020C:1481  00					db	0
020C:1482  00					db	0
020C:1483  00					db	0
020C:1484  00					db	0
020C:1485  00					db	0
020C:1486  00					db	0
020C:1487  00					db	0
020C:1488  00					db	0
020C:1489  00					db	0
020C:148A  00					db	0
020C:148B  00					db	0
020C:148C  00					db	0
020C:148D  00					db	0
020C:148E  00					db	0
020C:148F  00					db	0
020C:1490  00					db	0
020C:1491  00					db	0
020C:1492  00					db	0
020C:1493  00					db	0
020C:1494  00					db	0
020C:1495  00					db	0
020C:1496  00					db	0
020C:1497  00					db	0
020C:1498  00					db	0
020C:1499  00					db	0
020C:149A  00					db	0
020C:149B  00					db	0
020C:149C  00					db	0
020C:149D  00					db	0
020C:149E  00					db	0
020C:149F  00					db	0
020C:14A0  00					db	0
020C:14A1  00					db	0
020C:14A2  00					db	0
020C:14A3  00					db	0
020C:14A4  00					db	0
020C:14A5  00					db	0
020C:14A6  00					db	0
020C:14A7  00					db	0
020C:14A8  00					db	0
020C:14A9  00					db	0
020C:14AA  00					db	0
020C:14AB  00					db	0
020C:14AC  00					db	0
020C:14AD  00					db	0
020C:14AE  00					db	0
020C:14AF  00					db	0
020C:14B0  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 59

020C:14B1  00					db	0
020C:14B2  00					db	0
020C:14B3  00					db	0
020C:14B4  00					db	0
020C:14B5  00					db	0
020C:14B6  00					db	0
020C:14B7  00					db	0
020C:14B8  00					db	0
020C:14B9  00					db	0
020C:14BA  00					db	0
020C:14BB  00					db	0
020C:14BC  00					db	0
020C:14BD  00					db	0
020C:14BE  00					db	0
020C:14BF  00					db	0
020C:14C0  00					db	0
020C:14C1  00					db	0
020C:14C2  00					db	0
020C:14C3  00					db	0
020C:14C4  00					db	0
020C:14C5  00					db	0
020C:14C6  00					db	0
020C:14C7  00					db	0
020C:14C8  00					db	0
020C:14C9  00					db	0
020C:14CA  00					db	0
020C:14CB  00					db	0
020C:14CC  00					db	0
020C:14CD  00					db	0
020C:14CE  00					db	0
020C:14CF  00					db	0
020C:14D0  00					db	0
020C:14D1  00					db	0
020C:14D2  00					db	0
020C:14D3  00					db	0
020C:14D4  00					db	0
020C:14D5  00					db	0
020C:14D6  00					db	0
020C:14D7  00					db	0
020C:14D8  00					db	0
020C:14D9  00					db	0
020C:14DA  00					db	0
020C:14DB  00					db	0
020C:14DC  00					db	0
020C:14DD  00					db	0
020C:14DE  00					db	0
020C:14DF  00					db	0
020C:14E0  00					db	0
020C:14E1  00					db	0
020C:14E2  00					db	0
020C:14E3  00					db	0
020C:14E4  00					db	0
020C:14E5  00					db	0
020C:14E6  00					db	0
020C:14E7  00					db	0
020C:14E8  00					db	0
020C:14E9  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 60

020C:14EA  00					db	0
020C:14EB  00					db	0
020C:14EC  00					db	0
020C:14ED  00					db	0
020C:14EE  00					db	0
020C:14EF  00					db	0
020C:14F0  00					db	0
020C:14F1  00					db	0
020C:14F2  00					db	0
020C:14F3  00					db	0
020C:14F4  00					db	0
020C:14F5  00					db	0
020C:14F6  00					db	0
020C:14F7  00					db	0
020C:14F8  00					db	0
020C:14F9  00					db	0
020C:14FA  00			data_147	db	0
020C:14FB  00					db	0
020C:14FC  00					db	0
020C:14FD  00					db	0
020C:14FE  00					db	0
020C:14FF  00					db	0
020C:1500  00					db	0
020C:1501  00					db	0
020C:1502  00					db	0
020C:1503  00					db	0
020C:1504  00					db	0
020C:1505  00					db	0
020C:1506  00					db	0
020C:1507  00					db	0
020C:1508  00					db	0
020C:1509  00					db	0
020C:150A  00					db	0
020C:150B  00					db	0
020C:150C  00					db	0
020C:150D  00					db	0
020C:150E  00					db	0
020C:150F  00					db	0
020C:1510  00					db	0
020C:1511  00					db	0
020C:1512  00					db	0
020C:1513  00					db	0
020C:1514  00					db	0
020C:1515  00					db	0
020C:1516  00					db	0
020C:1517  00					db	0
020C:1518  00					db	0
020C:1519  00					db	0
020C:151A  00					db	0
020C:151B  00					db	0
020C:151C  00					db	0
020C:151D  00					db	0
020C:151E  00					db	0
020C:151F  00					db	0
020C:1520  00					db	0
020C:1521  00					db	0
020C:1522  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 61

020C:1523  00					db	0
020C:1524  00					db	0
020C:1525  00					db	0
020C:1526  00					db	0
020C:1527  00					db	0
020C:1528  00					db	0
020C:1529  00					db	0
020C:152A  00					db	0
020C:152B  00					db	0
020C:152C  00					db	0
020C:152D  00					db	0
020C:152E  00					db	0
020C:152F  00					db	0
020C:1530  00					db	0
020C:1531  00					db	0
020C:1532  00					db	0
020C:1533  00					db	0
020C:1534  00					db	0
020C:1535  00					db	0
020C:1536  00					db	0
020C:1537  00					db	0
020C:1538  00					db	0
020C:1539  00					db	0
020C:153A  00					db	0
020C:153B  00					db	0
020C:153C  00					db	0
020C:153D  00					db	0
020C:153E  00					db	0
020C:153F  00					db	0
020C:1540  00					db	0
020C:1541  00					db	0
020C:1542  00					db	0
020C:1543  00					db	0
020C:1544  00					db	0
020C:1545  00					db	0
020C:1546  00					db	0
020C:1547  00					db	0
020C:1548  00					db	0
020C:1549  00					db	0
020C:154A  00					db	0
020C:154B  00					db	0
020C:154C  00					db	0
020C:154D  00					db	0
020C:154E  00					db	0
020C:154F  00					db	0
020C:1550  00					db	0
020C:1551  00					db	0
020C:1552  00					db	0
020C:1553  00					db	0
020C:1554  00					db	0
020C:1555  00					db	0
020C:1556  00					db	0
020C:1557  00					db	0
020C:1558  00					db	0
020C:1559  00					db	0
020C:155A  00					db	0
020C:155B  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 62

020C:155C  00					db	0
020C:155D  00					db	0
020C:155E  00					db	0
020C:155F  00					db	0
020C:1560  00					db	0
020C:1561  00					db	0
020C:1562  00					db	0
020C:1563  00					db	0
020C:1564  00					db	0
020C:1565  00					db	0
020C:1566  00					db	0
020C:1567  00					db	0
020C:1568  00					db	0
020C:1569  00					db	0
020C:156A  00					db	0
020C:156B  00					db	0
020C:156C  00					db	0
020C:156D  00					db	0
020C:156E  00					db	0
020C:156F  00					db	0
020C:1570  00					db	0
020C:1571  00					db	0
020C:1572  00					db	0
020C:1573  00					db	0
020C:1574  00					db	0
020C:1575  00					db	0
020C:1576  00					db	0
020C:1577  00					db	0
020C:1578  00					db	0
020C:1579  00					db	0
020C:157A  00					db	0
020C:157B  00					db	0
020C:157C  00					db	0
020C:157D  00					db	0
020C:157E  00					db	0
020C:157F  00					db	0
020C:1580  00					db	0
020C:1581  00					db	0
020C:1582  00					db	0
020C:1583  00					db	0
020C:1584  00					db	0
020C:1585  00					db	0
020C:1586  00					db	0
020C:1587  00					db	0
020C:1588  00					db	0
020C:1589  00					db	0
020C:158A  00					db	0
020C:158B  00					db	0
020C:158C  00					db	0
020C:158D  00					db	0
020C:158E  00					db	0
020C:158F  00					db	0
020C:1590  00					db	0
020C:1591  00					db	0
020C:1592  00					db	0
020C:1593  00					db	0
020C:1594  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 63

020C:1595  00					db	0
020C:1596  00					db	0
020C:1597  00					db	0
020C:1598  00					db	0
020C:1599  00					db	0
020C:159A  00					db	0
020C:159B  00					db	0
020C:159C  00					db	0
020C:159D  00					db	0
020C:159E  00					db	0
020C:159F  00					db	0
020C:15A0  00					db	0
020C:15A1  00					db	0
020C:15A2  00					db	0
020C:15A3  00					db	0
020C:15A4  00					db	0
020C:15A5  00					db	0
020C:15A6  00					db	0
020C:15A7  00					db	0
020C:15A8  00					db	0
020C:15A9  00					db	0
020C:15AA  00					db	0
020C:15AB  00					db	0
020C:15AC  00					db	0
020C:15AD  00					db	0
020C:15AE  00					db	0
020C:15AF  00					db	0
020C:15B0  00					db	0
020C:15B1  00					db	0
020C:15B2  00					db	0
020C:15B3  00					db	0
020C:15B4  00					db	0
020C:15B5  00					db	0
020C:15B6  00					db	0
020C:15B7  00					db	0
020C:15B8  00					db	0
020C:15B9  00					db	0
020C:15BA  00					db	0
020C:15BB  00					db	0
020C:15BC  00					db	0
020C:15BD  00					db	0
020C:15BE  00					db	0
020C:15BF  00					db	0
020C:15C0  00					db	0
020C:15C1  00					db	0
020C:15C2  00					db	0
020C:15C3  00					db	0
020C:15C4  00					db	0
020C:15C5  00					db	0
020C:15C6  00					db	0
020C:15C7  00					db	0
020C:15C8  00					db	0
020C:15C9  00					db	0
020C:15CA  00					db	0
020C:15CB  00					db	0
020C:15CC  00					db	0
020C:15CD  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 64

020C:15CE  00			data_148	db	0
020C:15CF  00					db	0
020C:15D0  00			data_149	db	0
020C:15D1  00					db	0
020C:15D2  00					db	0
020C:15D3  00					db	0
020C:15D4  00					db	0
020C:15D5  00					db	0
020C:15D6  00					db	0
020C:15D7  00					db	0
020C:15D8  00					db	0
020C:15D9  00					db	0
020C:15DA  00					db	0
020C:15DB  00					db	0
020C:15DC  00					db	0
020C:15DD  00					db	0
020C:15DE  00					db	0
020C:15DF  00					db	0
020C:15E0  00					db	0
020C:15E1  00					db	0
020C:15E2  00					db	0
020C:15E3  00					db	0
020C:15E4  00					db	0
020C:15E5  00					db	0
020C:15E6  00					db	0
020C:15E7  00					db	0
020C:15E8  00					db	0
020C:15E9  00					db	0
020C:15EA  00					db	0
020C:15EB  00					db	0
020C:15EC  00					db	0
020C:15ED  00					db	0
020C:15EE  00					db	0
020C:15EF  00					db	0
020C:15F0  00					db	0
020C:15F1  00					db	0
020C:15F2  00					db	0
020C:15F3  00					db	0
020C:15F4  00					db	0
020C:15F5  00					db	0
020C:15F6  00					db	0
020C:15F7  00					db	0
020C:15F8  00					db	0
020C:15F9  00					db	0
020C:15FA  00					db	0
020C:15FB  00					db	0
020C:15FC  00					db	0
020C:15FD  00					db	0
020C:15FE  00					db	0
020C:15FF  00					db	0
020C:1600  00					db	0
020C:1601  00					db	0
020C:1602  00					db	0
020C:1603  00					db	0
020C:1604  00					db	0
020C:1605  00					db	0
020C:1606  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 65

020C:1607  00					db	0
020C:1608  00					db	0
020C:1609  00					db	0
020C:160A  00					db	0
020C:160B  00					db	0
020C:160C  00					db	0
020C:160D  00					db	0
020C:160E  00					db	0
020C:160F  00					db	0
020C:1610  00					db	0
020C:1611  00					db	0
020C:1612  00					db	0
020C:1613  00					db	0
020C:1614  00					db	0
020C:1615  00					db	0
020C:1616  00					db	0
020C:1617  00					db	0
020C:1618  00					db	0
020C:1619  00					db	0
020C:161A  00					db	0
020C:161B  00					db	0
020C:161C  00					db	0
020C:161D  00					db	0
020C:161E  00					db	0
020C:161F  00					db	0
020C:1620  00					db	0
020C:1621  00					db	0
020C:1622  00					db	0
020C:1623  00					db	0
020C:1624  00					db	0
020C:1625  00					db	0
020C:1626  00					db	0
020C:1627  00					db	0
020C:1628  00					db	0
020C:1629  00					db	0
020C:162A  00					db	0
020C:162B  00					db	0
020C:162C  00					db	0
020C:162D  00					db	0
020C:162E  00					db	0
020C:162F  00					db	0
020C:1630  00					db	0
020C:1631  00					db	0
020C:1632  00					db	0
020C:1633  00					db	0
020C:1634  00					db	0
020C:1635  00					db	0
020C:1636  00					db	0
020C:1637  00					db	0
020C:1638  00					db	0
020C:1639  00					db	0
020C:163A  00					db	0
020C:163B  00					db	0
020C:163C  00					db	0
020C:163D  00					db	0
020C:163E  00					db	0
020C:163F  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 66

020C:1640  00					db	0
020C:1641  00					db	0
020C:1642  00					db	0
020C:1643  00					db	0
020C:1644  00					db	0
020C:1645  00					db	0
020C:1646  00					db	0
020C:1647  00					db	0
020C:1648  00					db	0
020C:1649  00					db	0
020C:164A  00					db	0
020C:164B  00					db	0
020C:164C  00					db	0
020C:164D  00					db	0
020C:164E  00					db	0
020C:164F  00					db	0
020C:1650  00					db	0
020C:1651  00					db	0
020C:1652  00					db	0
020C:1653  00					db	0
020C:1654  00					db	0
020C:1655  00					db	0
020C:1656  00					db	0
020C:1657  00					db	0
020C:1658  00					db	0
020C:1659  00					db	0
020C:165A  00					db	0
020C:165B  00					db	0
020C:165C  00					db	0
020C:165D  00					db	0
020C:165E  00					db	0
020C:165F  00					db	0
020C:1660  00					db	0
020C:1661  00					db	0
020C:1662  00					db	0
020C:1663  00					db	0
020C:1664  00					db	0
020C:1665  00					db	0
020C:1666  00					db	0
020C:1667  00 00				add	[bx+si],al
020C:1669  00 0C				add	[si],cl
020C:166B  00 82 5401				add	[bp+si+5401h],al
020C:166F  03 58 74				add	bx,[bx+si+74h]
020C:1672  03 09				add	cx,[bx+di]
020C:1674  00 19				add	[bx+di],bl
020C:1676  00 00				add	[bx+si],al
020C:1678  0C 00				or	al,0
020C:167A  82 01 52				add	byte ptr [bx+di],52h	; 'R'
020C:167D  03 00				add	ax,[bx+si]
020C:167F  00 FF				add	bh,bh
020C:1681  FF					db	0FFh
020C:1682  D9					db	0D9h
020C:1683  19 04				sbb	[si],ax
020C:1685  00 00				add	[bx+si],al
020C:1687  00 41 41				add	[bx+di+41h],al
020C:168A  000F[41]				db	15 dup (41h)
020C:1699  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 67

020C:169A  00 00				add	[bx+si],al
020C:169C  00 41 41				add	[bx+di+41h],al
020C:169F  0008[41]				db	8 dup (41h)
020C:16A7  00 00				add	[bx+si],al
020C:16A9  41 41				db	 41h, 41h
020C:16AB  41 41 41 41 41 41	data_153	db	'AAAAAAAAAAAAAAA', 0
020C:16B1  41 41 41 41 41 41
020C:16B7  41 41 41 00
020C:16BB  00 00				add	[bx+si],al
020C:16BD  00 41 41				add	[bx+di+41h],al
020C:16C0  0008[41]				db	8 dup (41h)
020C:16C8  00 00				add	[bx+si],al
020C:16CA  0011[41]				db	17 dup (41h)
020C:16DB  00					db	0
020C:16DC  00 00				add	[bx+si],al
020C:16DE  00 41 41				add	[bx+di+41h],al
020C:16E1  0008[41]				db	8 dup (41h)
020C:16E9  00 00				add	[bx+si],al
020C:16EB  0011[41]				db	17 dup (41h)
020C:16FC  00					db	0
020C:16FD  00 00				add	[bx+si],al
020C:16FF  00 41 41				add	[bx+di+41h],al
020C:1702  0008[41]				db	8 dup (41h)
020C:170A  00					db	0
020C:170B  00 00				add	[bx+si],al
020C:170D  00 95 4C1C				add	data_295[di],dl		; (020C:4C1C=0F8h)
020C:1711  7E 03				jle	loc_183			; Jump if < or =
020C:1713  12 00				adc	al,[bx+si]
020C:1715  00			data_159	db	0
020C:1716			loc_183:
020C:1716  52					push	dx
020C:1717  03 00				add	ax,[bx+si]
020C:1719  00 00				add	[bx+si],al
020C:171B  00 C7				add	bh,al
020C:171D  1C 00				sbb	al,0
020C:171F  00 41 3A				add	[bx+di+3Ah],al
020C:1722  5C					pop	sp
020C:1723  0041[00]				db	65 dup (0)
020C:1764  58					pop	ax
020C:1765  02 00				add	al,[bx+si]
020C:1767  42					inc	dx
020C:1768  3A 5C 00		;*		cmp	bl,[si+0]
020C:1768  3A 5C 00				db	 3Ah, 5Ch, 00h
020C:176B  0040[00]				db	64 dup (0)
020C:17AB  58					pop	ax
020C:17AC  02 00				add	al,[bx+si]
020C:17AE  43					inc	bx
020C:17AF  3A 5C 44				cmp	bl,[si+44h]
020C:17B2  4F					dec	di
020C:17B3  43					inc	bx
020C:17B4  55					push	bp
020C:17B5  4D					dec	bp
020C:17B6  45					inc	bp
020C:17B7  7E 31				jle	loc_184			; Jump if < or =
020C:17B9  5C					pop	sp
020C:17BA  39 33				cmp	[bp+di],si
020C:17BC  33 35				xor	si,[di]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 68

020C:17BE  7E 31				jle	loc_185			; Jump if < or =
020C:17C0  5C					pop	sp
020C:17C1  30 30				xor	[bx+si],dh
020C:17C3  31 36 317E				xor	data_252,si		; (020C:317E=4F4Ch)
020C:17C7  002B[00]				db	43 dup (0)
020C:17F2  54					push	sp
020C:17F3  02 00				add	al,[bx+si]
020C:17F5  44					inc	sp
020C:17F6  3A 5C 00		;*		cmp	bl,[si+0]
020C:17F6  3A 5C 00				db	 3Ah, 5Ch, 00h
020C:17F9  0040[00]				db	64 dup (0)
020C:1839  5C					pop	sp
020C:183A  02 00				add	al,[bx+si]
020C:183C  B5 01				mov	ch,1
020C:183E  00 00				add	[bx+si],al
020C:1840  53					push	bx
020C:1841  91					xchg	cx,ax
020C:1842  03 7E 00				add	di,[bp]
020C:1845  00 0C				add	[si],cl
020C:1847  00 58 00		;*		add	[bx+si+0],bl
020C:1847  00 58 00				db	 00h, 58h, 00h
020C:184A  AA					stosb				; Store al to es:[di]
020C:184B  03 00				add	ax,[bx+si]
020C:184D  00					db	0
020C:184E  00					db	0
020C:184F  00 00				add	[bx+si],al
020C:1851  00 09				add	[bx+di],cl
020C:1853  00 48 00		;*		add	[bx+si+0],cl
020C:1853  00 48 00				db	 00h, 48h, 00h
020C:1856  80 00 00				add	byte ptr [bx+si],0
020C:1859  00 C2				add	dl,al
020C:185B  03 00				add	ax,[bx+si]
020C:185D  00 40 00		;*		add	[bx+si+0],al
020C:185D  00 40 00				db	 00h, 40h, 00h
020C:1860  40					inc	ax
020C:1861  00 EA				add	dl,ch
020C:1863  6D					db	6Dh
020C:1864  00 F0				add	al,dh
020C:1866  E8 01CE				call	sub_31			; (1A37)
020C:1869  12 00				adc	al,[bx+si]
020C:186B  46					inc	si
020C:186C  07					pop	es
020C:186D  0C 02				or	al,2
020C:186F  E8 01C5				call	sub_31			; (1A37)
020C:1872  1B 00				sbb	ax,[bx+si]
020C:1874  0A 04				or	al,[si]
020C:1876  0C 02				or	al,2
020C:1878  EB 02				jmp	short loc_186		; (187C)
020C:187A  90					nop
020C:187B  00 E8				add	al,ch
020C:187D  B8 2401				mov	ax,2401h
020C:1880  00 A4 0C0C				add	data_122[si],ah		; (020C:0C0C=5Bh)
020C:1884  02 E8				add	ch,al
020C:1886  AF					scasw				; Scan es:[di] for ax
020C:1887  01 31				add	[bx+di],si
020C:1889  00 EB				add	bl,ch
020C:188B  10 FF				adc	bh,bh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 69

020C:188D  03 0C				add	cx,[si]
020C:188F  02 4B 42				add	cl,[bp+di+42h]
020C:1892  00 EB				add	bl,ch
020C:1894  0C 00				or	al,0
020C:1896  00					db	0
020C:1897  00					db	0
020C:1898  00					db	0
020C:1899  00 00				add	[bx+si],al
020C:189B  00 E8				add	al,ch
020C:189D  98					cbw				; Convrt byte to word
020C:189E  01 3C				add	[si],di
020C:18A0  00 E9				add	cl,ch
020C:18A2  32 01				xor	al,[bx+di]
020C:18A4  EB 10				jmp	short loc_187		; (18B6)
020C:18A6  FF 03				inc	word ptr [bp+di]
020C:18A8  0C 02				or	al,2
020C:18AA  4B					dec	bx
020C:18AB  42					inc	dx
020C:18AC  00 EB				add	bl,ch
020C:18AE  0C 00				or	al,0
020C:18B0  00					db	0
020C:18B1  00					db	0
020C:18B2  00					db	0
020C:18B3  00 00				add	[bx+si],al
020C:18B5  00 E8				add	al,ch
020C:18B7  7E 01				jle	loc_188			; Jump if < or =
020C:18B9  56					push	si
020C:18BA			loc_188:
020C:18BA  00 E9				add	cl,ch
020C:18BC  18 01				sbb	[bx+di],al
020C:18BE  EB 10				jmp	short loc_189		; (18D0)
020C:18C0  FF 03				inc	word ptr [bp+di]
020C:18C2  0C 02				or	al,2
020C:18C4  4B					dec	bx
020C:18C5  42					inc	dx
020C:18C6  00 EB				add	bl,ch
020C:18C8  0C 00				or	al,0
020C:18CA  00					db	0
020C:18CB  00					db	0
020C:18CC  00					db	0
020C:18CD  00 00				add	[bx+si],al
020C:18CF  00 E8				add	al,ch
020C:18D1  64					db	64h
020C:18D2  01 70 00		;*		add	[bx+si+0],si
020C:18D2  01 70 00				db	 01h, 70h, 00h
020C:18D5  E9 00FE				jmp	loc_202			; (19D6)
020C:18D8  EB 10				jmp	short loc_190		; (18EA)
020C:18DA  FF 03				inc	word ptr [bp+di]
020C:18DC  0C 02				or	al,2
020C:18DE  4B					dec	bx
020C:18DF  42					inc	dx
020C:18E0  00 EB				add	bl,ch
020C:18E2  0C 00				or	al,0
020C:18E4  00					db	0
020C:18E5  00					db	0
020C:18E6  00					db	0
020C:18E7  00 00				add	[bx+si],al
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 70

020C:18E9  00 E8				add	al,ch
020C:18EB  4A					dec	dx
020C:18EC  01 8A E900				add	[bp+si-1700h],cx
020C:18F0  E4 00				in	al,0			; port 0, DMA-1 bas&add ch 0
020C:18F2  EB 10				jmp	short loc_191		; (1904)
020C:18F4  B3 07				mov	bl,7
020C:18F6  0C 02				or	al,2
020C:18F8  4B					dec	bx
020C:18F9  42					inc	dx
020C:18FA  00 EB				add	bl,ch
020C:18FC  0C 00				or	al,0
020C:18FE  00					db	0
020C:18FF  00					db	0
020C:1900  00					db	0
020C:1901  00 00				add	[bx+si],al
020C:1903  00 E8				add	al,ch
020C:1905  30 01				xor	[bx+di],al
020C:1907  A4					movsb				; Mov [si] to es:[di]
020C:1908  00 E9				add	cl,ch
020C:190A  CA EB00				retf	0EB00h			; Return far
020C:190D  10 B4 0C06				adc	byte ptr ds:[0C06h][si],dh	; (020C:0C06=0)
020C:1911  02 4B 42				add	cl,[bp+di+42h]
020C:1914  00 EB				add	bl,ch
020C:1916  0C 00				or	al,0
020C:1918  00					db	0
020C:1919  00					db	0
020C:191A  00					db	0
020C:191B  00 00				add	[bx+si],al
020C:191D  00 E8				add	al,ch
020C:191F  16					push	ss
020C:1920  01 BE E900				add	[bp-1700h],di
020C:1924  B0 00				mov	al,0
020C:1926  EB 10				jmp	short loc_192		; (1938)
020C:1928  B4 06				mov	ah,6
020C:192A  0C 02				or	al,2
020C:192C  4B					dec	bx
020C:192D  42					inc	dx
020C:192E  00 EB				add	bl,ch
020C:1930  0C 00				or	al,0
020C:1932  00					db	0
020C:1933  00					db	0
020C:1934  00					db	0
020C:1935  00 00				add	[bx+si],al
020C:1937  00 E8				add	al,ch
020C:1939  FC					cld				; Clear direction
020C:193A  00 D8				add	al,bl
020C:193C  00 E9				add	cl,ch
020C:193E  96					xchg	si,ax
020C:193F  00 EB				add	bl,ch
020C:1941  10 B4 0C06				adc	byte ptr ds:[0C06h][si],dh	; (020C:0C06=0)
020C:1945  02 4B 42				add	cl,[bp+di+42h]
020C:1948  00 EB				add	bl,ch
020C:194A  0C 00				or	al,0
020C:194C  00					db	0
020C:194D  00					db	0
020C:194E  00					db	0
020C:194F  00 00				add	[bx+si],al
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 71

020C:1951  00 E8				add	al,ch
020C:1953  E2 00				loop	locloop_193		; Loop if cx > 0


020C:1955			locloop_193:
020C:1955  F2					db	0F2h
020C:1956  00 EB				add	bl,ch
020C:1958  7D 90		;*		jge	loc_190			;*Jump if > or =
020C:1958  7D 90				db	 7Dh, 90h
020C:195A  EB 10				jmp	short loc_194		; (196C)
020C:195C  B4 06				mov	ah,6
020C:195E  0C 02				or	al,2
020C:1960  4B					dec	bx
020C:1961  42					inc	dx
020C:1962  00 EB				add	bl,ch
020C:1964  0C 00				or	al,0
020C:1966  00					db	0
020C:1967  00					db	0
020C:1968  00					db	0
020C:1969  00 00				add	[bx+si],al
020C:196B  00 E8				add	al,ch
020C:196D  C8					db	0C8h
020C:196E  00 0C				add	[si],cl
020C:1970  01 EB				add	bx,bp
020C:1972  63					db	63h
020C:1973  90					nop
020C:1974  EB 10				jmp	short loc_195		; (1986)
020C:1976  B4 06				mov	ah,6
020C:1978  0C 02				or	al,2
020C:197A  4B					dec	bx
020C:197B  42					inc	dx
020C:197C  00 EB				add	bl,ch
020C:197E  0C 00				or	al,0
020C:1980  00					db	0
020C:1981  00					db	0
020C:1982  00					db	0
020C:1983  00 00				add	[bx+si],al
020C:1985  00 E8				add	al,ch
020C:1987  AE					scasb				; Scan es:[di] for al
020C:1988  00 26 EB01				add	byte ptr ds:[0EB01h],ah	; (020C:EB01=44h)
020C:198C  49					dec	cx
020C:198D  90					nop

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_30		proc	near
020C:198E  1E					push	ds
020C:198F  50					push	ax
020C:1990  B8 0040				mov	ax,40h
020C:1993  8E D8				mov	ds,ax
020C:1995  9F					lahf				; Load ah from flags
020C:1996  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020C:199C  75 0C				jnz	loc_197			; Jump if not zero
020C:199E  F0> 81 26 0314 FDFF	                           lock	and	word ptr ds:[314h],0FDFFh	; (0040:0314=3200h)
020C:19A5			loc_196:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 72

020C:19A5  9E					sahf				; Store ah into flags
020C:19A6  58					pop	ax
020C:19A7  1F					pop	ds
020C:19A8  EB 03				jmp	short loc_198		; (19AD)
020C:19AA			loc_197:
020C:19AA  FA					cli				; Disable interrupts
020C:19AB  EB F8				jmp	short loc_196		; (19A5)
020C:19AD			loc_198:
020C:19AD  C3					retn
				sub_30		endp

							                        ;* No entry point to code
020C:19AE  1E					push	ds
020C:19AF  50					push	ax
020C:19B0  B8 0040				mov	ax,40h
020C:19B3  8E D8				mov	ds,ax
020C:19B5  9F					lahf				; Load ah from flags
020C:19B6  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020C:19BC  75 14				jnz	loc_200			; Jump if not zero
020C:19BE  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020C:19C4  75 0C				jnz	loc_200			; Jump if not zero
020C:19C6  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020C:19CD			loc_199:
020C:19CD  9E					sahf				; Store ah into flags
020C:19CE  58					pop	ax
020C:19CF  1F					pop	ds
020C:19D0  EB 03				jmp	short loc_201		; (19D5)
020C:19D2			loc_200:
020C:19D2  FB					sti				; Enable interrupts
020C:19D3  EB F8				jmp	short loc_199		; (19CD)
020C:19D5			loc_201:
020C:19D5  C3					retn
020C:19D6			loc_202:
020C:19D6  1E					push	ds
020C:19D7  50					push	ax
020C:19D8  B8 0040				mov	ax,40h
020C:19DB  8E D8				mov	ds,ax
020C:19DD  F7 06 0314 2400			test	word ptr ds:[314h],2400h	; (0040:0314=3200h)
020C:19E3  75 4F				jnz	loc_210			; Jump if not zero
020C:19E5  55					push	bp
020C:19E6  8B EC				mov	bp,sp
020C:19E8  8B 46 0A				mov	ax,[bp+0Ah]
020C:19EB  5D					pop	bp
020C:19EC  A9 0100				test	ax,100h
020C:19EF  75 43				jnz	loc_210			; Jump if not zero
020C:19F1  A9 0200				test	ax,200h
020C:19F4  74 22				jz	loc_206			; Jump if zero
020C:19F6  F0> 81 0E 0314 0200	                           lock	or	word ptr ds:[314h],200h	; (0040:0314=3200h)
020C:19FD  F7 06 0314 0003			test	word ptr ds:[314h],3	; (0040:0314=3200h)
020C:1A03  75 2F				jnz	loc_210			; Jump if not zero
020C:1A05			loc_203:
020C:1A05  86 E0				xchg	ah,al
020C:1A07  FC					cld				; Clear direction
020C:1A08  A8 04				test	al,4
020C:1A0A  75 25				jnz	loc_209			; Jump if not zero
020C:1A0C			loc_204:
020C:1A0C  A8 08				test	al,8
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 73

020C:1A0E  75 11				jnz	loc_207			; Jump if not zero
020C:1A10  70 19				jo	loc_208			; Jump if overflow=1
020C:1A12			loc_205:
020C:1A12  9E					sahf				; Store ah into flags
020C:1A13  58					pop	ax
020C:1A14  1F					pop	ds
020C:1A15  CA 0002				retf	2			; Return far
020C:1A18			loc_206:
020C:1A18  F0> 81 26 0314 FDFF	                           lock	and	data_89,0FDFFh		; (020C:0314=3231h)
020C:1A1F  EB E4				jmp	short loc_203		; (1A05)
020C:1A21			loc_207:
020C:1A21  70 EF				jo	loc_205			; Jump if overflow=1
020C:1A23  50					push	ax
020C:1A24  B0 7F				mov	al,7Fh
020C:1A26  04 02				add	al,2
020C:1A28  58					pop	ax
020C:1A29  EB E7				jmp	short loc_205		; (1A12)
020C:1A2B			loc_208:
020C:1A2B  50					push	ax
020C:1A2C  32 C0				xor	al,al			; Zero register
020C:1A2E  58					pop	ax
020C:1A2F  EB E1				jmp	short loc_205		; (1A12)
020C:1A31			loc_209:
020C:1A31  FD					std				; Set direction flag
020C:1A32  EB D8				jmp	short loc_204		; (1A0C)
020C:1A34			loc_210:
020C:1A34  58					pop	ax
020C:1A35  1F					pop	ds
020C:1A36  CF					iret				; Interrupt return

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_31		proc	near
020C:1A37  50					push	ax
020C:1A38  55					push	bp
020C:1A39  06					push	es
020C:1A3A  2E: 8E 06 000A			mov	es,cs:data_6		; (020C:000A=272Dh)
020C:1A3F  2E: 8B 2E 0010			mov	bp,cs:data_9		; (020C:0010=1FBFh)
020C:1A44  B0 01				mov	al,1
020C:1A46  26: 86 46 00				xchg	es:[bp],al
020C:1A4A  3C 00				cmp	al,0
020C:1A4C  75 51				jne	loc_212			; Jump if not equal
020C:1A4E  2E: 83 2E 0010 08			sub	cs:data_9,8		; (020C:0010=1FBFh)
020C:1A54			loc_211:
020C:1A54  26: 89 66 02				mov	es:[bp+2],sp
020C:1A58  26: 8C 56 04				mov	es:[bp+4],ss
020C:1A5C  8B C5				mov	ax,bp
020C:1A5E  26: 8B 6E 06				mov	bp,es:[bp+6]
020C:1A62  26: 39 46 00				cmp	es:[bp],ax
020C:1A66  75 44				jne	loc_214			; Jump if not equal
020C:1A68  55					push	bp
020C:1A69  8B EC				mov	bp,sp
020C:1A6B  8B 46 08				mov	ax,[bp+8]
020C:1A6E  5D					pop	bp
020C:1A6F  06					push	es
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 74

020C:1A70  17					pop	ss
020C:1A71  8B E5				mov	sp,bp
020C:1A73  8B E8				mov	bp,ax
020C:1A75  2E: 8B 6E 00				mov	bp,cs:[bp]
020C:1A79  9C					pushf				; Push flags
020C:1A7A  2E: FF 5E 00				call	dword ptr cs:[bp]	;*
020C:1A7E  8B EC				mov	bp,sp
020C:1A80  26: 8B 6E 00				mov	bp,es:[bp]
020C:1A84  26: 8E 56 04				mov	ss,es:[bp+4]
020C:1A88  26: 8B 66 02				mov	sp,es:[bp+2]
020C:1A8C  26: C6 46 00 00			mov	byte ptr es:[bp],0
020C:1A91  2E: 89 2E 0010			mov	cs:data_9,bp		; (020C:0010=1FBFh)
020C:1A96  07					pop	es
020C:1A97  5D					pop	bp
020C:1A98  58					pop	ax
020C:1A99  83 C4 02				add	sp,2
020C:1A9C  E9 FF37				jmp	loc_202			; (19D6)
020C:1A9F			loc_212:
020C:1A9F  3C 01				cmp	al,1
020C:1AA1  74 04				je	loc_213			; Jump if equal
020C:1AA3  26: 86 46 00				xchg	es:[bp],al
020C:1AA7			loc_213:
020C:1AA7  E8 0012				call	sub_32			; (1ABC)
020C:1AAA  EB A8				jmp	short loc_211		; (1A54)
020C:1AAC			loc_214:
020C:1AAC  2E: 3B 2E 000C			cmp	bp,cs:data_7		; (020C:000C=9028h)
020C:1AB1  72 F4				jb	loc_213			; Jump if below
020C:1AB3  8B E8				mov	bp,ax
020C:1AB5  26: C6 46 00 03			mov	byte ptr es:[bp],3
020C:1ABA  EB EB				jmp	short loc_213		; (1AA7)
				sub_31		endp


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_32		proc	near
020C:1ABC  2E: 8B 2E 000E			mov	bp,cs:data_8		; (020C:000E=0A02Bh)
020C:1AC1			loc_215:
020C:1AC1  26: 80 7E 00 00			cmp	byte ptr es:[bp],0
020C:1AC6  75 12				jne	loc_217			; Jump if not equal
020C:1AC8  B0 01				mov	al,1
020C:1ACA  26: 86 46 00				xchg	es:[bp],al
020C:1ACE  3C 00				cmp	al,0
020C:1AD0  74 14				je	loc_218			; Jump if equal
020C:1AD2  3C 01				cmp	al,1
020C:1AD4  74 04				je	loc_217			; Jump if equal
020C:1AD6  26: 88 46 00				mov	es:[bp],al
020C:1ADA			loc_217:
020C:1ADA  2E: 3B 2E 000C			cmp	bp,cs:data_7		; (020C:000C=9028h)
020C:1ADF  74 06				je	loc_219			; Jump if equal
020C:1AE1  83 ED 08				sub	bp,8
020C:1AE4  EB DB				jmp	short loc_215		; (1AC1)
020C:1AE6			loc_218:
020C:1AE6  C3					retn
020C:1AE7			loc_219:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 75

020C:1AE7  E8 FEA4				call	sub_30			; (198E)

020C:1AEA			locloop_220:
020C:1AEA  B0 FF				mov	al,0FFh
020C:1AEC  E6 21				out	21h,al			; port 21h, 8259-1 int comands
020C:1AEE  E6 A1				out	0A1h,al			; port 0A1h  al = 0FFh, inhibit interr
020C:1AF0  8C CE				mov	si,cs
020C:1AF2  8E DE				mov	ds,si
020C:1AF4  BE 02CB				mov	si,2CBh
020C:1AF7  50					push	ax
020C:1AF8  1E					push	ds
020C:1AF9  B8 0070				mov	ax,70h
020C:1AFC  8E D8				mov	ds,ax
020C:1AFE  F6 06 0337 01			test	byte ptr ds:[337h],1	; (0070:0337=0)
020C:1B03  1F					pop	ds
020C:1B04  58					pop	ax
020C:1B05  74 05				jz	loc_221			; Jump if zero
020C:1B07  9A 0070:0338		;*		call	far ptr sub_2		;*(0070:0338)
020C:1B07  9A					db	9Ah
020C:1B08  0338 0070				dw	338h, 70h
020C:1B0C			loc_221:
020C:1B0C  AC					lodsb				; String [si] to al
020C:1B0D  3C 24				cmp	al,24h			; '$'
020C:1B0F  74 08				je	loc_223			; Jump if equal
020C:1B11  B3 07				mov	bl,7
020C:1B13  B4 0E				mov	ah,0Eh
020C:1B15  CD 10				int	10h			; Video display   ah=functn 0Eh
										;  write char al, teletype mode
020C:1B17  EB F3				jmp	short loc_221		; (1B0C)
020C:1B19			loc_223:
020C:1B19  EB FE				jmp	short loc_223		; (1B19)
				sub_32		endp

020C:1B1B  0D 070A				or	ax,70Ah
020C:1B1E  0D 8F0A				or	ax,8F0Ah
020C:1B21  A5					movsw				; Mov [si] to es:[di]
020C:1B22  E0 A5		;*		loopnz	locloop_216		;*Loop if zf=0, cx>0

020C:1B22  E0 A5				db	0E0h,0A5h
020C:1B24  AF					scasw				; Scan es:[di] for ax
020C:1B25  AE					scasb				; Scan es:[di] for al
020C:1B26  AB					stosw				; Store ax to es:[di]
020C:1B27  AD					lodsw				; String [si] to ax
020C:1B28  A5					movsw				; Mov [si] to es:[di]
020C:1B29  AD					lodsw				; String [si] to ax
020C:1B2A  A8 A5				test	al,0A5h
020C:1B2C  20 A2 E3AD				and	[bp+si-1C53h],ah
020C:1B30  E2 E0		;*		loop	locloop_222		;*Loop if cx > 0

020C:1B30  E2 E0				db	0E2h,0E0h
020C:1B32  A5					movsw				; Mov [si] to es:[di]
020C:1B33  AD					lodsw				; String [si] to ax
020C:1B34  AD					lodsw				; String [si] to ax
020C:1B35  A5					movsw				; Mov [si] to es:[di]
020C:1B36  A3 20AE				mov	data_186,ax		; (020C:20AE=2020h)
020C:1B39  E1 E2		;*		loopz	locloop_224		;*Loop if zf=1, cx>0

           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 76

020C:1B39  E1 E2				db	0E1h,0E2h
020C:1B3B  A5					movsw				; Mov [si] to es:[di]
020C:1B3C  AA					stosb				; Store al to es:[di]
020C:1B3D  A0 0A0D				mov	al,byte ptr ds:[0A0Dh]	; (020C:0A0D=0)
020C:1B40  91					xchg	cx,ax
020C:1B41  A8 E1				test	al,0E1h
020C:1B43  E2 A5				loop	locloop_220		; Loop if cx > 0

020C:1B45  AC					lodsb				; String [si] to al
020C:1B46  A0 AE20				mov	al,byte ptr ds:[0AE20h]	; (020C:AE20=0)
020C:1B49  E1 E2		;*		loopz	locloop_225		;*Loop if zf=1, cx>0

020C:1B49  E1 E2				db	0E1h,0E2h
020C:1B4B  A0 AEAD				mov	al,byte ptr ds:[0AEADh]	; (020C:AEAD=0D9h)
020C:1B4E  A2 A5AB				mov	byte ptr ds:[0A5ABh],al	; (020C:A5AB=0)
020C:1B51  AD					lodsw				; String [si] to ax
020C:1B52  A0 0A0D				mov	al,byte ptr ds:[0A0Dh]	; (020C:0A0D=0)
020C:1B55  24 07				and	al,7
020C:1B57  00 09				add	[bx+di],cl
020C:1B59  69					db	69h
020C:1B5A  00 00				add	[bx+si],al
020C:1B5C  06					push	es
020C:1B5D  00 06 0000				add	byte ptr data_1,al	; (020C:0000=28h)
020C:1B61  00					db	0
020C:1B62  00					db	0
020C:1B63  00 00				add	[bx+si],al
020C:1B65  00 C6				add	dh,al
020C:1B67  0007[00]				db	7 dup (0)
020C:1B6E  46					inc	si
020C:1B6F  01 00				add	[bx+si],ax
020C:1B71  00					db	0
020C:1B72  00					db	0
020C:1B73  00 00				add	[bx+si],al
020C:1B75  00 C6				add	dh,al
020C:1B77  01 00				add	[bx+si],ax
020C:1B79  00					db	0
020C:1B7A  00					db	0
020C:1B7B  00 00				add	[bx+si],al
020C:1B7D  00 46 02				add	[bp+2],al
020C:1B80  00					db	0
020C:1B81  00					db	0
020C:1B82  00					db	0
020C:1B83  00 00				add	[bx+si],al
020C:1B85  00 C6				add	dh,al
020C:1B87  02 00				add	al,[bx+si]
020C:1B89  00					db	0
020C:1B8A  0000			data_165	dw	0			; Data table (indexed access)
020C:1B8C  00 00				add	[bx+si],al
020C:1B8E  46					inc	si
020C:1B8F  03 00				add	ax,[bx+si]
020C:1B91  00					db	0
020C:1B92  00					db	0
020C:1B93  00 00				add	[bx+si],al
020C:1B95  00 C6				add	dh,al
020C:1B97  03 00				add	ax,[bx+si]
020C:1B99  00					db	0
020C:1B9A  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 77

020C:1B9B  00 00				add	[bx+si],al
020C:1B9D  00 46 04				add	[bp+4],al
020C:1BA0  00 00				add	[bx+si],al
020C:1BA2  06					push	es
020C:1BA3  06					push	es
020C:1BA4  FB					sti				; Enable interrupts
020C:1BA5  8D					db	8Dh
020C:1BA6  C6 04 00				mov	byte ptr [si],0
020C:1BA9  00FD[00]				db	253 dup (0)
020C:1CA6  08 00				or	[bx+si],al
020C:1CA8  0078[00]				db	120 dup (0)
020C:1D20  00			data_168	db	0
020C:1D21  00					db	0
020C:1D22  00					db	0
020C:1D23  00 00				add	[bx+si],al
020C:1D25  00 10				add	[bx+si],dl
020C:1D27  00					db	0
020C:1D28  007E[00]				db	126 dup (0)
020C:1DA6  18 00				sbb	[bx+si],al
020C:1DA8  007E[00]				db	126 dup (0)
020C:1E26  20 00				and	[bx+si],al
020C:1E28  0061[00]				db	97 dup (0)
020C:1E89  00			data_172	db	0
020C:1E8A  00					db	0
020C:1E8B  0000 0000		data_173	dd	00000h
020C:1E8F  00					db	0
020C:1E90  00					db	0
020C:1E91  00					db	0
020C:1E92  00					db	0
020C:1E93  00					db	0
020C:1E94  00					db	0
020C:1E95  00					db	0
020C:1E96  00					db	0
020C:1E97  00					db	0
020C:1E98  00					db	0
020C:1E99  00					db	0
020C:1E9A  00					db	0
020C:1E9B  00					db	0
020C:1E9C  00					db	0
020C:1E9D  00					db	0
020C:1E9E  00					db	0
020C:1E9F  00					db	0
020C:1EA0  00					db	0
020C:1EA1  00					db	0
020C:1EA2  00					db	0
020C:1EA3  00 00				add	[bx+si],al
020C:1EA5  00 28				add	[bx+si],ch
020C:1EA7  00					db	0
020C:1EA8  0046[00]				db	70 dup (0)
020C:1EEE  0000 0000		data_175	dd	00000h			; Data table (indexed access)
020C:1EF2  00					db	0
020C:1EF3  00					db	0
020C:1EF4  00					db	0
020C:1EF5  00					db	0
020C:1EF6  00					db	0
020C:1EF7  00					db	0
020C:1EF8  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 78

020C:1EF9  00					db	0
020C:1EFA  00					db	0
020C:1EFB  00					db	0
020C:1EFC  00					db	0
020C:1EFD  00					db	0
020C:1EFE  00					db	0
020C:1EFF  00					db	0
020C:1F00  00					db	0
020C:1F01  00					db	0
020C:1F02  00					db	0
020C:1F03  00					db	0
020C:1F04  00					db	0
020C:1F05  00					db	0
020C:1F06  00					db	0
020C:1F07  00					db	0
020C:1F08  00					db	0
020C:1F09  00					db	0
020C:1F0A  00					db	0
020C:1F0B  00					db	0
020C:1F0C  00					db	0
020C:1F0D  00					db	0
020C:1F0E  00					db	0
020C:1F0F  00					db	0
020C:1F10  00					db	0
020C:1F11  00					db	0
020C:1F12  00					db	0
020C:1F13  00					db	0
020C:1F14  00					db	0
020C:1F15  00					db	0
020C:1F16  00					db	0
020C:1F17  00					db	0
020C:1F18  00					db	0
020C:1F19  00					db	0
020C:1F1A  00					db	0
020C:1F1B  00					db	0
020C:1F1C  00					db	0
020C:1F1D  00					db	0
020C:1F1E  00					db	0
020C:1F1F  00					db	0
020C:1F20  00					db	0
020C:1F21  00					db	0
020C:1F22  00					db	0
020C:1F23  00 00				add	[bx+si],al
020C:1F25  00 30				add	[bx+si],dh
020C:1F27  00					db	0
020C:1F28  007E[00]				db	126 dup (0)
020C:1FA6  38 00				cmp	[bx+si],al
020C:1FA8  006C[00]				db	108 dup (0)
020C:2014  01 91 9101				add	word ptr ds:[9101h][bx+di],dx	; (020C:9101=3E80h)
020C:2018  FB					sti				; Enable interrupts
020C:2019  8D					db	8Dh
020C:201A  F3					db	0F3h
020C:201B  03 B7 FB00				add	si,word ptr ds:[0FB00h][bx]	; (020C:FB00=0A316h)
020C:201F  8D 2E 9102				lea	bp,cs:[9102h]		; Load effective addr
020C:2023  03 46 30				add	ax,[bp+30h]
020C:2026  40					inc	ax
020C:2027  00 04				add	[si],al
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 79

020C:2029  00 C3				add	bl,al
020C:202B  3C 00				cmp	al,0
020C:202D  00 06 4D00				add	data_296,al		; (020C:4D00=3)
020C:2031  10 04				adc	[si],al
020C:2033  B5 00				mov	ch,0
020C:2035  00 06 4300				add	data_292,al		; (020C:4300=3)
020C:2039  4F					dec	di
020C:203A  4D					dec	bp
020C:203B  4D					dec	bp
020C:203C  41					inc	cx
020C:203D  4E					dec	si
020C:203E  44					inc	sp
020C:203F  00 CD				add	ch,cl
020C:2041  20 FF				and	bh,bh
020C:2043  9F					lahf				; Load ah from flags
020C:2044  00 9A FEF0				add	[bp+si-110h],bl
020C:2048  1D 7FF0				sbb	ax,7FF0h
020C:204B  01 10				add	[bx+si],dx
020C:204D  04 4B				add	al,4Bh			; 'K'
020C:204F  01 10				add	[bx+si],dx
020C:2051  04 56				add	al,56h			; 'V'
020C:2053  01 10				add	[bx+si],dx
020C:2055  04 10				add	al,10h
020C:2057  04 01				add	al,1
020C:2059  01 01				add	[bx+di],ax
020C:205B  00 02				add	[bp+si],al
020C:205D  000F[FF]				db	15 dup (0FFh)
020C:206C  CE					into				; Int 4 on overflow
020C:206D  04 FA				add	al,0FAh
020C:206F  05 0410				add	ax,410h
020C:2072  14 00				adc	al,0
020C:2074  18 00				sbb	[bx+si],al
020C:2076  10 04				adc	[si],al
020C:2078  FF					db	0FFh
020C:2079  FF					db	0FFh
020C:207A  FF					db	0FFh
020C:207B  FF 00				inc	word ptr [bx+si]
020C:207D  00 00				add	[bx+si],al
020C:207F  00 05				add	[di],al
020C:2081  000F[00]				db	15 dup (0)
020C:2090  CD 21				int	21h			; ??INT Non-standard interrupt
020C:2092  CB					retf				; Return far
020C:2093  000A[00]				db	10 dup (0)
020C:209D  20 20 20				db	 20h, 20h, 20h
020C:20A0  20			data_183	db	20h			; Data table (indexed access)
020C:20A1  20 20				and	[bx+si],ah
020C:20A3  20 20				and	[bx+si],ah
020C:20A5  2020			data_184	dw	2020h			; Data table (indexed access)
020C:20A7  20 00				and	[bx+si],al
020C:20A9  00					db	0
020C:20AA  00 00				add	[bx+si],al
020C:20AC  00 20				add	[bx+si],ah
020C:20AE  2020			data_186	dw	2020h
020C:20B0  0008[20]				db	8 dup (20h)
020C:20B8  0009[00]				db	9 dup (0)
020C:20C1  0D 2020				or	ax,2020h
020C:20C4  20 53 45				and	[bp+di+45h],dl
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 80

020C:20C7  54					push	sp
020C:20C8  20 42 4C				and	[bp+si+4Ch],al
020C:20CB  41					inc	cx
020C:20CC  53					push	bx
020C:20CD  54					push	sp
020C:20CE  45					inc	bp
020C:20CF  52					push	dx
020C:20D0  3D 3041				cmp	ax,3041h
020C:20D3  0D A8AD				or	ax,0A8ADh
020C:20D6  A5					movsw				; Mov [si] to es:[di]
020C:20D7  20 A4 EFAB				and	byte ptr ds:[0EFABh][si],ah	; (020C:EFAB=15h)
020C:20DB  20 A1 A7A2				and	byte ptr ds:[0A7A2h][bx+di],ah	; (020C:A7A2=0F7h)
020C:20DF  AE					scasb				; Scan es:[di] for al
020C:20E0  A2 A3AE				mov	byte ptr ds:[0A3AEh],al	; (020C:A3AE=16h)
020C:20E3  AE					scasb				; Scan es:[di] for al
020C:20E4  20 AF E0AE				and	byte ptr ds:[0E0AEh][bx],ch	; (020C:E0AE=0FEh)
020C:20E8  E2 A0		;*		loop	locloop_226		;*Loop if cx > 0

020C:20E8  E2 A0				db	0E2h,0A0h
020C:20EA  20 A2 AEA2				and	[bp+si-515Eh],ah
020C:20EE  A4					movsb				; Mov [si] to es:[di]
020C:20EF  A0			data_189	db	0A0h
020C:20F0  2D EBA2				sub	ax,0EBA2h
020C:20F3  A2 A4AE				mov	byte ptr ds:[0A4AEh],al	; (020C:A4AE=29h)
020C:20F6  A0 5320				mov	al,byte ptr ds:[5320h]	; (020C:5320=60h)
020C:20F9  42					inc	dx
020C:20FA  2C 20				sub	al,20h			; ' '
020C:20FC  AD					lodsw				; String [si] to ax
020C:20FD  A0 E0AF				mov	al,byte ptr ds:[0E0AFh]	; (020C:E0AF=38h)
020C:2100  A8 AC				test	al,0ACh
020C:2102  A5					movsw				; Mov [si] to es:[di]
020C:2103  E0 3A				loopnz	locloop_230		; Loop if zf=0, cx>0

020C:2105  0D 0DEC				or	ax,0DECh
020C:2108  E0 EB		;*		loopnz	locloop_229		;*Loop if zf=0, cx>0

020C:2108  E0 EB				db	0E0h,0EBh
020C:210A  A5					movsw				; Mov [si] to es:[di]
020C:210B  0D 0000				or	ax,0
020C:210E  0032[00]				db	50 dup (0)
020C:2140  E9 174D				jmp	loc_413			; (3890)
020C:2143  00 17				add	[bx],dl
020C:2145  64					db	64h
020C:2146  FF					db	0FFh
020C:2147  FF 37				push	word ptr [bx]
020C:2149  5E					pop	si
020C:214A  FF					db	0FFh
020C:214B  FF F5		;*		push	bp
020C:214B  FF F5				db	0FFh,0F5h
020C:214D  5C					pop	sp
020C:214E  FF					db	0FFh
020C:214F  FF 24				jmp	word ptr [si]		;*
020C:2151  61					db	61h
020C:2152  FF					db	0FFh
020C:2153  FF					db	0FFh
020C:2154  E9 FF5C		;*		jmp	loc_228			;*(20B3)
020C:2154  E9 5C FF				db	0E9h, 5Ch,0FFh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 81

							                        ;* No entry point to code
020C:2157  FF 63 5F				jmp	word ptr [bp+di+5Fh]	;*
020C:215A  FF					db	0FFh
							                        ;* No entry point to code
020C:215B  FF 01				inc	word ptr [bx+di]
020C:215D  61					db	61h
020C:215E  FF					db	0FFh
020C:215F  FF 6E 5E				jmp	dword ptr [bp+5Eh]	;*
020C:2162  FF					db	0FFh
							                        ;* No entry point to code
020C:2163  FF 5A 64				call	dword ptr [bp+si+64h]	;*
020C:2166  FF					db	0FFh
020C:2167  FF 82 FF5F				inc	word ptr [bp+si-0A1h]
020C:216B  FF D3				call	bx			;*
020C:216D  64					db	64h
020C:216E  FF					db	0FFh
020C:216F  FF AF DB00				jmp	dword ptr ds:[0DB00h][bx]	;*(020C:DB00=1641h)
							                        ;* No entry point to code
020C:2173  02 01				add	al,[bx+di]
020C:2175  FB					sti				; Enable interrupts
020C:2176  E8 0064				call	sub_33			; (21DD)
020C:2179  1E					push	ds
020C:217A  0E					push	cs
020C:217B  2E: FF 2E 0104			jmp	dword ptr cs:[104h]	; (020C:0104=908h)
							                        ;* No entry point to code
020C:2180  FB					sti				; Enable interrupts
020C:2181  E8 0059				call	sub_33			; (21DD)
020C:2184  1E					push	ds
020C:2185  0E					push	cs
020C:2186  2E: FF 2E 0108			jmp	dword ptr cs:[108h]	; (020C:0108=0A302h)
							                        ;* No entry point to code
020C:218B  FB					sti				; Enable interrupts
020C:218C  E8 004E				call	sub_33			; (21DD)
020C:218F  1E					push	ds
020C:2190  0E					push	cs
020C:2191  2E: FF 2E 010C			jmp	dword ptr cs:data_58	; (020C:010C=9028h)
							                        ;* No entry point to code
020C:2196  FB					sti				; Enable interrupts
020C:2197  E8 0043				call	sub_33			; (21DD)
020C:219A  1E					push	ds
020C:219B  0E					push	cs
020C:219C  2E: FF 2E 0110			jmp	dword ptr cs:data_59	; (020C:0110=1FBFh)
020C:21A1			loc_231:
020C:21A1  E8 0039				call	sub_33			; (21DD)
020C:21A4  1E					push	ds
020C:21A5  0E					push	cs
020C:21A6  2E: FF 2E 0114			jmp	dword ptr cs:data_60	; (020C:0114=0C0Bh)
							                        ;* No entry point to code
020C:21AB  E8 002F				call	sub_33			; (21DD)
020C:21AE  1E					push	ds
020C:21AF  0E					push	cs
020C:21B0  2E: FF 2E 0118			jmp	dword ptr cs:data_61	; (020C:0118=0)
							                        ;* No entry point to code
020C:21B5  E8 0025				call	sub_33			; (21DD)
020C:21B8  1E					push	ds
020C:21B9  0E					push	cs
020C:21BA  2E: FF 2E 011C			jmp	dword ptr cs:data_62	; (020C:011C=145Dh)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 82

020C:21BF			loc_232:
020C:21BF  E8 001B				call	sub_33			; (21DD)
020C:21C2  1E					push	ds
020C:21C3  0E					push	cs
020C:21C4  2E: FF 2E 0120			jmp	dword ptr cs:data_63	; (020C:0120=0A3BAh)
							                        ;* No entry point to code
020C:21C9  E8 0011				call	sub_33			; (21DD)
020C:21CC  1E					push	ds
020C:21CD  0E					push	cs
020C:21CE  2E: FF 2E 0124			jmp	dword ptr cs:data_64	; (020C:0124=201h)
							                        ;* No entry point to code
020C:21D3  E8 0007				call	sub_33			; (21DD)
020C:21D6  1E					push	ds
020C:21D7  0E					push	cs
020C:21D8  2E: FF 2E 0128			jmp	dword ptr cs:data_65	; (020C:0128=1405h)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_33		proc	near
020C:21DD  9C					pushf				; Push flags
020C:21DE  50					push	ax
020C:21DF  2E: 80 3E 0134 00			cmp	cs:data_68,0		; (020C:0134=0)
020C:21E5  74 08				je	loc_233			; Jump if equal
020C:21E7  E8 000D				call	sub_34			; (21F7)
020C:21EA  73 03				jnc	loc_233			; Jump if carry=0
020C:21EC  E8 001B				call	sub_35			; (220A)
020C:21EF			loc_233:
020C:21EF  58					pop	ax
020C:21F0  9D					popf				; Pop flags
020C:21F1  C3					retn
				sub_33		endp

020C:21F2  EA 0410:0135		;*		jmp	far ptr loc_685		;*(0410:0135)
020C:21F2  EA					db	0EAh
020C:21F3  0135 0410				dw	135h, 410h

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_34		proc	near
020C:21F7  53					push	bx
020C:21F8  50					push	ax
020C:21F9  B4 07				mov	ah,7
020C:21FB  2E: FF 1E 0130			call	dword ptr cs:data_67	; (020C:0130=3E3Dh)
020C:2200  0B C0				or	ax,ax			; Zero ?
020C:2202  58					pop	ax
020C:2203  5B					pop	bx
020C:2204  75 02				jnz	loc_234			; Jump if not zero
020C:2206  F9					stc				; Set carry flag
020C:2207  C3					retn
020C:2208			loc_234:
020C:2208  F8					clc				; Clear carry flag
020C:2209  C3					retn
				sub_34		endp
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 83



				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_35		proc	near
020C:220A  53					push	bx
020C:220B  50					push	ax
020C:220C  B4 05				mov	ah,5
020C:220E  2E: FF 1E 0130			call	dword ptr cs:data_67	; (020C:0130=3E3Dh)
020C:2213  0B C0				or	ax,ax			; Zero ?
020C:2215  74 03				jz	loc_235			; Jump if zero
020C:2217  58					pop	ax
020C:2218  5B					pop	bx
020C:2219  C3					retn
020C:221A			loc_235:
020C:221A  EB FE				jmp	short loc_235		; (221A)
				sub_35		endp

							                        ;* No entry point to code
020C:221C  CD 21				int	21h			; DOS Services  ah=function 1Dh
										;  obsolete CP/M function
020C:221E  FA					cli				; Disable interrupts
020C:221F  0E					push	cs
020C:2220  17					pop	ss
020C:2221  BC 0612				mov	sp,612h
020C:2224  FB					sti				; Enable interrupts
020C:2225  0E					push	cs
020C:2226  1F					pop	ds
020C:2227  9C					pushf				; Push flags
020C:2228  50					push	ax
020C:2229  2E: A0 0614				mov	al,cs:data_95		; (020C:0614=2Eh)
020C:222D  A8 80				test	al,80h
020C:222F  74 07				jz	loc_236			; Jump if zero
020C:2231  24 7F				and	al,7Fh
020C:2233  2E: FF 1E 012C			call	dword ptr cs:data_66	; (020C:012C=3A39h)
020C:2238			loc_236:
020C:2238  2E: 80 26 0614 7F			and	cs:data_95,7Fh		; (020C:0614=2Eh)
020C:223E  58					pop	ax
020C:223F  9D					popf				; Pop flags
020C:2240  E9 FF5E				jmp	loc_231			; (21A1)
							                        ;* No entry point to code
020C:2243  02 00				add	al,[bx+si]
020C:2245  00 01				add	[bx+di],al
020C:2247  09 02				or	[bp+si],ax
020C:2249  41					inc	cx
020C:224A  02 00				add	al,[bx+si]
020C:224C  00 02				add	[bp+si],al
020C:224E  10 02				adc	[bp+si],al
020C:2250  0009[00]				db	9 dup (0)
020C:2259  02 22				add	ah,[bp+si]
020C:225B  02 03				add	al,[bp+di]
020C:225D  30 02				xor	[bp+si],al
020C:225F  03 2E 0002				add	bp,data_2		; (020C:0002=10h)
020C:2263  0010[00]				db	16 dup (0)
020C:2273  01 09				add	[bx+di],cx
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 84

020C:2275  02 02				add	al,[bp+si]
020C:2277  5A					pop	dx
020C:2278  02 01				add	al,[bx+di]
020C:227A  3C 02				cmp	al,2
020C:227C  43					inc	bx
020C:227D  02 7C 04				add	bh,[si+4]
020C:2280  000A[00]				db	10 dup (0)
020C:228A  00			data_194	db	0
020C:228B  10 04				adc	[si],al
020C:228D  7F 01				jg	loc_237			; Jump if >
020C:228F  10 04				adc	[si],al
020C:2291  0007[00]				db	7 dup (0)
020C:2298  43					inc	bx
020C:2299  3A 5C 57				cmp	bl,[si+57h]
020C:229C  49					dec	cx
020C:229D  4E					dec	si
020C:229E  44					inc	sp
020C:229F  4F					dec	di
020C:22A0  57					push	di
020C:22A1  53					push	bx
020C:22A2  5C					pop	sp
020C:22A3  53					push	bx
020C:22A4  59					pop	cx
020C:22A5  53					push	bx
020C:22A6  54					push	sp
020C:22A7  45					inc	bp
020C:22A8  4D					dec	bp
020C:22A9  33 32				xor	si,[bp+si]
020C:22AB  5C					pop	sp
020C:22AC  43					inc	bx
020C:22AD  4D4F			data_196	dw	4D4Fh
020C:22AF  4D					dec	bp
020C:22B0  41					inc	cx
020C:22B1  444E			data_197	dw	444Eh
020C:22B3  432E			data_198	dw	432Eh
020C:22B5  4F					dec	di
020C:22B6  4D					dec	bp
020C:22B7  00 00 00 00 00 00			db	0, 0, 0, 0, 0, 0
020C:22BD  0000			data_200	dw	0
020C:22BF  00					db	0
020C:22C0  00					db	0
020C:22C1  00					db	0
020C:22C2  00					db	0
020C:22C3  00					db	0
020C:22C4  00					db	0
020C:22C5  00					db	0
020C:22C6  00					db	0
020C:22C7  00					db	0
020C:22C8  00					db	0
020C:22C9  00					db	0
020C:22CA  00					db	0
020C:22CB  00					db	0
020C:22CC  00					db	0
020C:22CD  00					db	0
020C:22CE  00					db	0
020C:22CF  00					db	0
020C:22D0  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 85

020C:22D1  00					db	0
020C:22D2  00					db	0
020C:22D3  00					db	0
020C:22D4  00					db	0
020C:22D5  00 00				add	[bx+si],al
020C:22D7  00 77 02				add	[bx+2],dh
020C:22DA  2C 01				sub	al,1
020C:22DC			loc_238:
020C:22DC  B4 95				mov	ah,95h
020C:22DE  01 00				add	[bx+si],ax
020C:22E0  00 03				add	[bp+di],al
020C:22E2  FF 9F 1EEE				call	data_175[bx]		;*(020C:1EEE=0)
020C:22E6  01 00				add	[bx+si],ax
020C:22E8  03 00				add	ax,[bx+si]
020C:22EA  01 00				add	[bx+si],ax
020C:22EC  01 01				add	[bx+di],ax
020C:22EE  01 00				add	[bx+si],ax
020C:22F0  01 00				add	[bx+si],ax
020C:22F2  00 00				add	[bx+si],al
020C:22F4  FF					db	0FFh
020C:22F5  FF 00				inc	word ptr [bx+si]
020C:22F7  0009[00]				db	9 dup (0)
020C:2300  0000			data_202	dw	0
020C:2302  04 31				add	al,31h			; '1'
020C:2304  0B A7 0000				or	sp,data_1[bx]		; (020C:0000=1828h)
020C:2308  00 00				add	[bx+si],al
020C:230A  00 E7				add	bh,ah
020C:230C  0C A7				or	al,0A7h
020C:230E  0058[00]				db	88 dup (0)
020C:2366  01 00				add	[bx+si],ax
020C:2368  00 00				add	[bx+si],al
020C:236A  01 00				add	[bx+si],ax
020C:236C  0007[00]				db	7 dup (0)
020C:2373  1E					push	ds
020C:2374  06					push	es
020C:2375  0E					push	cs
020C:2376  1F					pop	ds
020C:2377  8B 16 22BD				mov	dx,data_200		; (020C:22BD=0)
020C:237B  A1 22B1				mov	ax,data_197		; (020C:22B1=444Eh)
020C:237E  8B 1E 22AD				mov	bx,data_196		; (020C:22AD=4D4Fh)
020C:2382  8B 0E 22B3				mov	cx,data_198		; (020C:22B3=432Eh)
020C:2386  50					push	ax
020C:2387  53					push	bx
020C:2388  51					push	cx
020C:2389  8C DB				mov	bx,ds
020C:238B  8E C3				mov	es,bx
020C:238D  8B 1E 0593				mov	bx,word ptr ds:[593h]	; (020C:0593=3)
020C:2391  B4 4A				mov	ah,4Ah
020C:2393  CD 21				int	21h			; DOS Services  ah=function 4Ah
										;  change memory allocation
										;   bx=bytes/16, es=mem segment
020C:2395  80 3E 02B0 01			cmp	byte ptr ds:[2B0h],1	; (020C:02B0=1Dh)
020C:239A  75 33				jne	loc_239			; Jump if not equal
020C:239C  83 3E 0256 00			cmp	data_78,0		; (020C:0256=0)
020C:23A1  74 2C				je	loc_239			; Jump if equal
020C:23A3  BB 0007				mov	bx,7
020C:23A6  B4 48				mov	ah,48h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 86

020C:23A8  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020C:23AA  72 23				jc	loc_239			; Jump if carry Set
020C:23AC  8E C0				mov	es,ax
020C:23AE  33 FF				xor	di,di			; Zero register
020C:23B0  33 F6				xor	si,si			; Zero register
020C:23B2  1E					push	ds
020C:23B3  8E 1E 0256				mov	ds,data_78		; (020C:0256=0)
020C:23B7  B9 0021				mov	cx,21h
020C:23BA  83 C1 40				add	cx,40h
020C:23BD  FC					cld				; Clear direction
020C:23BE  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:23C0  1F					pop	ds
020C:23C1  8C C1				mov	cx,es
020C:23C3  8E 06 0256				mov	es,data_78		; (020C:0256=0)
020C:23C7  B4 49				mov	ah,49h
020C:23C9  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020C:23CB  89 0E 0256				mov	data_78,cx		; (020C:0256=0)
020C:23CF			loc_239:
020C:23CF  59					pop	cx
020C:23D0  5B					pop	bx
020C:23D1  5D					pop	bp
020C:23D2  B4 48				mov	ah,48h
020C:23D4  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020C:23D6  72 41				jc	loc_240			; Jump if carry Set
020C:23D8  A3 0458				mov	word ptr ds:[458h],ax	; (020C:0458=0C40Eh)
020C:23DB  A3 002C				mov	data_24,ax		; (020C:002C=3A39h)
020C:23DE  8E C0				mov	es,ax
020C:23E0  80 3E 02B0 01			cmp	byte ptr ds:[2B0h],1	; (020C:02B0=1Dh)
020C:23E5  75 34				jne	loc_241			; Jump if not equal
020C:23E7  53					push	bx
020C:23E8  BB 0000				mov	bx,0
020C:23EB  C4					db	0C4h
020C:23EC  C4 54 0F				les	dx,dword ptr [si+0Fh]	; Load 32 bit ptr
020C:23EF  8B C3				mov	ax,bx
020C:23F1  5B					pop	bx
020C:23F2  3D 0000				cmp	ax,0
020C:23F5  74 24				je	loc_241			; Jump if equal
020C:23F7  03 D8				add	bx,ax
020C:23F9  B4 49				mov	ah,49h
020C:23FB  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020C:23FD  B4 48				mov	ah,48h
020C:23FF  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020C:2401  72 75				jc	loc_244			; Jump if carry Set
020C:2403  A3 0458				mov	word ptr ds:[458h],ax	; (020C:0458=0C40Eh)
020C:2406  A3 002C				mov	data_24,ax		; (020C:002C=3A39h)
020C:2409  8E C0				mov	es,ax
020C:240B  89 1E 22AD				mov	data_196,bx		; (020C:22AD=4D4Fh)
020C:240F  53					push	bx
020C:2410  C4					db	0C4h
020C:2411  C4 54 0F				les	dx,dword ptr [si+0Fh]	; Load 32 bit ptr
020C:2414  58					pop	ax
020C:2415  3B D8				cmp	bx,ax
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 87

020C:2417  76 0D				jbe	loc_242			; Jump if below or =
020C:2419			loc_240:
020C:2419  EB 5D				jmp	short loc_244		; (2478)
020C:241B			loc_241:
020C:241B  1E					push	ds
020C:241C  8E DD				mov	ds,bp
020C:241E  33 F6				xor	si,si			; Zero register
020C:2420  8B FE				mov	di,si
020C:2422  FC					cld				; Clear direction
020C:2423  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:2425  1F					pop	ds
020C:2426			loc_242:
020C:2426  80 3E 228A 00			cmp	data_194,0		; (020C:228A=0)
020C:242B  75 06				jne	loc_243			; Jump if not equal
020C:242D  8E C5				mov	es,bp
020C:242F  B4 49				mov	ah,49h
020C:2431  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020C:2433			loc_243:
020C:2433  C6 06 029E 01			mov	data_84,1		; (020C:029E=0)
020C:2438  06					push	es
020C:2439  BE 2760				mov	si,2760h
020C:243C  BF 0000				mov	di,0
020C:243F  B9 A4AD				mov	cx,0A4ADh
020C:2442  BB FFFF				mov	bx,0FFFFh
020C:2445  B4 48				mov	ah,48h
020C:2447  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020C:2449  3B DA				cmp	bx,dx
020C:244B  72 2B				jb	loc_244			; Jump if below
020C:244D  B4 48				mov	ah,48h
020C:244F  CD 21				int	21h			; DOS Services  ah=function 48h
										;  allocate memory, bx=bytes/16
020C:2451  72 25				jc	loc_244			; Jump if carry Set
020C:2453  50					push	ax
020C:2454  03 C3				add	ax,bx
020C:2456  2B C2				sub	ax,dx
020C:2458  A3 029C				mov	data_83,ax		; (020C:029C=0)
020C:245B  8E C0				mov	es,ax
020C:245D  58					pop	ax
020C:245E  03 F1				add	si,cx
020C:2460  4E					dec	si
020C:2461  03 F9				add	di,cx
020C:2463  4F					dec	di
020C:2464  FD					std				; Set direction flag
020C:2465  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:2467  FC					cld				; Clear direction
020C:2468  8E C0				mov	es,ax
020C:246A  B4 49				mov	ah,49h
020C:246C  CD 21				int	21h			; DOS Services  ah=function 49h
										;  release memory block, es=seg
020C:246E  C6 06 0330 00			mov	byte ptr ds:[330h],0	; (020C:0330=61h)
020C:2473  07					pop	es
020C:2474  1F					pop	ds
020C:2475  E9 FD47				jmp	loc_232			; (21BF)
020C:2478			loc_244:
020C:2478  E9 1DC0				jmp	loc_517			; (423B)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 88

020C:247B  0019[00]				db	25 dup (0)
020C:2494  33 03				xor	ax,[bp+di]
020C:2496  82 03 CE				add	byte ptr [bp+di],0CEh
020C:2499  04 80				add	al,80h
020C:249B  00 10				add	[bx+si],dl
020C:249D  04 5C				add	al,5Ch			; '\'
020C:249F  00 10				add	[bx+si],dl
020C:24A1  04 6C				add	al,6Ch			; 'l'
020C:24A3  00 10				add	[bx+si],dl
020C:24A5  04 93				add	al,93h
020C:24A7  01 10				add	[bx+si],dx
020C:24A9  04 00				add	al,0
020C:24AB  10 2F				adc	[bx],ch
020C:24AD  5C					pop	sp
020C:24AE  DC					db	0DCh
020C:24AF  01 10				add	[bx+si],dx
020C:24B1  04 6B				add	al,6Bh			; 'k'
020C:24B3  01 10				add	[bx+si],dx
020C:24B5  04 00				add	al,0
020C:24B7  00 13				add	[bp+di],dl
020C:24B9  05 0000				add	ax,0
020C:24BC  43					inc	bx
020C:24BD  3A 5C 44				cmp	bl,[si+44h]
020C:24C0  4F					dec	di
020C:24C1  43					inc	bx
020C:24C2  55					push	bp
020C:24C3  4D					dec	bp
020C:24C4  45					inc	bp
020C:24C5  7E 31				jle	loc_245			; Jump if < or =
020C:24C7  5C					pop	sp
020C:24C8  39 33				cmp	[bp+di],si
020C:24CA  33 35				xor	si,[di]
020C:24CC  7E 31				jle	loc_246			; Jump if < or =
020C:24CE  5C					pop	sp
020C:24CF  30 30				xor	[bx+si],dh
020C:24D1  31 36 317E				xor	data_252,si		; (020C:317E=4F4Ch)
020C:24D5  5C					pop	sp
020C:24D6  53					push	bx
020C:24D7  52					push	dx
020C:24D8  2E					db	2Eh
020C:24D9  45					inc	bp
020C:24DA  58					pop	ax
020C:24DB  45					inc	bp
020C:24DC  0026[00]				db	38 dup (0)
020C:2502  0000			data_207	dw	0
020C:2504  00					db	0
020C:2505  00					db	0
020C:2506  00					db	0
020C:2507  00					db	0
020C:2508  00					db	0
020C:2509  00					db	0
020C:250A  00					db	0
020C:250B  00					db	0
020C:250C  00					db	0
020C:250D  00					db	0
020C:250E  00					db	0
020C:250F  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 89

020C:2510  00					db	0
020C:2511  00					db	0
020C:2512  00					db	0
020C:2513  00					db	0
020C:2514  00					db	0
020C:2515  00					db	0
020C:2516  00					db	0
020C:2517  00					db	0
020C:2518  00					db	0
020C:2519  00					db	0
020C:251A  00					db	0
020C:251B  00					db	0
020C:251C  00					db	0
020C:251D  00					db	0
020C:251E  00					db	0
020C:251F  00					db	0
020C:2520  00					db	0
020C:2521  00					db	0
020C:2522  00					db	0
020C:2523  00					db	0
020C:2524  00					db	0
020C:2525  00					db	0
020C:2526  00					db	0
020C:2527  00					db	0
020C:2528  00					db	0
020C:2529  00					db	0
020C:252A  00					db	0
020C:252B  00					db	0
020C:252C  00					db	0
020C:252D  00					db	0
020C:252E  00					db	0
020C:252F  00					db	0
020C:2530  00					db	0
020C:2531  00					db	0
020C:2532  00					db	0
020C:2533  00					db	0
020C:2534  00					db	0
020C:2535  00					db	0
020C:2536  00					db	0
020C:2537  00					db	0
020C:2538  00					db	0
020C:2539  00					db	0
020C:253A  00					db	0
020C:253B  00					db	0
020C:253C  00					db	0
020C:253D  00					db	0
020C:253E  00					db	0
020C:253F  00					db	0
020C:2540  00					db	0
020C:2541  00					db	0
020C:2542  00					db	0
020C:2543  00					db	0
020C:2544  00					db	0
020C:2545  00					db	0
020C:2546  00					db	0
020C:2547  00					db	0
020C:2548  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 90

020C:2549  00					db	0
020C:254A  00					db	0
020C:254B  00					db	0
020C:254C  00					db	0
020C:254D  00					db	0
020C:254E  00					db	0
020C:254F  00					db	0
020C:2550  00					db	0
020C:2551  00					db	0
020C:2552  00					db	0
020C:2553  00					db	0
020C:2554  00					db	0
020C:2555  00					db	0
020C:2556  00					db	0
020C:2557  00					db	0
020C:2558  00					db	0
020C:2559  00					db	0
020C:255A  00					db	0
020C:255B  00					db	0
020C:255C  00					db	0
020C:255D  00					db	0
020C:255E  00					db	0
020C:255F  00					db	0
020C:2560  00					db	0
020C:2561  00					db	0
020C:2562  00					db	0
020C:2563  00					db	0
020C:2564  00					db	0
020C:2565  00					db	0
020C:2566  00					db	0
020C:2567  00					db	0
020C:2568  00					db	0
020C:2569  00					db	0
020C:256A  00					db	0
020C:256B  00					db	0
020C:256C  00					db	0
020C:256D  00					db	0
020C:256E  00					db	0
020C:256F  00					db	0
020C:2570  00					db	0
020C:2571  00					db	0
020C:2572  00					db	0
020C:2573  00					db	0
020C:2574  00					db	0
020C:2575  00					db	0
020C:2576  00					db	0
020C:2577  00					db	0
020C:2578  00					db	0
020C:2579  00					db	0
020C:257A  00					db	0
020C:257B  00					db	0
020C:257C  00					db	0
020C:257D  00					db	0
020C:257E  00					db	0
020C:257F  00					db	0
020C:2580  00					db	0
020C:2581  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 91

020C:2582  00					db	0
020C:2583  00					db	0
020C:2584  00					db	0
020C:2585  00					db	0
020C:2586  00					db	0
020C:2587  00					db	0
020C:2588  00					db	0
020C:2589  00					db	0
020C:258A  00					db	0
020C:258B  00					db	0
020C:258C  00					db	0
020C:258D  00					db	0
020C:258E  00					db	0
020C:258F  00					db	0
020C:2590  00					db	0
020C:2591  00					db	0
020C:2592  00					db	0
020C:2593  00					db	0
020C:2594  00					db	0
020C:2595  00					db	0
020C:2596  00					db	0
020C:2597  00					db	0
020C:2598  00					db	0
020C:2599  00					db	0
020C:259A  00					db	0
020C:259B  00					db	0
020C:259C  00					db	0
020C:259D  00					db	0
020C:259E  00					db	0
020C:259F  00					db	0
020C:25A0  00					db	0
020C:25A1  00					db	0
020C:25A2  00					db	0
020C:25A3  00					db	0
020C:25A4  00					db	0
020C:25A5  00					db	0
020C:25A6  00					db	0
020C:25A7  00					db	0
020C:25A8  00					db	0
020C:25A9  00					db	0
020C:25AA  00					db	0
020C:25AB  00					db	0
020C:25AC  00					db	0
020C:25AD  00					db	0
020C:25AE  00					db	0
020C:25AF  00					db	0
020C:25B0  00					db	0
020C:25B1  00					db	0
020C:25B2  00					db	0
020C:25B3  00					db	0
020C:25B4  00					db	0
020C:25B5  00					db	0
020C:25B6  00					db	0
020C:25B7  00					db	0
020C:25B8  00					db	0
020C:25B9  00					db	0
020C:25BA  00					db	0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 92

020C:25BB  00					db	0
020C:25BC  00					db	0
020C:25BD  00					db	0
020C:25BE  00					db	0
020C:25BF  00					db	0
020C:25C0  00					db	0
020C:25C1  00					db	0
020C:25C2  00					db	0
020C:25C3  00					db	0
020C:25C4  00					db	0
020C:25C5  00					db	0
020C:25C6  00					db	0
020C:25C7  00					db	0
020C:25C8  00					db	0
020C:25C9  00					db	0
020C:25CA  00 00				add	[bx+si],al
020C:25CC  00 66 00				add	[bp],ah
020C:25CF  DB					db	0DBh
020C:25D0  02 46 0B				add	al,[bp+0Bh]
020C:25D3  B5 00				mov	ch,0
020C:25D5  0042[00]				db	66 dup (0)
020C:2617  63					db	63h
020C:2618  0D 0094				or	ax,94h
020C:261B  00 00				add	[bx+si],al
020C:261D  00 E7				add	bh,ah
020C:261F  0C C5				or	al,0C5h
020C:2621  22 0C				and	cl,[si]
020C:2623  94					xchg	sp,ax
020C:2624  EA 1222:EA22		;*		jmp	far ptr loc_686		;*(1222:EA22)
020C:2624  EA					db	0EAh
020C:2625  EA22 1222				dw	0EA22h, 1222h
							                        ;* No entry point to code
020C:2629  07					pop	es
020C:262A  00 07				add	[bx],al
020C:262C  DB					db	0DBh
020C:262D  02 01				add	al,[bx+di]
020C:262F  00 DB				add	bl,bl
020C:2631  02 47 01				add	al,[bx+1]
020C:2634  DB					db	0DBh

020C:2635			locloop_248:
020C:2635  02 24				add	ah,[si]
020C:2637  25 95B4				and	ax,95B4h
020C:263A  00 3E 9AB3				add	byte ptr ds:[9AB3h],bh	; (020C:9AB3=26h)
020C:263E  10 04				adc	[si],al
020C:2640  00 00				add	[bx+si],al
020C:2642  00 01				add	[bx+di],al
020C:2644  00 01				add	[bx+di],al
020C:2646  81 00 0410				add	word ptr [bx+si],410h
020C:264A  10 04				adc	[si],al
020C:264C  DE					db	0DEh
020C:264D  01 10				add	[bx+si],dx
020C:264F  04 46				add	al,46h			; 'F'
020C:2651  32 00				xor	al,[bx+si]
020C:2653  00 00				add	[bx+si],al
020C:2655  41					inc	cx
020C:2656  52					push	dx
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 93

020C:2657  49					dec	cx
020C:2658  46					inc	si
020C:2659  59					pop	cx
020C:265A  4E					dec	si
020C:265B  0C 41				or	al,41h			; 'A'
020C:265D  62					db	62h
020C:265E  6F					db	6Fh
020C:265F  72 74				jc	loc_260			; Jump if carry Set
020C:2661  20 28				and	[bx+si],ch
020C:2663  E1 E2		;*		loopz	locloop_250		;*Loop if zf=1, cx>0

020C:2663  E1 E2				db	0E1h,0E2h
020C:2665  AE					scasb				; Scan es:[di] for al
020C:2666  AF					scasw				; Scan es:[di] for ax
020C:2667  29 10				sub	[bx+si],dx
020C:2669  2C 20				sub	al,20h			; ' '
020C:266B			loc_251:
020C:266B  52					push	dx
020C:266C  65					db	65h
020C:266D  74 72				jz	loc_261			; Jump if zero
020C:266F  79 20				jns	loc_254			; Jump if not sign
020C:2671  28 AF A2AE				sub	byte ptr ds:[0A2AEh][bx],ch	; (020C:A2AE=0EBh)
020C:2675  E2 AE		;*		loop	locloop_247		;*Loop if cx > 0

020C:2675  E2 AE				db	0E2h,0AEh
020C:2677  E0 29				loopnz	locloop_256		; Loop if zf=0, cx>0

020C:2679  12 2C				adc	ch,[si]
020C:267B  20 49 67				and	[bx+di+67h],cl
020C:267E  6E					db	6Eh
020C:267F  6F					db	6Fh
020C:2680  6572 2820		data_209	dw	6572h, 2820h
020C:2684  AF					scasw				; Scan es:[di] for ax
020C:2685  E0 AE				loopnz	locloop_248		; Loop if zf=0, cx>0

020C:2687  AF					scasw				; Scan es:[di] for ax
020C:2688  E3 E1				jcxz	loc_251			; Jump if cx=0
020C:268A  AA					stosb				; Store al to es:[di]
020C:268B  29 0E 202C				sub	word ptr ds:[202Ch],cx	; (020C:202C=0)
020C:268F  46					inc	si
020C:2690  61					db	61h
020C:2691			loc_254:
020C:2691  69					db	69h
020C:2692  6C					db	6Ch
020C:2693  20 28				and	[bx+si],ch
020C:2695  E1 A1		;*		loopz	locloop_249		;*Loop if zf=1, cx>0

020C:2695  E1 A1				db	0E1h,0A1h
020C:2697  E0 AE		;*		loopnz	locloop_250		;*Loop if zf=0, cx>0

020C:2697  E0 AE				db	0E0h,0AEh
020C:2699  E1 29				loopz	locloop_259		; Loop if zf=1, cx>0

020C:269B  01 3F				add	[bx],di
020C:269D  07					pop	es
020C:269E  E7 E2				out	0E2h,ax			; port 0E2h ??I/O Non-standard
020C:26A0  A5					movsw				; Mov [si] to es:[di]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 94

020C:26A1  AD					lodsw				; String [si] to ax

020C:26A2			locloop_256:
020C:26A2  A8 A5				test	al,0A5h

020C:26A4			locloop_258:
020C:26A4  00 07				add	[bx],al
020C:26A6  A7					cmpsw				; Cmp [si] to es:[di]
020C:26A7  A0 A8AF				mov	al,byte ptr ds:[0A8AFh]	; (020C:A8AF=44h)
020C:26AA  E1 EC		;*		loopz	locloop_255		;*Loop if zf=1, cx>0

020C:26AA  E1 EC				db	0E1h,0ECh
020C:26AC  00 0D				add	[di],cl
020C:26AE  20 25				and	[di],ah
020C:26B0  31 20				xor	[bx+si],sp
020C:26B2  A4					movsb				; Mov [si] to es:[di]
020C:26B3  A8 E1				test	al,0E1h
020C:26B5  AA					stosb				; Store al to es:[di]
020C:26B6  20 25				and	[di],ah
020C:26B8  32 0D				xor	cl,[di]
020C:26BA  0A 13				or	dl,[bp+di]
020C:26BC  20 25				and	[di],ah
020C:26BE  31 20				xor	[bx+si],sp
020C:26C0  E3 E1		;*		jcxz	loc_257			;*Jump if cx=0
020C:26C0  E3 E1				db	0E3h,0E1h
020C:26C2  E2 E0				loop	locloop_258		; Loop if cx > 0


020C:26C4			locloop_259:
020C:26C4  AE					scasb				; Scan es:[di] for al
020C:26C5  A9 E2E1				test	ax,0E2E1h
020C:26C8  A2 20AE				mov	byte ptr data_186,al	; (020C:20AE=20h)
020C:26CB  25 0D32				and	ax,0D32h
020C:26CE  0A 27				or	ah,[bx]
020C:26D0  82 E1 E2				and	cl,0E2h
020C:26D3  A0 ECA2				mov	al,byte ptr ds:[0ECA2h]	; (020C:ECA2=72h)
020C:26D6  E2 A5		;*		loop	locloop_252		;*Loop if cx > 0

020C:26D6  E2 A5				db	0E2h,0A5h
020C:26D8  20 E2				and	dl,ah
020C:26DA  AE					scasb				; Scan es:[di] for al
020C:26DB  AC					lodsb				; String [si] to al
020C:26DC  20 25				and	[di],ah
020C:26DE  31 2C				xor	[si],bp
020C:26E0  20 E1				and	cl,ah
020C:26E2  A5					movsw				; Mov [si] to es:[di]
020C:26E3  E0 A8		;*		loopnz	locloop_253		;*Loop if zf=0, cx>0

020C:26E3  E0 A8				db	0E0h,0A8h

020C:26E5			locloop_262:
020C:26E5  A9 EBAD				test	ax,0EBADh
020C:26E8  A9 AD20				test	ax,0AD20h
020C:26EB  AE					scasb				; Scan es:[di] for al
020C:26EC  AC					lodsb				; String [si] to al
020C:26ED  A5					movsw				; Mov [si] to es:[di]
020C:26EE  E0 20				loopnz	locloop_264		; Loop if zf=0, cx>0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 95


020C:26F0  25 2D32				and	ax,2D32h
020C:26F3  25 0D33				and	ax,0D33h
020C:26F6  0A 37				or	dh,[bx]

020C:26F8			locloop_263:
020C:26F8  88 E1				mov	cl,ah
020C:26FA  AF					scasw				; Scan es:[di] for ax
020C:26FB  AE					scasb				; Scan es:[di] for al
020C:26FC  E0 E7				loopnz	locloop_262		; Loop if zf=0, cx>0

020C:26FE  A5					movsw				; Mov [si] to es:[di]
020C:26FF  AD					lodsw				; String [si] to ax
020C:2700  A0 E220				mov	al,byte ptr ds:[0E220h]	; (020C:E220=2)
020C:2703  A0 ABA1				mov	al,byte ptr ds:[0ABA1h]	; (020C:ABA1=2Ch)
020C:2706  A8 E6				test	al,0E6h
020C:2708  A0 E020				mov	al,byte ptr ds:[0E020h]	; (020C:E020=83h)
020C:270B  A0 ACA7				mov	al,byte ptr ds:[0ACA7h]	; (020C:ACA7=9Ah)
020C:270E  A5					movsw				; Mov [si] to es:[di]
020C:270F  E9 ADA5				jmp	$-5258h
							                        ;* No entry point to code
020C:2712  A8 EF				test	al,0EFh
020C:2714  20 E4				and	ah,ah
020C:2716  A0 ABA9				mov	al,byte ptr ds:[0ABA9h]	; (020C:ABA9=21h)
020C:2719  AE					scasb				; Scan es:[di] for al
020C:271A  A2 2820				mov	data_211,al		; (020C:2820=0ADh)
020C:271D  46					inc	si
020C:271E  41					inc	cx
020C:271F  54					push	sp
020C:2720  29 20				sub	[bx+si],sp
020C:2722  AD					lodsw				; String [si] to ax
020C:2723  A0 A420				mov	al,byte ptr ds:[0A420h]	; (020C:A420=21h)
020C:2726  A8 E1				test	al,0E1h
020C:2728  AA					stosb				; Store al to es:[di]
020C:2729  A5					movsw				; Mov [si] to es:[di]
020C:272A  20 25				and	[di],ah
020C:272C  31 0D				xor	[di],cx
020C:272E  0A 1A				or	bl,[bp+si]
020C:2730  8D A5 E0AF				lea	sp,cs:[0E0AFh][di]	; Load effective addr
020C:2734  A0 A8A2				mov	al,byte ptr ds:[0A8A2h]	; (020C:A8A2=45h)
020C:2737  AB					stosw				; Store ax to es:[di]
020C:2738  EC					in	al,dx			; port 0FF61h ??I/O Non-standard
020C:2739  AD					lodsw				; String [si] to ax
020C:273A  EB A9				jmp	short locloop_262	; (26E5)
020C:273C  20 43 4F				and	[bp+di+4Fh],al
020C:273F  4D					dec	bp
020C:2740  4D					dec	bp
020C:2741  41					inc	cx
020C:2742  4E					dec	si
020C:2743  44					inc	sp
020C:2744  2E					db	2Eh
020C:2745  43					inc	bx
020C:2746  4F					dec	di
020C:2747  4D					dec	bp
020C:2748  0D 220A				or	ax,220Ah
020C:274B  82 E1 E2				and	cl,0E2h
020C:274E  A0 ECA2				mov	al,byte ptr ds:[0ECA2h]	; (020C:ECA2=72h)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 96

020C:2751  E2 A5				loop	locloop_263		; Loop if cx > 0

020C:2753  20 A4 E1A8				and	byte ptr ds:[0E1A8h][si],ah	; (020C:E1A8=96h)
020C:2757  AA					stosb				; Store al to es:[di]
020C:2758  20 E1				and	cl,ah
020C:275A  20 25				and	[di],ah
020C:275C  31 20				xor	[bx+si],sp
020C:275E  A2 A420				mov	byte ptr ds:[0A420h],al	; (020C:A420=21h)
020C:2761  A8 E1				test	al,0E1h
020C:2763  AA					stosb				; Store al to es:[di]
020C:2764  AE					scasb				; Scan es:[di] for al
020C:2765  A2 A4AE				mov	byte ptr ds:[0A4AEh],al	; (020C:A4AE=29h)
020C:2768  20 25				and	[di],ah
020C:276A  32 0D				xor	cl,[di]
020C:276C			loc_270:
020C:276C  0A 1A				or	bl,[bp+si]
020C:276E  8D A0 ACA6				lea	sp,cs:[0ACA6h][bx+si]	; Load effective addr
020C:2772  A8 E2				test	al,0E2h
020C:2774  A5					movsw				; Mov [si] to es:[di]
020C:2775  20 AB A1EE				and	[bp+di-5E12h],ch
020C:2779  E3 EE		;*		jcxz	loc_269			;*Jump if cx=0
020C:2779  E3 EE				db	0E3h,0EEh
020C:277B  20 AA A0AB				and	[bp+si-5F55h],ch
020C:277F  A2 E8A8				mov	byte ptr ds:[0E8A8h],al	; (020C:E8A8=96h)
020C:2782  E3 2E				jcxz	loc_273			; Jump if cx=0
020C:2784  2E					db	2Eh
020C:2785  2E					db	2Eh
020C:2786  0D 390A				or	ax,390Ah
020C:2789  0D 8F0A				or	ax,8F0Ah
020C:278C  E0 A5		;*		loopnz	locloop_266		;*Loop if zf=0, cx>0

020C:278C  E0 A5				db	0E0h,0A5h
020C:278E  AA					stosb				; Store al to es:[di]
020C:278F  E0 A0		;*		loopnz	locloop_265		;*Loop if zf=0, cx>0

020C:278F  E0 A0				db	0E0h,0A0h
020C:2791  E2 A8		;*		loop	locloop_267		;*Loop if cx > 0

020C:2791  E2 A8				db	0E2h,0A8h
020C:2793  E2 EC		;*		loop	locloop_271		;*Loop if cx > 0

020C:2793  E2 EC				db	0E2h,0ECh
020C:2795  20 A2 AFEB				and	[bp+si-5015h],ah
020C:2799  AE					scasb				; Scan es:[di] for al
020C:279A  AB					stosw				; Store ax to es:[di]
020C:279B  AD					lodsw				; String [si] to ax
020C:279C  A5					movsw				; Mov [si] to es:[di]
020C:279D  AD					lodsw				; String [si] to ax
020C:279E  A8 A5				test	al,0A5h
020C:27A0  20 AF AAA0				and	byte ptr ds:[0AAA0h][bx],ch	; (020C:AAA0=83h)
020C:27A4  A5					movsw				; Mov [si] to es:[di]
020C:27A5  E2 AD		;*		loop	locloop_268		;*Loop if cx > 0

020C:27A5  E2 AD				db	0E2h,0ADh
020C:27A7  AE					scasb				; Scan es:[di] for al
020C:27A8  A3 20AE				mov	data_186,ax		; (020C:20AE=2020h)
020C:27AB  A7					cmpsw				; Cmp [si] to es:[di]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 97

020C:27AC  A0 A0A4				mov	al,byte ptr ds:[0A0A4h]	; (020C:A0A4=0)
020C:27AF  AD					lodsw				; String [si] to ax
020C:27B0  A8 EF				test	al,0EFh
020C:27B2			loc_273:
020C:27B2  20 5B 59				and	[bp+di+59h],bl
020C:27B5  28 A4 29A0				sub	data_212[si],ah		; (020C:29A0=0AAh)

020C:27B9			locloop_274:
020C:27B9  2F					das				; Decimal adjust
020C:27BA  4E					dec	si
020C:27BB  28 AD E2A5				sub	byte ptr ds:[0E2A5h][di],ch	; (020C:E2A5=2Dh)
020C:27BF  29 5D 3F				sub	[di+3Fh],bx
020C:27C2  19 8D 20A5				sbb	data_184[di],cx		; (020C:20A5=2020h)
020C:27C6  E3 A4				jcxz	loc_270			; Jump if cx=0
020C:27C8  A0 E2A5				mov	al,byte ptr ds:[0E2A5h]	; (020C:E2A5=2Dh)
020C:27CB  E1 EF		;*		loopz	locloop_275		;*Loop if zf=1, cx>0

020C:27CB  E1 EF				db	0E1h,0EFh
020C:27CD  20 A2 AFEB				and	[bp+si-5015h],ah
020C:27D1  AE					scasb				; Scan es:[di] for al

020C:27D2			locloop_277:
020C:27D2  AB					stosw				; Store ax to es:[di]
020C:27D3  AD					lodsw				; String [si] to ax
020C:27D4  A8 E2				test	al,0E2h
020C:27D6  EC					in	al,dx			; port 0FF61h ??I/O Non-standard
020C:27D7  20 25				and	[di],ah
020C:27D9  31 0D				xor	[di],cx

020C:27DB			locloop_278:
020C:27DB  0A 14				or	dl,[si]

020C:27DD			locloop_279:
020C:27DD  8E					db	8Eh
020C:27DE  E8 A1A8				call	$-5E55h
020C:27E1  AA					stosb				; Store al to es:[di]
020C:27E2  A0 A220				mov	al,byte ptr ds:[0A220h]	; (020C:A220=0FCh)
020C:27E5  20 45 58				and	[di+58h],al

020C:27E8			locloop_280:
020C:27E8  45					inc	bp
020C:27E9  2D A0E4				sub	ax,0A0E4h
020C:27EC  A9 A5AB				test	ax,0A5ABh
020C:27EF  0D 210A				or	ax,210Ah
020C:27F2  8F					db	8Fh
020C:27F3  E0 AE		;*		loopnz	locloop_272		;*Loop if zf=0, cx>0

020C:27F3  E0 AE				db	0E0h,0AEh
020C:27F5  A3 A0E0				mov	word ptr ds:[0A0E0h],ax	; (020C:A0E0=3033h)
020C:27F8  AC					lodsb				; String [si] to al
020C:27F9  AC					lodsb				; String [si] to al
020C:27FA  A0 AD20				mov	al,byte ptr ds:[0AD20h]	; (020C:AD20=44h)
020C:27FD  A5					movsw				; Mov [si] to es:[di]
020C:27FE  20 E3				and	bl,ah
020C:2800  AC					lodsb				; String [si] to al
020C:2801  A5					movsw				; Mov [si] to es:[di]
020C:2802  E9 A5A0				jmp	$-5A5Dh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 98

020C:2805  E2 E1				loop	locloop_280		; Loop if cx > 0

020C:2807  EF					out	dx,ax			; port 0FF6Fh ??I/O Non-standard
020C:2808			loc_281:
020C:2808  20 A2 AF20				and	[bp+si-50E0h],ah
020C:280C  A0 EFAC				mov	al,byte ptr ds:[0EFACh]	; (020C:EFAC=26h)
020C:280F  E2 A8				loop	locloop_274		; Loop if cx > 0

020C:2811  0D 230A				or	ax,230Ah
020C:2814  0D 8D0A				or	ax,8D0Ah
020C:2817  A5					movsw				; Mov [si] to es:[di]
020C:2818  E2 20				loop	locloop_286		; Loop if cx > 0

020C:281A  E1 A2		;*		loopz	locloop_276		;*Loop if zf=1, cx>0

020C:281A  E1 A2				db	0E1h,0A2h
020C:281C  AE					scasb				; Scan es:[di] for al
020C:281D  A1 A4AE				mov	ax,word ptr ds:[0A4AEh]	; (020C:A4AE=5D29h)
020C:2820  AD			data_211	db	0ADh
020C:2821  EB E5				jmp	short loc_281		; (2808)
							                        ;* No entry point to code
020C:2823  20 A4 E1A5				and	byte ptr ds:[0E1A5h][si],ah	; (020C:E1A5=2Eh)
020C:2827  AA					stosb				; Store al to es:[di]
020C:2828  E0 A8				loopnz	locloop_277		; Loop if zf=0, cx>0

020C:282A  AF					scasw				; Scan es:[di] for ax
020C:282B  E2 AE				loop	locloop_278		; Loop if cx > 0

020C:282D  E0 AE				loopnz	locloop_279		; Loop if zf=0, cx>0


020C:282F			locloop_284:
020C:282F  A2 E420				mov	byte ptr ds:[0E420h],al	; (020C:E420=15h)
020C:2832  A0 ABA9				mov	al,byte ptr ds:[0ABA9h]	; (020C:ABA9=21h)
020C:2835  AE					scasb				; Scan es:[di] for al
020C:2836  A2 AD24				mov	byte ptr ds:[0AD24h],al	; (020C:AD24=94h)
020C:2839  A5					movsw				; Mov [si] to es:[di]

020C:283A			locloop_286:
020C:283A  AF					scasw				; Scan es:[di] for ax
020C:283B  E0 A0				loopnz	locloop_279		; Loop if zf=0, cx>0

020C:283D  A2 ABA8				mov	byte ptr ds:[0ABA8h],al	; (020C:ABA8=0CDh)
020C:2840  EC					in	al,dx			; port 0FF6Fh ??I/O Non-standard
020C:2841  AD					lodsw				; String [si] to ax
020C:2842  A0 20EF				mov	al,data_189		; (020C:20EF=0A0h)
020C:2845  AA					stosb				; Store al to es:[di]
020C:2846  AE					scasb				; Scan es:[di] for al

020C:2847			locloop_287:
020C:2847  AC					lodsb				; String [si] to al
020C:2848  A0 A4AD				mov	al,byte ptr ds:[0A4ADh]	; (020C:A4AD=0)
020C:284B  A0 A820				mov	al,byte ptr ds:[0A820h]	; (020C:A820=24h)
020C:284E  AB					stosw				; Store ax to es:[di]
020C:284F  A8 20				test	al,20h			; ' '
020C:2851  A8 AC				test	al,0ACh
020C:2853  EF					out	dx,ax			; port 0FF6Fh ??I/O Non-standard
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 99

020C:2854  20 E4				and	ah,ah

020C:2856			locloop_288:
020C:2856  A0 ABA9				mov	al,byte ptr ds:[0ABA9h]	; (020C:ABA9=21h)
020C:2859  A0 0A0D				mov	al,byte ptr ds:[0A0Dh]	; (020C:0A0D=0)
020C:285C  0C 8D				or	al,8Dh
020C:285E  A5					movsw				; Mov [si] to es:[di]
020C:285F  E2 20				loop	locloop_291		; Loop if cx > 0

020C:2861  A4					movsb				; Mov [si] to es:[di]
020C:2862  AE					scasb				; Scan es:[di] for al
020C:2863  E1 E2				loopz	locloop_287		; Loop if zf=1, cx>0

020C:2865  E3 AF		;*		jcxz	loc_282			;*Jump if cx=0
020C:2865  E3 AF				db	0E3h,0AFh
020C:2867  A0 1D20				mov	al,data_168		; (020C:1D20=0)
020C:286A  0D 8E0A				or	ax,8E0Ah
020C:286D  E8 A1A8				call	$-5E55h
020C:2870  AA					stosb				; Store al to es:[di]
020C:2871  A0 AF20				mov	al,byte ptr ds:[0AF20h]	; (020C:AF20=3Ch)
020C:2874  E0 A8		;*		loopnz	locloop_283		;*Loop if zf=0, cx>0

020C:2874  E0 A8				db	0E0h,0A8h
020C:2876  20 A2 A4EB				and	[bp+si-5B15h],ah
020C:287A  A5					movsw				; Mov [si] to es:[di]
020C:287B  AB					stosw				; Store ax to es:[di]
020C:287C  A5					movsw				; Mov [si] to es:[di]

020C:287D			locloop_289:
020C:287D  AD					lodsw				; String [si] to ax

020C:287E			locloop_290:
020C:287E  A8 A8				test	al,0A8h
020C:2880  20 AF ACA0				and	byte ptr ds:[0ACA0h][bx],ch	; (020C:ACA0=43h)
020C:2884  EF					out	dx,ax			; port 0FF6Fh ??I/O Non-standard
020C:2885  E2 A8				loop	locloop_284		; Loop if cx > 0

020C:2887  39 0D				cmp	[di],cx
020C:2889  0A 8D 20A5				or	cl,byte ptr data_184[di]	; (020C:20A5=20h)
020C:288D  E3 A4		;*		jcxz	loc_285			;*Jump if cx=0
020C:288D  E3 A4				db	0E3h,0A4h
020C:288F  A0 E2A5				mov	al,byte ptr ds:[0E2A5h]	; (020C:E2A5=2Dh)

020C:2892			locloop_293:
020C:2892  E1 EF		;*		loopz	locloop_292		;*Loop if zf=1, cx>0

020C:2892  E1 EF				db	0E1h,0EFh
020C:2894  20 A7 A3A0				and	byte ptr ds:[0A3A0h][bx],ah	; (020C:A3A0=38h)
020C:2898  E0 E3				loopnz	locloop_289		; Loop if zf=0, cx>0

020C:289A  A7					cmpsw				; Cmp [si] to es:[di]
020C:289B  A8 E2				test	al,0E2h
020C:289D  EC					in	al,dx			; port 0FF6Fh ??I/O Non-standard
020C:289E  20 43 4F				and	[bp+di+4Fh],al
020C:28A1  4D					dec	bp
020C:28A2  4D					dec	bp

           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 100

020C:28A3			locloop_295:
020C:28A3  41					inc	cx

020C:28A4			locloop_296:
020C:28A4  4E					dec	si
020C:28A5  44					inc	sp
020C:28A6  2E					db	2Eh
020C:28A7  43					inc	bx
020C:28A8  4F					dec	di
020C:28A9  4D					dec	bp
020C:28AA  2C 20				sub	al,20h			; ' '
020C:28AC  E1 A8				loopz	locloop_288		; Loop if zf=1, cx>0

020C:28AE  E1 E2				loopz	locloop_293		; Loop if zf=1, cx>0

020C:28B0  A5					movsw				; Mov [si] to es:[di]
020C:28B1  AC					lodsb				; String [si] to al
020C:28B2  A0 AE20				mov	al,byte ptr ds:[0AE20h]	; (020C:AE20=0)

020C:28B5			locloop_297:
020C:28B5  E1 E2		;*		loopz	locloop_294		;*Loop if zf=1, cx>0

020C:28B5  E1 E2				db	0E1h,0E2h
020C:28B7  A0 AEAD				mov	al,byte ptr ds:[0AEADh]	; (020C:AEAD=0D9h)
020C:28BA  A2 A5AB				mov	byte ptr ds:[0A5ABh],al	; (020C:A5AB=0)

020C:28BD			locloop_298:
020C:28BD  AD					lodsw				; String [si] to ax
020C:28BE  A0 0A0D				mov	al,byte ptr ds:[0A0Dh]	; (020C:0A0D=0)
020C:28C1  37					aaa				; Ascii adjust
020C:28C2  0D 8D0A				or	ax,8D0Ah
020C:28C5  A5					movsw				; Mov [si] to es:[di]
020C:28C6  20 E3				and	bl,ah
020C:28C8  A4					movsb				; Mov [si] to es:[di]
020C:28C9  A0 E2A5				mov	al,byte ptr ds:[0E2A5h]	; (020C:E2A5=2Dh)
020C:28CC  E1 EF				loopz	locloop_298		; Loop if zf=1, cx>0


020C:28CE			locloop_300:
020C:28CE  20 A7 AFA0				and	byte ptr ds:[0AFA0h][bx],ah	; (020C:AFA0=0C6h)
020C:28D2  E3 E1				jcxz	locloop_297		; Jump if cx=0

020C:28D4			locloop_301:
020C:28D4  E2 A8				loop	locloop_290		; Loop if cx > 0

020C:28D6  E2 EC		;*		loop	locloop_299		;*Loop if cx > 0

020C:28D6  E2 EC				db	0E2h,0ECh
020C:28D8  20 43 4F				and	[bp+di+4Fh],al
020C:28DB  4D					dec	bp
020C:28DC  4D					dec	bp
020C:28DD  41					inc	cx
020C:28DE  4E					dec	si
020C:28DF  44					inc	sp
020C:28E0  2E					db	2Eh
020C:28E1  43					inc	bx

           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 101

020C:28E2			locloop_302:
020C:28E2  4F					dec	di
020C:28E3  4D					dec	bp
020C:28E4  2C 20				sub	al,20h			; ' '
020C:28E6  A7					cmpsw				; Cmp [si] to es:[di]
020C:28E7  A0 A5A2				mov	al,byte ptr ds:[0A5A2h]	; (020C:A5A2=5Bh)
020C:28EA  E0 E8				loopnz	locloop_301		; Loop if zf=0, cx>0


020C:28EC			locloop_303:
020C:28EC  A5					movsw				; Mov [si] to es:[di]
020C:28ED  AD					lodsw				; String [si] to ax
020C:28EE  A8 A5				test	al,0A5h

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_36		proc	near
020C:28F0  20 E0				and	al,ah
020C:28F2  A0 AEA1				mov	al,byte ptr ds:[0AEA1h]	; (020C:AEA1=0D7h)
020C:28F5  E2 EB				loop	locloop_302		; Loop if cx > 0

020C:28F7			loc_304:
020C:28F7  0D 3B0A				or	ax,3B0Ah
020C:28FA  0D 8F0A				or	ax,8F0Ah
020C:28FD  E0 A5				loopnz	locloop_296		; Loop if zf=0, cx>0

020C:28FF  E0 A2				loopnz	locloop_295		; Loop if zf=0, cx>0

020C:2901  A0 20AD				mov	al,byte ptr ds:[20ADh]	; (020C:20AD=20h)
020C:2904  AF					scasw				; Scan es:[di] for ax
020C:2905  E0 AE				loopnz	locloop_297		; Loop if zf=0, cx>0

020C:2907  E6 A5				out	0A5h,al			; port 0A5h ??I/O Non-standard
020C:2909  E1 E1				loopz	locloop_303		; Loop if zf=1, cx>0

020C:290B  20 A2 E0A5				and	[bp+si-1F5Bh],ah
020C:290F  E5 AD				in	ax,0ADh			; port 0ADh ??I/O Non-standard
020C:2911  A5					movsw				; Mov [si] to es:[di]
020C:2912  A3 20AE				mov	data_186,ax		; (020C:20AE=2020h)
020C:2915  E3 E0				jcxz	loc_304			; Jump if cx=0
020C:2917  AE					scasb				; Scan es:[di] for al
020C:2918  A2 EFAD				mov	byte ptr ds:[0EFADh],al	; (020C:EFAD=8Bh)
020C:291B  2C 20				sub	al,20h			; ' '
020C:291D  AF					scasw				; Scan es:[di] for ax
020C:291E  E0 AE				loopnz	locloop_300		; Loop if zf=0, cx>0

020C:2920  A4					movsb				; Mov [si] to es:[di]
020C:2921  AE					scasb				; Scan es:[di] for al
020C:2922  AB					stosw				; Store ax to es:[di]
020C:2923  A6					cmpsb				; Cmp [si] to es:[di]
020C:2924  A5					movsw				; Mov [si] to es:[di]

020C:2925			locloop_306:
020C:2925  AD					lodsw				; String [si] to ax
020C:2926  A8 A5				test	al,0A5h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 102

020C:2928  20 AD A2A5				and	byte ptr ds:[0A2A5h][di],ch	; (020C:A2A5=52h)
020C:292C  AE					scasb				; Scan es:[di] for al
020C:292D  A7					cmpsw				; Cmp [si] to es:[di]
020C:292E  AC					lodsb				; String [si] to al
020C:292F  AE					scasb				; Scan es:[di] for al
020C:2930  A6					cmpsb				; Cmp [si] to es:[di]
020C:2931  AD					lodsw				; String [si] to ax
020C:2932  AE					scasb				; Scan es:[di] for al
020C:2933  0D 020A				or	ax,20Ah
020C:2936  0D 580A				or	ax,580Ah
020C:2939  0F			;*		pop	cs			; Dangerous-8088 only
020C:2939  0F					db	0Fh
020C:293A  01 00				add	[bx+si],ax
020C:293C  87 0C				xchg	[si],cx
020C:293E  01 00				add	[bx+si],ax
020C:2940  58					pop	ax
020C:2941			loc_307:
020C:2941  0F			;*		pop	cs			; Dangerous-8088 only
020C:2941  0F					db	0Fh
020C:2942  01 00				add	[bx+si],ax
020C:2944  00					db	0

020C:2945			locloop_308:
020C:2945  00 00				add	[bx+si],al
020C:2947  00 89 1001				add	data_132[bx+di],cl	; (020C:1001=75h)
020C:294B  04 17				add	al,17h
020C:294D  8E					db	8Eh
020C:294E  E8 A1A8				call	$-5E55h
020C:2951  AA					stosb				; Store al to es:[di]
020C:2952  A0 A720				mov	al,byte ptr ds:[0A720h]	; (020C:A720=26h)

020C:2955			locloop_310:
020C:2955  A0 A8E9				mov	al,byte ptr ds:[0A8E9h]	; (020C:A8E9=4Ch)
020C:2958  E2 EB				loop	locloop_308		; Loop if cx > 0

020C:295A  20 AE 20E2				and	[bp+20E2h],ch
020C:295E  A7					cmpsw				; Cmp [si] to es:[di]
020C:295F  A0 A8AF				mov	al,byte ptr ds:[0A8AFh]	; (020C:A8AF=44h)

020C:2962			locloop_312:
020C:2962  E1 A8		;*		loopz	locloop_305		;*Loop if zf=1, cx>0

020C:2962  E1 A8				db	0E1h,0A8h
020C:2964  17					pop	ss
020C:2965  8D A5 E0AF				lea	sp,cs:[0E0AFh][di]	; Load effective addr
020C:2969  A0 A8A2				mov	al,byte ptr ds:[0A8A2h]	; (020C:A8A2=45h)

020C:296C			locloop_313:
020C:296C  AB					stosw				; Store ax to es:[di]
020C:296D  EC					in	al,dx			; port 1405h ??I/O Non-standard
020C:296E			loc_314:
020C:296E  AD					lodsw				; String [si] to ax
020C:296F  AE					scasb				; Scan es:[di] for al
020C:2970  A5					movsw				; Mov [si] to es:[di]
020C:2971  20 E3				and	bl,ah
020C:2973  E1 E2		;*		loopz	locloop_311		;*Loop if zf=1, cx>0

           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 103

020C:2973  E1 E2				db	0E1h,0E2h
020C:2975  E0 AE				loopnz	locloop_306		; Loop if zf=0, cx>0

020C:2977  A9 E2E1				test	ax,0E2E1h
020C:297A  A2 0EAE				mov	byte ptr ds:[0EAEh],al	; (020C:0EAE=1)
020C:297D  8D A5 20E2				lea	sp,cs:[20E2h][di]	; Load effective addr
020C:2981  A3 E2AE				mov	word ptr ds:[0E2AEh],ax	; (020C:E2AE=5D8Ah)
020C:2984  AE					scasb				; Scan es:[di] for al
020C:2985  A2 AEAD				mov	byte ptr ds:[0AEADh],al	; (020C:AEAD=0D9h)
020C:2988  E1 E2				loopz	locloop_313		; Loop if zf=1, cx>0

020C:298A  A8 20				test	al,20h			; ' '
020C:298C  8D A5 E0AF				lea	sp,cs:[0E0AFh][di]	; Load effective addr
020C:2990  A0 A8A2				mov	al,byte ptr ds:[0A8A2h]	; (020C:A8A2=45h)
020C:2993  AB					stosw				; Store ax to es:[di]
020C:2994  EC					in	al,dx			; port 1405h ??I/O Non-standard
020C:2995  AD					lodsw				; String [si] to ax
020C:2996  EB A9				jmp	short loc_307		; (2941)
				sub_36		endp

020C:2998  20 A7 AFA0				and	byte ptr ds:[0AFA0h][bx],ah	; (020C:AFA0=0C6h)

020C:299C			locloop_318:
020C:299C  E0 AE		;*		loopnz	locloop_309		;*Loop if zf=0, cx>0

020C:299C  E0 AE				db	0E0h,0AEh
020C:299E  E1 20				loopz	locloop_322		; Loop if zf=1, cx>0


				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_37		proc	near
020C:29A0  AA			data_212	db	0AAh			; Data table (indexed access)
020C:29A1			loc_319:
020C:29A1  20 E3				and	bl,ah
020C:29A3  E1 E2		;*		loopz	locloop_316		;*Loop if zf=1, cx>0

020C:29A3  E1 E2				db	0E1h,0E2h
020C:29A5  E0 AE				loopnz	locloop_310		; Loop if zf=0, cx>0

020C:29A7  A9 E2E1				test	ax,0E2E1h
020C:29AA  A2 0FE3				mov	data_130,al		; (020C:0FE3=33h)
020C:29AD  8E					db	8Eh
020C:29AE  E8 A1A8				call	$-5E55h
020C:29B1  AA					stosb				; Store al to es:[di]
020C:29B2  A0 A220				mov	al,byte ptr ds:[0A220h]	; (020C:A220=0FCh)
020C:29B5  20 A4 ADA0				and	byte ptr ds:[0ADA0h][si],ah	; (020C:ADA0=2Bh)
020C:29B9  AD					lodsw				; String [si] to ax
020C:29BA  EB E5				jmp	short loc_319		; (29A1)
				sub_37		endp

020C:29BC  2B 8D AFA5				sub	cx,word ptr ds:[0AFA5h][di]	; (020C:AFA5=6C6h)

020C:29C0			locloop_322:
020C:29C0  E0 A0				loopnz	locloop_312		; Loop if zf=0, cx>0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 104


020C:29C2  A2 ABA8				mov	byte ptr ds:[0ABA8h],al	; (020C:ABA8=0CDh)
020C:29C5  EC					in	al,dx			; port 0, DMA-1 bas&add ch 0
020C:29C6  AD					lodsw				; String [si] to ax
020C:29C7  EB A5				jmp	short loc_314		; (296E)
							                        ;* No entry point to code
020C:29C9  20 A0 A3E0				and	byte ptr ds:[0A3E0h][bx+si],ah	; (020C:A3E0=0)
020C:29CD  E3 AC		;*		jcxz	locloop_315		;*Jump if cx=0
020C:29CD  E3 AC				db	0E3h,0ACh

020C:29CF			locloop_325:
020C:29CF  A5					movsw				; Mov [si] to es:[di]
020C:29D0  AD					lodsw				; String [si] to ax

020C:29D1			locloop_326:
020C:29D1  E2 EB		;*		loop	locloop_321		;*Loop if cx > 0

020C:29D1  E2 EB				db	0E2h,0EBh
020C:29D3  20 A7 AFA0				and	byte ptr ds:[0AFA0h][bx],ah	; (020C:AFA0=0C6h)
020C:29D7  E0 AE		;*		loopnz	locloop_316		;*Loop if zf=0, cx>0

020C:29D7  E0 AE				db	0E0h,0AEh
020C:29D9  E1 A0		;*		loopz	locloop_315		;*Loop if zf=1, cx>0

020C:29D9  E1 A0				db	0E1h,0A0h
020C:29DB  20 AA E320				and	[bp+si-1CE0h],ch
020C:29DF  E1 E2		;*		loopz	locloop_323		;*Loop if zf=1, cx>0

020C:29DF  E1 E2				db	0E1h,0E2h
020C:29E1  E0 AE		;*		loopnz	locloop_317		;*Loop if zf=0, cx>0

020C:29E1  E0 AE				db	0E0h,0AEh
020C:29E3  A9 E2E1				test	ax,0E2E1h
020C:29E6  A2 0DE3				mov	data_127,al		; (020C:0DE3=0EBh)
020C:29E9  8E					db	8Eh
020C:29EA  E8 A1A8				call	$-5E55h
020C:29ED  AA					stosb				; Store al to es:[di]
020C:29EE  A0 AF20				mov	al,byte ptr ds:[0AF20h]	; (020C:AF20=3Ch)
020C:29F1  AE					scasb				; Scan es:[di] for al
020C:29F2  A8 E1				test	al,0E1h
020C:29F4  AA					stosb				; Store al to es:[di]
020C:29F5  A0 8D19				mov	al,byte ptr ds:[8D19h]	; (020C:8D19=0C6h)
020C:29F8  A5					movsw				; Mov [si] to es:[di]
020C:29F9  AF					scasw				; Scan es:[di] for ax
020C:29FA  E0 A0				loopnz	locloop_318		; Loop if zf=0, cx>0


020C:29FC			locloop_327:
020C:29FC  A2 ABA8				mov	byte ptr ds:[0ABA8h],al	; (020C:ABA8=0CDh)
020C:29FF  EC					in	al,dx			; port 0, DMA-1 bas&add ch 0
020C:2A00  AD					lodsw				; String [si] to ax
020C:2A01  EB A9		;*		jmp	short loc_320		;*(29AC)
020C:2A01  EB A9				db	0EBh,0A9h
							                        ;* No entry point to code
020C:2A03  20 E2				and	dl,ah
020C:2A05  A8 AF				test	al,0AFh
020C:2A07  20 AD E1AE				and	byte ptr ds:[0E1AEh][di],ch	; (020C:E1AE=3Bh)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 105

020C:2A0B  A8 E2				test	al,0E2h
020C:2A0D  A5					movsw				; Mov [si] to es:[di]
020C:2A0E  AB					stosw				; Store ax to es:[di]
020C:2A0F  EF					out	dx,ax			; port 0, DMA-1 bas&add ch 0
020C:2A10  10 91 AAA5				adc	byte ptr ds:[0AAA5h][bx+di],dl	; (020C:AAA5=0B4h)
020C:2A14  E2 AE		;*		loop	locloop_324		;*Loop if cx > 0

020C:2A14  E2 AE				db	0E2h,0AEh
020C:2A16  E0 20				loopnz	locloop_330		; Loop if zf=0, cx>0

020C:2A18  AD					lodsw				; String [si] to ax
020C:2A19  A5					movsw				; Mov [si] to es:[di]
020C:2A1A  20 AD A9A0				and	byte ptr ds:[0A9A0h][di],ch	; (020C:A9A0=0)
020C:2A1E  A4					movsb				; Mov [si] to es:[di]
020C:2A1F  A5					movsw				; Mov [si] to es:[di]
020C:2A20  AD					lodsw				; String [si] to ax
020C:2A21  15 2082				adc	ax,2082h
020C:2A24  AF					scasw				; Scan es:[di] for ax
020C:2A25  E0 A8				loopnz	locloop_325		; Loop if zf=0, cx>0

020C:2A27  AD					lodsw				; String [si] to ax
020C:2A28  E2 A5				loop	locloop_325		; Loop if cx > 0

020C:2A2A  E0 A5				loopnz	locloop_326		; Loop if zf=0, cx>0

020C:2A2C  20 AD E2A5				and	byte ptr ds:[0E2A5h][di],ch	; (020C:E2A5=2Dh)
020C:2A30  20 A1 ACE3				and	byte ptr ds:[0ACE3h][bx+di],ah	; (020C:ACE3=0A1h)
020C:2A34  A0 A8A3				mov	al,byte ptr ds:[0A8A3h]	; (020C:A8A3=2)
020C:2A37  11 8E A8E8				adc	[bp-5718h],cx
020C:2A3B  A1 A0AA				mov	ax,word ptr ds:[0A0AAh]	; (020C:A0AA=21CDh)
020C:2A3E  20 AF A8E0				and	byte ptr ds:[0A8E0h][bx],ch	; (020C:A8E0=38h)
020C:2A42  20 A7 AFA0				and	byte ptr ds:[0AFA0h][bx],ah	; (020C:AFA0=0C6h)
020C:2A46  A8 E1				test	al,0E1h
020C:2A48  A8 11				test	al,11h
020C:2A4A  8E					db	8Eh
020C:2A4B  E8 A1A8				call	$-5E55h

020C:2A4E			locloop_332:
020C:2A4E  AA					stosb				; Store al to es:[di]
020C:2A4F  A0 AF20				mov	al,byte ptr ds:[0AF20h]	; (020C:AF20=3Ch)
020C:2A52  E0 A8				loopnz	locloop_327		; Loop if zf=0, cx>0

020C:2A54  20 E7				and	bh,ah
020C:2A56  E2 A5		;*		loop	locloop_328		;*Loop if cx > 0

020C:2A56  E2 A5				db	0E2h,0A5h
020C:2A58  AD					lodsw				; String [si] to ax
020C:2A59  A8 A8				test	al,0A8h
020C:2A5B  12 8E E9A1				adc	cl,[bp-165Fh]
020C:2A5F  A8 A9				test	al,0A9h
020C:2A61  20 E1				and	cl,ah
020C:2A63  A1 A9AE				mov	ax,word ptr ds:[0A9AEh]	; (020C:A9AE=0E01h)
020C:2A66  20 E1				and	cl,ah
020C:2A68  A8 E1				test	al,0E1h
020C:2A6A  E2 A5		;*		loop	locloop_329		;*Loop if cx > 0

020C:2A6A  E2 A5				db	0E2h,0A5h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 106

020C:2A6C  AC					lodsb				; String [si] to al
020C:2A6D  EB 24				jmp	short loc_338		; (2A93)
020C:2A6F  8D A0 E3E0				lea	sp,cs:[0E3E0h][bx+si]	; Load effective addr
020C:2A73  E8 ADA5				call	$-5258h
020C:2A76  A8 A5				test	al,0A5h
020C:2A78  20 E0				and	al,ah
020C:2A7A  A5					movsw				; Mov [si] to es:[di]

020C:2A7B			locloop_337:
020C:2A7B  A6					cmpsb				; Cmp [si] to es:[di]
020C:2A7C  A8 AC				test	al,0ACh
020C:2A7E  A0 E120				mov	al,byte ptr ds:[0E120h]	; (020C:E120=26h)
020C:2A81  AE					scasb				; Scan es:[di] for al
020C:2A82  A2 A5AC				mov	byte ptr ds:[0A5ACh],al	; (020C:A5AC=0)
020C:2A85  E1 E2		;*		loopz	locloop_334		;*Loop if zf=1, cx>0

020C:2A85  E1 E2				db	0E1h,0E2h
020C:2A87  AD					lodsw				; String [si] to ax
020C:2A88  AE					scasb				; Scan es:[di] for al
020C:2A89  A3 20AE				mov	data_186,ax		; (020C:20AE=2020h)
020C:2A8C  A4					movsb				; Mov [si] to es:[di]
020C:2A8D  AE					scasb				; Scan es:[di] for al
020C:2A8E  E1 E2		;*		loopz	locloop_335		;*Loop if zf=1, cx>0

020C:2A8E  E1 E2				db	0E1h,0E2h
020C:2A90  E3 AF		;*		jcxz	loc_331			;*Jump if cx=0
020C:2A90  E3 AF				db	0E3h,0AFh
020C:2A92  A0 8D14				mov	al,byte ptr ds:[8D14h]	; (020C:8D14=45h)
020C:2A95  A0 E3E0				mov	al,byte ptr ds:[0E3E0h]	; (020C:E3E0=16h)
020C:2A98  E8 ADA5				call	$-5258h
020C:2A9B  A8 A5				test	al,0A5h
020C:2A9D  20 A1 AEAB				and	byte ptr ds:[0AEABh][bx+di],ah	; (020C:AEAB=0F8h)
020C:2AA1  AA					stosb				; Store al to es:[di]
020C:2AA2  A8 E0				test	al,0E0h
020C:2AA4  AE					scasb				; Scan es:[di] for al
020C:2AA5  A2 A8AA				mov	byte ptr ds:[0A8AAh],al	; (020C:A8AA=74h)
020C:2AA8  18 8D AFA5				sbb	byte ptr ds:[0AFA5h][di],cl	; (020C:AFA5=0C6h)
020C:2AAC  E0 A0				loopnz	locloop_332		; Loop if zf=0, cx>0

020C:2AAE  A2 ABA8				mov	byte ptr ds:[0ABA8h],al	; (020C:ABA8=0CDh)
020C:2AB1  EC					in	al,dx			; port 0, DMA-1 bas&add ch 0

020C:2AB2			locloop_343:
020C:2AB2  AD					lodsw				; String [si] to ax
020C:2AB3  A0 20EF				mov	al,data_189		; (020C:20EF=0A0h)

020C:2AB6			locloop_344:
020C:2AB6  E1 AC		;*		loopz	locloop_333		;*Loop if zf=1, cx>0

020C:2AB6  E1 AC				db	0E1h,0ACh
020C:2AB8  A5					movsw				; Mov [si] to es:[di]
020C:2AB9  AD					lodsw				; String [si] to ax
020C:2ABA  A0 A420				mov	al,byte ptr ds:[0A420h]	; (020C:A420=21h)
020C:2ABD  A8 E1				test	al,0E1h
020C:2ABF  AA					stosb				; Store al to es:[di]
020C:2AC0  A0 8D27				mov	al,byte ptr ds:[8D27h]	; (020C:8D27=75h)
020C:2AC3  A5					movsw				; Mov [si] to es:[di]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 107

020C:2AC4  A4					movsb				; Mov [si] to es:[di]
020C:2AC5  AE					scasb				; Scan es:[di] for al
020C:2AC6  E1 E2		;*		loopz	locloop_340		;*Loop if zf=1, cx>0

020C:2AC6  E1 E2				db	0E1h,0E2h
020C:2AC8  E3 AF		;*		jcxz	loc_336			;*Jump if cx=0
020C:2AC8  E3 AF				db	0E3h,0AFh
020C:2ACA  A5					movsw				; Mov [si] to es:[di]
020C:2ACB  AD					lodsw				; String [si] to ax
020C:2ACC  20 46 43				and	[bp+43h],al
020C:2ACF  42					inc	dx
020C:2AD0  20 28				and	[bx+si],ch
020C:2AD2  A1 AEAB				mov	ax,word ptr ds:[0AEABh]	; (020C:AEAB=0EBF8h)
020C:2AD5  AA					stosb				; Store al to es:[di]
020C:2AD6  20 E3				and	bl,ah

020C:2AD8			locloop_346:
020C:2AD8  AF					scasw				; Scan es:[di] for ax
020C:2AD9  E0 A0				loopnz	locloop_337		; Loop if zf=0, cx>0

020C:2ADB  A2 A5AB				mov	byte ptr ds:[0A5ABh],al	; (020C:A5AB=0)
020C:2ADE  AD					lodsw				; String [si] to ax
020C:2ADF  A8 EF				test	al,0EFh
020C:2AE1  20 E4				and	ah,ah
020C:2AE3  A0 ABA9				mov	al,byte ptr ds:[0ABA9h]	; (020C:ABA9=21h)
020C:2AE6  AE					scasb				; Scan es:[di] for al
020C:2AE7  AC					lodsb				; String [si] to al
020C:2AE8  29 19				sub	[bx+di],bx
020C:2AEA  90					nop
020C:2AEB  A5					movsw				; Mov [si] to es:[di]
020C:2AEC  E1 E3		;*		loopz	locloop_345		;*Loop if zf=1, cx>0

020C:2AEC  E1 E3				db	0E1h,0E3h
020C:2AEE  E0 E1		;*		loopnz	locloop_345		;*Loop if zf=0, cx>0

020C:2AEE  E0 E1				db	0E0h,0E1h
020C:2AF0  EB 20				jmp	short loc_351		; (2B12)
020C:2AF2  E1 A8		;*		loopz	locloop_339		;*Loop if zf=1, cx>0

020C:2AF2  E1 A8				db	0E1h,0A8h
020C:2AF4  E1 E2				loopz	locloop_346		; Loop if zf=1, cx>0

020C:2AF6  A5					movsw				; Mov [si] to es:[di]
020C:2AF7  AC					lodsb				; String [si] to al
020C:2AF8  EB 20				jmp	short loc_352		; (2B1A)
020C:2AFA  A8 E1				test	al,0E1h
020C:2AFC  E7 A5				out	0A5h,ax			; port 0A5h ??I/O Non-standard

020C:2AFE			locloop_349:
020C:2AFE  E0 AF		;*		loopnz	locloop_342		;*Loop if zf=0, cx>0

020C:2AFE  E0 AF				db	0E0h,0AFh
020C:2B00  A0 EBAD				mov	al,byte ptr ds:[0EBADh]	; (020C:EBAD=3Bh)
020C:2B03  8D1E			data_213	dw	8D1Eh			; Data table (indexed access)
020C:2B05  A5					movsw				; Mov [si] to es:[di]
020C:2B06  E1 AE				loopz	locloop_344		; Loop if zf=1, cx>0

           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 108

020C:2B08  AE					scasb				; Scan es:[di] for al
020C:2B09  E2 A2		;*		loop	locloop_341		;*Loop if cx > 0

020C:2B09  E2 A2				db	0E2h,0A2h

020C:2B0B			locloop_350:
020C:2B0B  A5					movsw				; Mov [si] to es:[di]
020C:2B0C  E2 E1		;*		loop	locloop_347		;*Loop if cx > 0

020C:2B0C  E2 E1				db	0E2h,0E1h
020C:2B0E  E2 A2				loop	locloop_343		; Loop if cx > 0

020C:2B10  A8 A5				test	al,0A5h
020C:2B12			loc_351:
020C:2B12  20 AA A4AE				and	[bp+si-5B52h],ch
020C:2B16  AE					scasb				; Scan es:[di] for al
020C:2B17  A2 E5EB				mov	byte ptr ds:[0E5EBh],al	; (020C:E5EB=26h)
020C:2B1A			loc_352:
020C:2B1A  20 E1				and	cl,ah
020C:2B1C  E2 E0				loop	locloop_349		; Loop if cx > 0

020C:2B1E			loc_353:
020C:2B1E  A0 A8AD				mov	al,byte ptr ds:[0A8ADh]	; (020C:A8AD=26h)
020C:2B21  E6 1D				out	1Dh,al			; port 1Dh ??I/O Non-standard
020C:2B23  8D A5 AEA4				lea	sp,cs:[0AEA4h][di]	; Load effective addr
020C:2B27  E1 E2				loopz	locloop_350		; Loop if zf=1, cx>0


020C:2B29			locloop_355:
020C:2B29  A0 AEE2				mov	al,byte ptr ds:[0AEE2h]	; (020C:AEE2=45h)
020C:2B2C  E7 AD				out	0ADh,ax			; port 0ADh ??I/O Non-standard
020C:2B2E  AE					scasb				; Scan es:[di] for al
020C:2B2F  20 A2 A5A2				and	[bp+si-5A5Eh],ah
020C:2B33  A4					movsb				; Mov [si] to es:[di]
020C:2B34  A5					movsw				; Mov [si] to es:[di]
020C:2B35  AD					lodsw				; String [si] to ax
020C:2B36  AD			data_214	db	0ADh
020C:2B37  EB E5				jmp	short loc_353		; (2B1E)
020C:2B39  A420			data_216	dw	0A420h
020C:2B3B  A0			data_217	db	0A0h
020C:2B3C  AD			data_218	db	0ADh
020C:2B3D  EBAD			data_219	dw	0EBADh
020C:2B3F  E5 1B				in	ax,1Bh			; port 1Bh ??I/O Non-standard
020C:2B41  8D A5 AEA4				lea	sp,cs:[0AEA4h][di]	; Load effective addr
020C:2B45  E1 E2				loopz	locloop_355		; Loop if zf=1, cx>0

020C:2B47  A0 AEE2				mov	al,byte ptr ds:[0AEE2h]	; (020C:AEE2=45h)
020C:2B4A  E7 AD				out	0ADh,ax			; port 0ADh ??I/O Non-standard
020C:2B4C  AE					scasb				; Scan es:[di] for al
020C:2B4D  20 AC E1A5				and	byte ptr ds:[0E1A5h][si],ch	; (020C:E1A5=2Eh)
020C:2B51  E2 A0		;*		loop	locloop_348		;*Loop if cx > 0

020C:2B51  E2 A0				db	0E2h,0A0h
020C:2B53  20 AD 20A0				and	data_183[di],ch		; (020C:20A0=20h)
020C:2B57  A4					movsb				; Mov [si] to es:[di]
020C:2B58  A8 E1				test	al,0E1h
020C:2B5A  AA					stosb				; Store al to es:[di]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 109

020C:2B5B  A5					movsw				; Mov [si] to es:[di]
020C:2B5C  0C 09				or	al,9
020C:2B5E  24 09				and	al,9
020C:2B60  3C 09				cmp	al,9
020C:2B62  4B					dec	bx
020C:2B63  09 6C 09				or	[si+9],bp
020C:2B66  7C 09				jl	loc_356			; Jump if <
020C:2B68  A8 09				test	al,9
020C:2B6A  B6 09				mov	dh,9
020C:2B6C  D0 09				ror	byte ptr [bx+di],1	; Rotate
020C:2B6E  E1 09				loopz	locloop_357		; Loop if zf=1, cx>0

020C:2B70  F7					db	0F7h
020C:2B71			loc_356:
020C:2B71  09 09				or	[bx+di],cx
020C:2B73  0A 1B				or	bl,[bp+di]
020C:2B75  0A 2E 530A				or	ch,byte ptr ds:[530Ah]	; (020C:530A=0Fh)

020C:2B79			locloop_357:
020C:2B79  0A 68 0A				or	ch,[bx+si+0Ah]
020C:2B7C  81 0A 0AA9				or	word ptr [bp+si],0AA9h
020C:2B80  C3					retn
							                        ;* No entry point to code
020C:2B81  0A E2				or	ah,dl
020C:2B83  0A 00				or	al,[bx+si]
020C:2B85  0B 18				or	bx,[bx+si]
020C:2B87  91					xchg	cx,ax
020C:2B88  AB					stosw				; Store ax to es:[di]
020C:2B89  A8 E8				test	al,0E8h
020C:2B8B  AA					stosb				; Store al to es:[di]
020C:2B8C  AE					scasb				; Scan es:[di] for al
020C:2B8D  AC					lodsb				; String [si] to al
020C:2B8E  20 AC 004D				and	data_37[si],ch		; (020C:004D=82h)
020C:2B92  00 07				add	[bx],al
020C:2B94  00 AF E0A0				add	byte ptr ds:[0E0A0h][bx],ch	; (020C:E0A0=38h)
020C:2B98  A0 A5AC				mov	al,byte ptr ds:[0A5ACh]	; (020C:A5AC=0)
020C:2B9B  E2 E0		;*		loop	locloop_358		;*Loop if cx > 0

020C:2B9B  E2 E0				db	0E2h,0E0h
020C:2B9D  AE					scasb				; Scan es:[di] for al
020C:2B9E  A2 0021				mov	byte ptr data_16+3,al	; (020C:0021=0A3h)
020C:2BA1  01 00				add	[bx+si],ax

020C:2BA3			locloop_359:
020C:2BA3  00					db	0
020C:2BA4  00					db	0
020C:2BA5  00 00				add	[bx+si],al
020C:2BA7  00 C4				add	ah,al
020C:2BA9  0C 00				or	al,0
020C:2BAB  00 FF				add	bh,bh
020C:2BAD  0013[FF]				db	19 dup (0FFh)
020C:2BC0  43					inc	bx
020C:2BC1  3A 5C 57				cmp	bl,[si+57h]
020C:2BC4  49					dec	cx
020C:2BC5  4E					dec	si
020C:2BC6  44					inc	sp
020C:2BC7  4F					dec	di
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 110

020C:2BC8  57					push	di
020C:2BC9  53					push	bx
020C:2BCA  5C					pop	sp
020C:2BCB  54					push	sp
020C:2BCC  45					inc	bp
020C:2BCD  4D					dec	bp
020C:2BCE  50					push	ax
020C:2BCF  5C					pop	sp
020C:2BD0  73 63				jnc	loc_363			; Jump if carry=0
020C:2BD2  73 33				jnc	loc_362			; Jump if carry=0
020C:2BD4  39 2E 6D74				cmp	word ptr ds:[6D74h],bp	; (020C:6D74=0ED06h)
020C:2BD8  70 00				jo	$+2			; delay for I/O
020C:2BDA  000C[00]				db	12 dup (0)
020C:2BE6  00			data_224	db	0

020C:2BE7			locloop_360:
020C:2BE7  0000			data_225	dw	0			; Data table (indexed access)
020C:2BE9  0000			data_226	dw	0			; Data table (indexed access)
020C:2BEB  0000			data_227	dw	0			; Data table (indexed access)
020C:2BED  0000			data_228	dw	0			; Data table (indexed access)
020C:2BEF  00					db	0
020C:2BF0  00					db	0
020C:2BF1			loc_361:
020C:2BF1  00					db	0
020C:2BF2  00					db	0
020C:2BF3  00					db	0
020C:2BF4  00					db	0
020C:2BF5  00					db	0
020C:2BF6  00					db	0
020C:2BF7  00					db	0
020C:2BF8  00					db	0
020C:2BF9  00					db	0
020C:2BFA  00					db	0
020C:2BFB  00					db	0
020C:2BFC  00					db	0
020C:2BFD  00					db	0
020C:2BFE  00 00				add	[bx+si],al
020C:2C00  00 E0				add	al,ah
020C:2C02  A0 A5AC				mov	al,byte ptr ds:[0A5ACh]	; (020C:A5AC=0)
020C:2C05  E2 E0				loop	locloop_360		; Loop if cx > 0

020C:2C07			loc_362:
020C:2C07  A0 A220				mov	al,byte ptr ds:[0A220h]	; (020C:A220=0FCh)
020C:2C0A  EB E5				jmp	short loc_361		; (2BF1)
020C:2C0C  AE					scasb				; Scan es:[di] for al
020C:2C0D  A4					movsb				; Mov [si] to es:[di]
020C:2C0E  A8 E2				test	al,0E2h
020C:2C10  4D					dec	bp
020C:2C11  0410			data_230	dw	410h
020C:2C13  44					inc	sp
020C:2C14  00 E0				add	al,ah
020C:2C16  A5					movsw				; Mov [si] to es:[di]
020C:2C17  A4					movsb				; Mov [si] to es:[di]
020C:2C18  A5					movsw				; Mov [si] to es:[di]
020C:2C19  AB					stosw				; Store ax to es:[di]
020C:2C1A  EB 20				jmp	short loc_364		; (2C3C)
020C:2C1C  A4					movsb				; Mov [si] to es:[di]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 111

020C:2C1D  AE					scasb				; Scan es:[di] for al
020C:2C1E  AF					scasw				; Scan es:[di] for ax
020C:2C1F  E3 43				jcxz	loc_365			; Jump if cx=0
020C:2C21  4F 4D 53 50 45 43			db	'OMSPEC=C:\WINDOWS\SYSTEM32\COMMA'
020C:2C27  3D 43 3A 5C 57 49
020C:2C2D  4E 44 4F 57 53 5C
020C:2C33  53 59 53 54 45 4D
020C:2C39  33 32 5C 43 4F 4D
020C:2C3F  4D 41
020C:2C41  4E 44 2E 43 4F 4D			db	'ND.COM', 0
020C:2C47  00
020C:2C48  41 4C 4C 55 53 45			db	'ALLUSERSPROFILE=C:\DOCUME~1\ALLU'
020C:2C4E  52 53 50 52 4F 46
020C:2C54  49 4C 45 3D 43 3A
020C:2C5A  5C 44 4F 43 55 4D
020C:2C60  45 7E 31 5C 41 4C
020C:2C66  4C 55
020C:2C68  53 45 7E 31 00			db	'SE~1', 0
020C:2C6D  41 50 50 44 41 54			db	'APPDATA=C:\DOCUME~1\9335~1\APPLI'
020C:2C73  41 3D 43 3A 5C 44
020C:2C79  4F 43 55 4D 45 7E
020C:2C7F  31 5C 39 33 33 35
020C:2C85  7E 31 5C 41 50 50
020C:2C8B  4C 49
020C:2C8D  43 7E 31 00				db	'C~1', 0
020C:2C91  43 4C 49 45 4E 54			db	'CLIENTNAME=Console', 0
020C:2C97  4E 41 4D 45 3D 43
020C:2C9D  6F 6E 73 6F 6C 65
020C:2CA3  00
020C:2CA4  43 4F 4D 4D 4F 4E			db	'COMMONPROGRAMFILES=C:\PROGRA~1\C'
020C:2CAA  50 52 4F 47 52 41
020C:2CB0  4D 46 49 4C 45 53
020C:2CB6  3D 43 3A 5C 50 52
020C:2CBC  4F 47 52 41 7E 31
020C:2CC2  5C 43
020C:2CC4  4F 4D 4D 4F 4E 7E			db	'OMMON~1', 0
020C:2CCA  31 00
020C:2CCC  43 4F 4D 50 55 54			db	'COMPUTERNAME=F252', 0
020C:2CD2  45 52 4E 41 4D 45
020C:2CD8  3D 46 32 35 32 00
020C:2CDE  46 50 5F 4E 4F 5F			db	'FP_NO_HOST_CHECK=NO', 0
020C:2CE4  48 4F 53 54 5F 43
020C:2CEA  48 45 43 4B 3D 4E
020C:2CF0  4F 00
020C:2CF2  48 4F 4D 45 44 52			db	'HOMEDRIVE=C:', 0
020C:2CF8  49 56 45 3D 43 3A
020C:2CFE  00
020C:2CFF  48 4F 4D 45 50 41			db	'HOMEPATH=\Documents and Settings'
020C:2D05  54 48 3D 5C 44 6F
020C:2D0B  63 75 6D 65 6E 74
020C:2D11  73 20 61 6E 64 20
020C:2D17  53 65 74 74 69 6E
020C:2D1D  67 73
020C:2D1F  5C 5F				db	'\_'
020C:2D21  FD					std				; Set direction flag
020C:2D22  BF 2DF0				mov	di,2DF0h
020C:2D25  F0> A1 A0A2		                           lock	mov	ax,word ptr ds:[0A0A2h]	; (020C:A0A2=0B80Bh)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 112

020C:2D29  FF A2 A052				jmp	word ptr [bp+si-5FAEh]	;*
020C:2D2D  00 4C 4F				add	[si+4Fh],cl
020C:2D30  47 4F 4E 53 45 52			db	'GONSERVER=\\F252', 0
020C:2D36  56 45 52 3D 5C 5C
020C:2D3C  46 32 35 32 00
020C:2D41  4E 55 4D 42 45 52			db	'NUMBER_OF_PROCESSORS=2', 0
020C:2D47  5F 4F 46 5F 50 52
020C:2D4D  4F 43 45 53 53 4F
020C:2D53  52 53 3D 32 00
020C:2D58  4F 53 3D 57 69 6E			db	'OS=Windows_NT', 0
020C:2D5E  64 6F 77 73 5F 4E
020C:2D64  54 00
020C:2D66  50 41 54 48 3D 43			db	'PATH=C:\PROGRA~1\PARALL~1\PARALL'
020C:2D6C  3A 5C 50 52 4F 47
020C:2D72  52 41 7E 31 5C 50
020C:2D78  41 52 41 4C 4C 7E
020C:2D7E  31 5C 50 41 52 41
020C:2D84  4C 4C
020C:2D86  7E 31 5C 41 50 50			db	'~1\APPLIC~1;C:\WINDOWS\system32;'
020C:2D8C  4C 49 43 7E 31 3B
020C:2D92  43 3A 5C 57 49 4E
020C:2D98  44 4F 57 53 5C 73
020C:2D9E  79 73 74 65 6D 33
020C:2DA4  32 3B
020C:2DA6  43 3A 5C 57 49 4E			db	'C:\WINDOWS;C:\WINDOWS\System32\W'
020C:2DAC  44 4F 57 53 3B 43
020C:2DB2  3A 5C 57 49 4E 44
020C:2DB8  4F 57 53 5C 53 79
020C:2DBE  73 74 65 6D 33 32
020C:2DC4  5C 57
020C:2DC6  62 65 6D 00				db	'bem', 0
020C:2DCA  50 41 54 48 45 58			db	'PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS'
020C:2DD0  54 3D 2E 43 4F 4D
020C:2DD6  3B 2E 45 58 45 3B
020C:2DDC  2E 42 41 54 3B 2E
020C:2DE2  43 4D 44 3B 2E 56
020C:2DE8  42 53
020C:2DEA  3B 2E 56 42 45 3B			db	';.VBE;.JS;.JSE;.WSF;.WSH', 0
020C:2DF0  2E 4A 53 3B 2E 4A
020C:2DF6  53 45 3B 2E 57 53
020C:2DFC  46 3B 2E 57 53 48
020C:2E02  00
020C:2E03  50 52 4F 43 45 53			db	'PROCESSOR_ARCHITECTURE=x86', 0
020C:2E09  53 4F 52 5F 41 52
020C:2E0F  43 48 49 54 45 43
020C:2E15  54 55 52 45 3D 78
020C:2E1B  38 36 00
020C:2E1E  50 52 4F 43 45 53			db	'PROCESSOR_IDENTIFIER=x86 Family '
020C:2E24  53 4F 52 5F 49 44
020C:2E2A  45 4E 54 49 46 49
020C:2E30  45 52 3D 78 38 36
020C:2E36  20 46 61 6D 69 6C
020C:2E3C  79 20
020C:2E3E  36 20 4D 6F 64 65			db	'6 Model 142 Stepping 9, GenuineI'
020C:2E44  6C 20 31 34 32 20
020C:2E4A  53 74 65 70 70 69
020C:2E50  6E 67 20 39 2C 20
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 113

020C:2E56  47 65 6E 75 69 6E
020C:2E5C  65 49
020C:2E5E  6E 74 65 6C 00			db	'ntel', 0
020C:2E63  50 52 4F 43 45 53			db	'PROCESSOR_LEVEL=6', 0
020C:2E69  53 4F 52 5F 4C 45
020C:2E6F  56 45 4C 3D 36 00
020C:2E75  50 52 4F 43 45 53			db	'PROCESSOR_REVISION=8e09', 0
020C:2E7B  53 4F 52 5F 52 45
020C:2E81  56 49 53 49 4F 4E
020C:2E87  3D 38 65 30 39 00
020C:2E8D  50 52 4F 47 52 41			db	'PROGRAMFILES=C:\PROGRA~1', 0
020C:2E93  4D 46 49 4C 45 53
020C:2E99  3D 43 3A 5C 50 52
020C:2E9F  4F 47 52 41 7E 31
020C:2EA5  00
020C:2EA6  50 52 4F 4D 50 54			db	'PROMPT=$'
020C:2EAC  3D 24
020C:2EAE  50 24				db	'P$'
020C:2EB0  47 00				db	'G', 0
020C:2EB2  53 45 53 53 49 4F			db	'SESSIONNAME=Console', 0
020C:2EB8  4E 4E 41 4D 45 3D
020C:2EBE  43 6F 6E 73 6F 6C
020C:2EC4  65 00
020C:2EC6  53 59 53 54 45 4D			db	'SYSTEMDRIVE=C:', 0
020C:2ECC  44 52 49 56 45 3D
020C:2ED2  43 3A 00
020C:2ED5  53 59 53 54 45 4D			db	'SYSTEMROOT=C:\WINDOWS', 0
020C:2EDB  52 4F 4F 54 3D 43
020C:2EE1  3A 5C 57 49 4E 44
020C:2EE7  4F 57 53 00
020C:2EEB  54 45 4D 50 3D 43			db	'TEMP=C:\WINDOWS\TEMP', 0
020C:2EF1  3A 5C 57 49 4E 44
020C:2EF7  4F 57 53 5C 54 45
020C:2EFD  4D 50 00
020C:2F00  54 4D 50 3D 43 3A			db	'TMP=C:\WINDOWS\TEMP', 0
020C:2F06  5C 57 49 4E 44 4F
020C:2F0C  57 53 5C 54 45 4D
020C:2F12  50 00
020C:2F14  55 53 45 52 44 4F			db	'USERDOMAIN=F252', 0
020C:2F1A  4D 41 49 4E 3D 46
020C:2F20  32 35 32 00
020C:2F24  55 53 45 52 4E 41			db	'USERNAME=_'
020C:2F2A  4D 45 3D 5F
020C:2F2E  FD					std				; Set direction flag
020C:2F2F  BF 2DF0				mov	di,2DF0h
020C:2F32  F0> A1 A0A2		                           lock	mov	ax,word ptr ds:[0A0A2h]	; (020C:A0A2=0B80Bh)
020C:2F36  FF A2 A052				jmp	word ptr [bp+si-5FAEh]	;*
020C:2F3A  00 55 53				add	[di+53h],dl
020C:2F3D  45 52 50 52 4F 46			db	'ERPROFILE=C:\DOCUME~1\9335~1', 0
020C:2F43  49 4C 45 3D 43 3A
020C:2F49  5C 44 4F 43 55 4D
020C:2F4F  45 7E 31 5C 39 33
020C:2F55  33 35 7E 31 00
020C:2F5A  42 4C 41 53 54 45			db	'BLASTER=A220 I5 D1 P330 T3'
020C:2F60  52 3D 41 32 32 30
020C:2F66  20 49 35 20 44 31
020C:2F6C  20 50 33 33 30 20
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 114

020C:2F72  54 33
020C:2F74  00 00				add	[bx+si],al
020C:2F76  EB A9		;*		jmp	short loc_366		;*(2F21)
020C:2F76  EB A9				db	0EBh,0A9h
							                        ;* No entry point to code
020C:2F78  20 AA ACAE				and	[bp+si-5352h],ch
020C:2F7C  AF					scasw				; Scan es:[di] for ax
020C:2F7D  AE					scasb				; Scan es:[di] for al
020C:2F7E  AD					lodsw				; String [si] to ax
020C:2F7F  A5					movsw				; Mov [si] to es:[di]
020C:2F80  AD					lodsw				; String [si] to ax
020C:2F81  E2 20				loop	locloop_370		; Loop if cx > 0

020C:2F83  E1 A8		;*		loopz	locloop_367		;*Loop if zf=1, cx>0

020C:2F83  E1 A8				db	0E1h,0A8h
020C:2F85  E1 E2		;*		loopz	locloop_368		;*Loop if zf=1, cx>0

020C:2F85  E1 E2				db	0E1h,0E2h
020C:2F87  A5					movsw				; Mov [si] to es:[di]
020C:2F88  AC					lodsb				; String [si] to al
020C:2F89  EB 20				jmp	short loc_371		; (2FAB)
							                        ;* No entry point to code
020C:2F8B  AD					lodsw				; String [si] to ax
020C:2F8C  A5					movsw				; Mov [si] to es:[di]
020C:2F8D  20 E3				and	bl,ah
020C:2F8F  E1 E2		;*		loopz	locloop_369		;*Loop if zf=1, cx>0

020C:2F8F  E1 E2				db	0E1h,0E2h
020C:2F91  A0 AEAD				mov	al,byte ptr ds:[0AEADh]	; (020C:AEAD=0D9h)
020C:2F94  A2 A5AB				mov	byte ptr ds:[0A5ABh],al	; (020C:A5AB=0)
020C:2F97  AD					lodsw				; String [si] to ax
020C:2F98  9D					popf				; Pop flags
020C:2F99  0C B2				or	al,0B2h
020C:2F9B  0C C1				or	al,0C1h
020C:2F9D  0C D0				or	al,0D0h
020C:2F9F  0C ED				or	al,0EDh
020C:2FA1  0C FA				or	al,0FAh

020C:2FA3			locloop_370:
020C:2FA3  0C 12				or	al,12h
020C:2FA5  0D 0D35				or	ax,0D35h
020C:2FA8  49					dec	cx
020C:2FA9  0D 0D69				or	ax,0D69h
020C:2FAC  91					xchg	cx,ax
020C:2FAD  0D 0DA5				or	ax,0DA5h
020C:2FB0  C3					retn
020C:2FB1  0D 0000				or	ax,0
020C:2FB4  D7					xlat				; al=[al+[bx]] table
020C:2FB5  0D 0DEE				or	ax,0DEEh
020C:2FB8  0E					push	cs
020C:2FB9  0E					push	cs
020C:2FBA  20 0E 090C				and	byte ptr ds:[90Ch],cl	; (020C:090C=0Eh)
020C:2FBE  24 09				and	al,9
020C:2FC0  3C 09				cmp	al,9
020C:2FC2  4B					dec	bx
020C:2FC3  09 6C 09				or	[si+9],bp
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 115

020C:2FC6  7C 09				jl	loc_372			; Jump if <
020C:2FC8  A8 09				test	al,9
020C:2FCA  B6 09				mov	dh,9
020C:2FCC  D0 09				ror	byte ptr [bx+di],1	; Rotate
020C:2FCE  E1 09				loopz	locloop_373		; Loop if zf=1, cx>0

020C:2FD0  F7					db	0F7h
020C:2FD1			loc_372:
020C:2FD1  09 09				or	[bx+di],cx
020C:2FD3  0A 1B				or	bl,[bp+di]
020C:2FD5  0A 2E 530A				or	ch,byte ptr ds:[530Ah]	; (020C:530A=0Fh)

020C:2FD9			locloop_373:
020C:2FD9  0A 68 0A				or	ch,[bx+si+0Ah]
020C:2FDC  81 0A 0AA9				or	word ptr [bp+si],0AA9h
020C:2FE0  C3					retn
							                        ;* No entry point to code
020C:2FE1  0A E2				or	ah,dl
020C:2FE3  0A 00				or	al,[bx+si]
020C:2FE5  0B 00				or	ax,[bx+si]
020C:2FE7  0042[00]				db	66 dup (0)
020C:3029  0000			data_235	dw	0
020C:302B  00					db	0
020C:302C  00					db	0
020C:302D  00					db	0
020C:302E  00					db	0
020C:302F  00					db	0
020C:3030  00					db	0
020C:3031  00			data_236	db	0
020C:3032  00			data_237	db	0
020C:3033  00 00				add	[bx+si],al
020C:3035  3200			data_238	dw	3200h
020C:3037  000E			data_239	dw	0Eh
020C:3039  00 42 0E				add	[bp+si+0Eh],al
020C:303C  66					db	66h
020C:303D  0E					push	cs
020C:303E  8F					db	8Fh
020C:303F  0E					push	cs
020C:3040  B3			data_240	db	0B3h
020C:3041  0E					push	cs
020C:3042  CF			data_241	db	0CFh
020C:3043  0E					push	cs
020C:3044  E3 0E				jcxz	loc_374			; Jump if cx=0
020C:3046  F9			data_242	db	0F9h
020C:3047  0E					push	cs
020C:3048  0E					push	cs
020C:3049  0F			;*		pop	cs			; Dangerous-8088 only
020C:3049  0F					db	0Fh
020C:304A  2E					db	2Eh
020C:304B  0F			;*		pop	cs			; Dangerous-8088 only
020C:304B  0F					db	0Fh
020C:304C  0000			data_243	dw	0
020C:304E  00 00				add	[bx+si],al
020C:3050  F7BB			data_244	dw	0F7BBh
020C:3052  07					pop	es
020C:3053  3C 02				cmp	al,2
020C:3055  74 1B				je	loc_375			; Jump if equal
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 116

020C:3057  BB 07B1				mov	bx,7B1h
020C:305A  3C 08				cmp	al,8
020C:305C  74 14				je	loc_375			; Jump if equal
020C:305E  BB 4D9C				mov	bx,4D9Ch
020C:3061  4C					dec	sp
020C:3062  05 0038				add	ax,38h
020C:3065  BB 081C				mov	bx,81Ch
020C:3068  3C 05				cmp	al,5
020C:306A  74 06				je	loc_375			; Jump if equal
020C:306C  BB 0782				mov	bx,782h
020C:306F  BE 4F43				mov	si,4F43h
020C:3072			loc_375:
020C:3072  4D 53 50 45 43 3D	data_245	db	'MSPEC=C:\WINDOWS\SYSTEM32\COMMAN'
020C:3078  43 3A 5C 57 49 4E
020C:307E  44 4F 57 53 5C 53
020C:3084  59 53 54 45 4D 33
020C:308A  32 5C 43 4F 4D 4D
020C:3090  41 4E
020C:3092  44 2E 43 4F 4D 00			db	'D.COM', 0
020C:3098  41 4C 4C 55 53 45			db	'ALLUSERSPROFILE=C:\DOCUME~1\ALLU'
020C:309E  52 53 50 52 4F 46
020C:30A4  49 4C 45 3D 43 3A
020C:30AA  5C 44 4F 43 55 4D
020C:30B0  45 7E 31 5C 41 4C
020C:30B6  4C 55
020C:30B8  53 45 7E 31 00			db	'SE~1', 0
020C:30BD  41 50 50 44 41 54			db	'APPDATA=C:\DOCUME~1\9335~1\APPLI'
020C:30C3  41 3D 43 3A 5C 44
020C:30C9  4F 43 55 4D 45 7E
020C:30CF  31 5C 39 33 33 35
020C:30D5  7E 31 5C 41 50 50
020C:30DB  4C 49
020C:30DD  43 7E 31 00				db	'C~1', 0
020C:30E1  43 4C 49 45 4E 54			db	'CLIENTNAME=Console', 0
020C:30E7  4E 41 4D 45 3D 43
020C:30ED  6F 6E 73 6F 6C 65
020C:30F3  00
020C:30F4  43 4F 4D 4D 4F 4E			db	'COMMONPROGRAMFILES=C:\PROGRA~1\C'
020C:30FA  50 52 4F 47 52 41
020C:3100  4D 46 49 4C 45 53
020C:3106  3D 43 3A 5C 50 52
020C:310C  4F 47 52 41 7E 31
020C:3112  5C 43
020C:3114  4F 4D 4D 4F 4E 7E			db	'OMMON~1', 0
020C:311A  31 00
020C:311C  43 4F 4D 50 55 54			db	'COMPUTERNAME=F252', 0
020C:3122  45 52 4E 41 4D 45
020C:3128  3D 46 32 35 32 00
020C:312E  46 50 5F 4E 4F 5F			db	'FP_NO_HOST_CHECK=NO', 0
020C:3134  48 4F 53 54 5F 43
020C:313A  48 45 43 4B 3D 4E
020C:3140  4F 00
020C:3142  48 4F 4D 45 44 52			db	'HOMEDRIVE=C:', 0
020C:3148  49 56 45 3D 43 3A
020C:314E  00
020C:314F  48 4F 4D 45 50 41			db	'HOMEPATH=\Documents and Settings'
020C:3155  54 48 3D 5C 44 6F
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 117

020C:315B  63 75 6D 65 6E 74
020C:3161  73 20 61 6E 64 20
020C:3167  53 65 74 74 69 6E
020C:316D  67 73
020C:316F  5C 5F				db	'\_'
020C:3171  FD					std				; Set direction flag
020C:3172  BF 2DF0				mov	di,2DF0h
020C:3175  F0> A1 A0A2		                           lock	mov	ax,word ptr ds:[0A0A2h]	; (020C:A0A2=0B80Bh)
020C:3179  FF A2 A052				jmp	word ptr [bp+si-5FAEh]	;*
020C:317D  00 4C 4F				add	[si+4Fh],cl
020C:3180  47 4F 4E 53 45 52	data_253	db	'GONSERVER=\\F252', 0
020C:3186  56 45 52 3D 5C 5C
020C:318C  46 32 35 32 00
020C:3191  4E 55 4D 42 45 52			db	'NUMBER_OF_PROCESSORS=2', 0
020C:3197  5F 4F 46 5F 50 52
020C:319D  4F 43 45 53 53 4F
020C:31A3  52 53 3D 32 00
020C:31A8  4F 53 3D 57 69 6E			db	'OS=Windows_NT', 0
020C:31AE  64 6F 77 73 5F 4E
020C:31B4  54 00
020C:31B6  50 41 54 48 3D 43			db	'PATH=C:\PROGRA~1\PARALL~1\PARALL'
020C:31BC  3A 5C 50 52 4F 47
020C:31C2  52 41 7E 31 5C 50
020C:31C8  41 52 41 4C 4C 7E
020C:31CE  31 5C 50 41 52 41
020C:31D4  4C 4C
020C:31D6  7E 31 5C 41 50 50			db	'~1\APPLIC~1;C:\WINDOWS\system32;'
020C:31DC  4C 49 43 7E 31 3B
020C:31E2  43 3A 5C 57 49 4E
020C:31E8  44 4F 57 53 5C 73
020C:31EE  79 73 74 65 6D 33
020C:31F4  32 3B
020C:31F6  43 3A 5C 57 49 4E			db	'C:\WINDOWS;C:\WINDOWS\System32\W'
020C:31FC  44 4F 57 53 3B 43
020C:3202  3A 5C 57 49 4E 44
020C:3208  4F 57 53 5C 53 79
020C:320E  73 74 65 6D 33 32
020C:3214  5C 57
020C:3216  62 65 6D 00				db	'bem', 0
020C:321A  50 41 54 48 45 58			db	'PATHEXT=.COM;.EXE;.BAT;.CMD;.VBS'
020C:3220  54 3D 2E 43 4F 4D
020C:3226  3B 2E 45 58 45 3B
020C:322C  2E 42 41 54 3B 2E
020C:3232  43 4D 44 3B 2E 56
020C:3238  42 53
020C:323A  3B 2E 56 42 45 3B			db	';.VBE;.JS;.JSE;.WSF;.WSH', 0
020C:3240  2E 4A 53 3B 2E 4A
020C:3246  53 45 3B 2E 57 53
020C:324C  46 3B 2E 57 53 48
020C:3252  00
020C:3253  50 52 4F 43 45 53			db	'PROCESSOR_ARCHITECTURE=x86', 0
020C:3259  53 4F 52 5F 41 52
020C:325F  43 48 49 54 45 43
020C:3265  54 55 52 45 3D 78
020C:326B  38 36 00
020C:326E  50 52 4F 43 45 53			db	'PROCESSOR_IDENTIFIER=x86 Family '
020C:3274  53 4F 52 5F 49 44
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 118

020C:327A  45 4E 54 49 46 49
020C:3280  45 52 3D 78 38 36
020C:3286  20 46 61 6D 69 6C
020C:328C  79 20
020C:328E  36 20 4D 6F 64 65			db	'6 Model 142 Stepping 9, GenuineI'
020C:3294  6C 20 31 34 32 20
020C:329A  53 74 65 70 70 69
020C:32A0  6E 67 20 39 2C 20
020C:32A6  47 65 6E 75 69 6E
020C:32AC  65 49
020C:32AE  6E 74 65 6C 00			db	'ntel', 0
020C:32B3  50 52 4F 43 45 53			db	'PROCESSOR_LEVEL=6', 0
020C:32B9  53 4F 52 5F 4C 45
020C:32BF  56 45 4C 3D 36 00
020C:32C5  50 52 4F 43 45 53			db	'PROCESSOR_REVISION=8e09', 0
020C:32CB  53 4F 52 5F 52 45
020C:32D1  56 49 53 49 4F 4E
020C:32D7  3D 38 65 30 39 00
020C:32DD  50 52 4F 47 52 41			db	'PROGRAMFILES=C:\PROGRA~1', 0
020C:32E3  4D 46 49 4C 45 53
020C:32E9  3D 43 3A 5C 50 52
020C:32EF  4F 47 52 41 7E 31
020C:32F5  00
020C:32F6  50 52 4F 4D 50 54			db	'PROMPT=$'
020C:32FC  3D 24
020C:32FE  50 24				db	'P$'
020C:3300  47 00				db	'G', 0
020C:3302  53 45 53 53 49 4F			db	'SESSIONNAME=Console', 0
020C:3308  4E 4E 41 4D 45 3D
020C:330E  43 6F 6E 73 6F 6C
020C:3314  65 00
020C:3316  53 59 53 54 45 4D			db	'SYSTEMDRIVE=C:', 0
020C:331C  44 52 49 56 45 3D
020C:3322  43 3A 00
020C:3325  53 59 53 54 45 4D			db	'SYSTEMROOT=C:\WINDOWS', 0
020C:332B  52 4F 4F 54 3D 43
020C:3331  3A 5C 57 49 4E 44
020C:3337  4F 57 53 00
020C:333B  54 45 4D 50 3D 43			db	'TEMP=C:\WINDOWS\TEMP', 0
020C:3341  3A 5C 57 49 4E 44
020C:3347  4F 57 53 5C 54 45
020C:334D  4D 50 00
020C:3350  54 4D 50 3D 43 3A			db	'TMP=C:\WINDOWS\TEMP', 0
020C:3356  5C 57 49 4E 44 4F
020C:335C  57 53 5C 54 45 4D
020C:3362  50 00
020C:3364  55 53 45 52 44 4F			db	'USERDOMAIN=F252', 0
020C:336A  4D 41 49 4E 3D 46
020C:3370  32 35 32 00
020C:3374  55 53 45 52 4E 41			db	'USERNAME=_'
020C:337A  4D 45 3D 5F
020C:337E  FD					std				; Set direction flag
020C:337F  BF 2DF0				mov	di,2DF0h
020C:3382  F0> A1 A0A2		                           lock	mov	ax,word ptr ds:[0A0A2h]	; (020C:A0A2=0B80Bh)
020C:3386  FF A2 A052				jmp	word ptr [bp+si-5FAEh]	;*
020C:338A  00 55 53				add	[di+53h],dl
020C:338D  45 52 50 52 4F 46			db	'ERPROFILE=C:\DOCUME~1\9335~1', 0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 119

020C:3393  49 4C 45 3D 43 3A
020C:3399  5C 44 4F 43 55 4D
020C:339F  45 7E 31 5C 39 33
020C:33A5  33 35 7E 31 00
020C:33AA  42 4C 41 53 54 45			db	'BLASTER=A220 I5 D1 P330 T3'
020C:33B0  52 3D 41 32 32 30
020C:33B6  20 49 35 20 44 31
020C:33BC  20 50 33 33 30 20
020C:33C2  54 33
020C:33C4  00 00				add	[bx+si],al
020C:33C6  01 00				add	[bx+si],ax
020C:33C8  43 3A 5C 44 4F 43			db	'C:\DOCUME~1\9335~1\0016~1\SR.EXE'
020C:33CE  55 4D 45 7E 31 5C
020C:33D4  39 33 33 35 7E 31
020C:33DA  5C 30 30 31 36 7E
020C:33E0  31 5C 53 52 2E 45
020C:33E6  58 45
020C:33E8  00					db	0
020C:33E9  3C 02				cmp	al,2
020C:33EB  BA 070A				mov	dx,70Ah
020C:33EE  BE 5A36				mov	si,5A36h
020C:33F1  4C					dec	sp
020C:33F2  05 9AB3				add	ax,9AB3h
020C:33F5  2D E807				sub	ax,0E807h
020C:33F8  53					push	bx
020C:33F9  52					push	dx
020C:33FA  00 01				add	[bx+di],al
020C:33FC  00 C3				add	bl,al
020C:33FE  B8 CD07				mov	ax,0CD07h
020C:3401  20 FF				and	bh,bh
020C:3403  9F					lahf				; Load ah from flags
020C:3404  00 9A FEF0				add	[bp+si-110h],bl
020C:3408  1D DEF0				sbb	ax,0DEF0h
020C:340B  01 10				add	[bx+si],dx
020C:340D  04 4B				add	al,4Bh			; 'K'
020C:340F  01 10				add	[bx+si],dx
020C:3411  04 56				add	al,56h			; 'V'
020C:3413  01 10				add	[bx+si],dx
020C:3415  04 10				add	al,10h
020C:3417  04 01				add	al,1
020C:3419  01 01				add	[bx+di],ax
020C:341B  00 02				add	[bp+si],al
020C:341D  000F[03]				db	15 dup (3)
020C:342C  13 05				adc	ax,[di]
020C:342E  3E					db	3Eh
020C:342F  02 D0				add	dl,al
020C:3431  1C 14				sbb	al,14h
020C:3433  00 18				add	[bx+si],bl
020C:3435  00 4C 05				add	[si+5],cl
020C:3438  FF					db	0FFh
020C:3439  FF					db	0FFh
020C:343A  FF					db	0FFh
020C:343B  FF 00				inc	word ptr [bx+si]
020C:343D  00 00				add	[bx+si],al
020C:343F  00 05				add	[di],al
020C:3441  000F[00]				db	15 dup (0)
020C:3450  CD 21				int	21h			; ??INT Non-standard interrupt
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 120

020C:3452  CB					retf				; Return far
020C:3453  000A[00]				db	10 dup (0)
020C:345D  000B[20]				db	11 dup (20h)
020C:3468  00					db	0
020C:3469  00					db	0
020C:346A  00 00				add	[bx+si],al
020C:346C  00 20				add	[bx+si],ah
020C:346E  000A[20]				db	10 dup (20h)
020C:3478  0009[00]				db	9 dup (0)
020C:3481  0D 2020				or	ax,2020h
020C:3484  20 53 45				and	[bp+di+45h],dl
020C:3487  54					push	sp
020C:3488  20 42 4C				and	[bp+si+4Ch],al
020C:348B  41					inc	cx
020C:348C  53					push	bx
020C:348D  54					push	sp
020C:348E  45					inc	bp
020C:348F  52					push	dx
020C:3490  3D 3041				cmp	ax,3041h
020C:3493  0D A8AD				or	ax,0A8ADh
020C:3496  A5					movsw				; Mov [si] to es:[di]
020C:3497  20 A4 EFAB				and	byte ptr ds:[0EFABh][si],ah	; (020C:EFAB=15h)
020C:349B  20 A1 A7A2				and	byte ptr ds:[0A7A2h][bx+di],ah	; (020C:A7A2=0F7h)
020C:349F  AE					scasb				; Scan es:[di] for al
020C:34A0  A2 A3AE				mov	byte ptr ds:[0A3AEh],al	; (020C:A3AE=16h)
020C:34A3  AE					scasb				; Scan es:[di] for al
020C:34A4  20 AF E0AE				and	byte ptr ds:[0E0AEh][bx],ch	; (020C:E0AE=0FEh)
020C:34A8  E2 A0		;*		loop	locloop_376		;*Loop if cx > 0

020C:34A8  E2 A0				db	0E2h,0A0h
020C:34AA  20 A2 AEA2				and	[bp+si-515Eh],ah
020C:34AE  A4					movsb				; Mov [si] to es:[di]
020C:34AF  A0 A22D				mov	al,byte ptr ds:[0A22Dh]	; (020C:A22D=9)
020C:34B2  EB A2		;*		jmp	short loc_377		;*(3456)
020C:34B2  EB A2				db	0EBh,0A2h
020C:34B4  AE					scasb				; Scan es:[di] for al

020C:34B5			locloop_378:
020C:34B5  A4					movsb				; Mov [si] to es:[di]
020C:34B6  A0 5320				mov	al,byte ptr ds:[5320h]	; (020C:5320=60h)
020C:34B9  42					inc	dx
020C:34BA  2C 20				sub	al,20h			; ' '
020C:34BC  AD					lodsw				; String [si] to ax
020C:34BD  A0 E0AF				mov	al,byte ptr ds:[0E0AFh]	; (020C:E0AF=38h)
020C:34C0  A8 AC				test	al,0ACh
020C:34C2  A5					movsw				; Mov [si] to es:[di]
020C:34C3  E0 3A				loopnz	locloop_379		; Loop if zf=0, cx>0

020C:34C5  0D 0DEC				or	ax,0DECh
020C:34C8  E0 EB				loopnz	locloop_378		; Loop if zf=0, cx>0

020C:34CA  A5					movsw				; Mov [si] to es:[di]
020C:34CB  0D 0000				or	ax,0
020C:34CE  0032[00]				db	50 dup (0)
020C:3500  53 6F 75 72 63 65			db	'Sourcer - V Communications, Inc.'
020C:3506  72 20 2D 20 56 20
020C:350C  43 6F 6D 6D 75 6E
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 121

020C:3512  69 63 61 74 69 6F
020C:3518  6E 73 2C 20 49 6E
020C:351E  63 2E
020C:3520  20 43 6F 70 79 72			db	' Copyright 1988-1993 V5.10  s/n '
020C:3526  69 67 68 74 20 31
020C:352C  39 38 38 2D 31 39
020C:3532  39 33 20 56 35 2E
020C:3538  31 30 20 20 73 2F
020C:353E  6E 20
020C:3540  42 33 31 31 33 31			db	'B311312-XBIOF05/09/07'
020C:3546  32 2D 58 42 49 4F
020C:354C  46 30 35 2F 30 39
020C:3552  2F 30 37
020C:3555  FF					db	0FFh
020C:3556  FC					cld				; Clear direction
020C:3557  CE					into				; Int 4 on overflow
020C:3558  20 42 79 20 46 72			db	' By Frank van Gilluwe (09/14/93,'
020C:355E  61 6E 6B 20 76 61
020C:3564  6E 20 47 69 6C 6C
020C:356A  75 77 65 20 28 30
020C:3570  39 2F 31 34 2F 39
020C:3576  33 2C
020C:3578  31 35 3A 32 30 3A			db	'15:20:30)'
020C:357E  33 30 29
020C:3581  000F[00]				db	15 dup (0)
020C:3590  4C					dec	sp
020C:3591  05 2E8D				add	ax,2E8Dh
020C:3594  00 00				add	[bx+si],al
020C:3596  46					inc	si
020C:3597  32 00				xor	al,[bx+si]
020C:3599  2E: 8C 06 0090			mov	word ptr cs:[90h],es	; (020C:0090=1FBFh)
020C:359E  E8 3857				call	$+385Ah
020C:35A1  9A 6E1A:4E64		;*		call	far ptr sub_81		;*(6E1A:4E64)
020C:35A1  9A					db	9Ah
020C:35A2  4E64 6E1A				dw	4E64h, 6E1Ah
020C:35A6  E8 3813				call	$+3816h
020C:35A9  9A 6E1A:54B0		;*		call	far ptr sub_83		;*(6E1A:54B0)
020C:35A9  9A					db	9Ah
020C:35AA  54B0 6E1A				dw	54B0h, 6E1Ah
020C:35AE  E8 8097				call	$-7F66h
020C:35B1  BE 0080				mov	si,80h
020C:35B4  E8 3C0E				call	$+3C11h
020C:35B7  2E: A1 0090				mov	ax,word ptr cs:[90h]	; (020C:0090=1FBFh)
020C:35BB  A3 5618				mov	word ptr ds:[5618h],ax	; (020C:5618=0EFD1h)
020C:35BE  BF 5156				mov	di,5156h
020C:35C1  03 FE				add	di,si
020C:35C3  E8 3C1A				call	$+3C1Dh
020C:35C6  26: 80 85 0100 CD			add	es:data_55[di],0CDh	; (020C:0100=28h)
020C:35CC  C6 06 2B36 00			mov	data_214,0		; (020C:2B36=0ADh)
020C:35D1  83 3E 1321 00			cmp	data_141,0		; (020C:1321=0)
020C:35D6  74 14				je	loc_380			; Jump if equal
020C:35D8  BE 1321				mov	si,1321h
020C:35DB  8B C6				mov	ax,si
020C:35DD  05 0004				add	ax,4
020C:35E0  A3 509E				mov	word ptr ds:[509Eh],ax	; (020C:509E=7C3Ch)
020C:35E3  E8			data_279	db	0E8h
020C:35E4  7E			data_280	db	7Eh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 122

020C:35E5  06					push	es
020C:35E6  72			data_281	db	72h
020C:35E7  04 89				add	al,89h
020C:35E9  1F16			data_283	dw	1F16h
020C:35EB  B913			data_284	dw	0B913h
020C:35ED  47					inc	di
020C:35EE  00 81 3AE9				add	byte ptr ds:[3AE9h][bx+di],al	; (020C:3AE9=80h)
020C:35F2  00 BF 01C5				add	byte ptr ds:[1C5h][bx],bh	; (020C:01C5=0)
020C:35F6  BE 003A				mov	si,3Ah
020C:35F9  B8 055C				mov	ax,55Ch
020C:35FC  8E D8				mov	ds,ax
020C:35FE  E8 3BDC				call	$+3BDFh
020C:3601  FC					cld				; Clear direction
020C:3602  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:3604  E8 3BBE				call	$+3BC1h
020C:3607  9A 6E1A:5284		;*		call	far ptr sub_82		;*(6E1A:5284)
020C:3607  9A					db	9Ah
020C:3608  5284 6E1A				dw	5284h, 6E1Ah
020C:360C  B6 00				mov	dh,0
020C:360E  E8 20C7				call	$+20CAh
020C:3611  B4 01				mov	ah,1
020C:3613  9A 1516:328C		;*		call	far ptr sub_67		;*(1516:328C)
020C:3613  9A					db	9Ah
020C:3614  328C 1516				dw	328Ch, 1516h
020C:3618  BF 1141				mov	di,1141h
020C:361B  81 EF 1023				sub	di,1023h
020C:361F  9A 1516:08E4		;*		call	far ptr sub_55		;*(1516:08E4)
020C:361F  9A					db	9Ah
020C:3620  08E4 1516				dw	8E4h, 1516h
020C:3624  8C C8				mov	ax,cs
020C:3626  9A 6E1A:54E0		;*		call	far ptr sub_84		;*(6E1A:54E0)
020C:3626  9A					db	9Ah
020C:3627  54E0 6E1A				dw	54E0h, 6E1Ah
020C:362B  80 3E 2B44 02			cmp	byte ptr ds:[2B44h],2	; (ss:2B44=0FAh)
020C:3630  74 07				je	loc_381			; Jump if equal
020C:3632  80 3E 2B40 01			cmp	byte ptr ds:[2B40h],1	; (ss:2B40=0)
020C:3637  75 42				jne	loc_382			; Jump if not equal
020C:3639			loc_381:
020C:3639  E8 3BA1				call	$+3BA4h
020C:363C  BF 00E8				mov	di,0E8h
020C:363F  B0 2A				mov	al,2Ah			; '*'
020C:3641  B9 0029				mov	cx,29h
020C:3644  FC					cld				; Clear direction
020C:3645  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:3647  BF 0188				mov	di,188h
020C:364A  B9 0029				mov	cx,29h
020C:364D  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:364F  BE 006F				mov	si,6Fh
020C:3652  BF 0138				mov	di,138h
020C:3655  B9 0027				mov	cx,27h
020C:3658  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:365A  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (ss:1326=41B5h)
020C:365E  A0 1209				mov	al,byte ptr ds:[1209h]	; (ss:1209=0C0h)
020C:3661  88 47 59				mov	[bx+59h],al
020C:3664  88 47 46				mov	[bx+46h],al
020C:3667  88 47 5B				mov	[bx+5Bh],al
020C:366A  B0 07				mov	al,7
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 123

020C:366C  88 47 57				mov	[bx+57h],al
020C:366F  88 47 58				mov	[bx+58h],al
020C:3672  88 47 5A				mov	[bx+5Ah],al
020C:3675  88 47 42				mov	[bx+42h],al
020C:3678  88 47 45				mov	[bx+45h],al
020C:367B			loc_382:
020C:367B  9A 1516:2B34		;*		call	far ptr sub_63		;*(1516:2B34)
020C:367B  9A					db	9Ah
020C:367C  2B34 1516				dw	2B34h, 1516h
020C:3680  E8 1F9D				call	$+1FA0h
020C:3683  E8 7C8A				call	$+7C8Dh
020C:3686  80 3E 2B40 01			cmp	byte ptr ds:[2B40h],1	; (ss:2B40=0)
020C:368B  75 14				jne	loc_383			; Jump if not equal
020C:368D  53					push	bx
020C:368E  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (ss:1326=41B5h)
020C:3692  C6 47 41 07				mov	byte ptr [bx+41h],7
020C:3696  C6 06 1207 07			mov	byte ptr ds:[1207h],7	; (ss:1207=6)
020C:369B  C6 06 1208 07			mov	byte ptr ds:[1208h],7	; (ss:1208=8Eh)
020C:36A0  5B					pop	bx
020C:36A1			loc_383:
020C:36A1  9A 1516:7340		;*		call	far ptr sub_74		;*(1516:7340)
020C:36A1  9A					db	9Ah
020C:36A2  7340 1516				dw	7340h, 1516h
020C:36A6  80 3E 4103 00			cmp	byte ptr ds:[4103h],0	; (ss:4103=0B7h)
020C:36AB  74 42				je	loc_385			; Jump if equal
020C:36AD  BF 4103				mov	di,4103h
020C:36B0  B0 00				mov	al,0
020C:36B2  9A 1516:2724		;*		call	far ptr sub_60		;*(1516:2724)
020C:36B2  9A					db	9Ah
020C:36B3  2724 1516				dw	2724h, 1516h
020C:36B7  9A 1516:27AC		;*		call	far ptr sub_61		;*(1516:27AC)
020C:36B7  9A					db	9Ah
020C:36B8  27AC 1516				dw	27ACh, 1516h
020C:36BC  A2 327E				mov	byte ptr ds:[327Eh],al	; (ss:327E=0B0h)
020C:36BF  3C 00				cmp	al,0
020C:36C1  74 2C				je	loc_385			; Jump if equal
020C:36C3  50					push	ax
020C:36C4  57					push	di
020C:36C5  BE 4103				mov	si,4103h
020C:36C8  BF 31F0				mov	di,31F0h
020C:36CB  8B CB				mov	cx,bx
020C:36CD  FC					cld				; Clear direction
020C:36CE  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:36D0  5F					pop	di
020C:36D1  4F					dec	di
020C:36D2  9A 1516:7270		;*		call	far ptr sub_73		;*(1516:7270)
020C:36D2  9A					db	9Ah
020C:36D3  7270 1516				dw	7270h, 1516h
020C:36D7  58					pop	ax
020C:36D8  83 FB 0C				cmp	bx,0Ch
020C:36DB  77 0D				ja	loc_384			; Jump if above
020C:36DD  3C 01				cmp	al,1
020C:36DF  74 22				je	loc_387			; Jump if equal
020C:36E1  80 3E 438F 01			cmp	byte ptr ds:[438Fh],1	; (ss:438F=0FFh)
020C:36E6  75 10				jne	loc_386			; Jump if not equal
020C:36E8  EB 4B				jmp	short loc_391		; (3735)
020C:36EA			loc_384:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 124

020C:36EA  C6 06 327E 00			mov	byte ptr ds:[327Eh],0	; (ss:327E=0B0h)
020C:36EF			loc_385:
020C:36EF  80 3E 438F 01			cmp	byte ptr ds:[438Fh],1	; (ss:438F=0FFh)
020C:36F4  75 02				jne	loc_386			; Jump if not equal
020C:36F6  EB 45				jmp	short loc_392		; (373D)
020C:36F8			loc_386:
020C:36F8  BD 4103				mov	bp,4103h
020C:36FB  BE 4381				mov	si,4381h
020C:36FE  9A 1516:4160		;*		call	far ptr sub_69		;*(1516:4160)
020C:36FE  9A					db	9Ah
020C:36FF  4160 1516				dw	4160h, 1516h
020C:3703			loc_387:
020C:3703  B4 2A				mov	ah,2Ah			; '*'
020C:3705  E8 2134				call	$+2137h
020C:3708  E8 1D89				call	$+1D8Ch
020C:370B  BA 4103				mov	dx,4103h
020C:370E  B4 3D				mov	ah,3Dh			; '='
020C:3710  B0 00				mov	al,0
020C:3712  B9 0000				mov	cx,0
020C:3715  CD 21				int	21h			; DOS Services  ah=function 3Dh
										;  open file, al=mode,name@ds:dx
020C:3717  A3 4150				mov	word ptr ds:[4150h],ax	; (ss:4150=8E2Eh)
020C:371A  73 12				jnc	loc_390			; Jump if carry=0
020C:371C  80 3E 327E 01			cmp	byte ptr ds:[327Eh],1	; (ss:327E=0B0h)
020C:3721  77 09				ja	loc_389			; Jump if above
020C:3723  75 05				jnz	loc_388			; Jump if not zero
020C:3725  B3 01				mov	bl,1
020C:3727  E9 3430				jmp	$+3433h
020C:372A			loc_388:
020C:372A  EB 11				jmp	short loc_392		; (373D)
020C:372C			loc_389:
020C:372C  EB 07				jmp	short loc_391		; (3735)
020C:372E			loc_390:
020C:372E  9A 1516:0B10		;*		call	far ptr sub_57		;*(1516:0B10)
020C:372E  9A					db	9Ah
020C:372F  0B10 1516				dw	0B10h, 1516h
020C:3733  EB 08				jmp	short loc_392		; (373D)
020C:3735			loc_391:
020C:3735  E8 5E1C				call	$+5E1Fh
020C:3738  73 03				jnc	loc_392			; Jump if carry=0
020C:373A  E9 3546				jmp	$+3549h
020C:373D			loc_392:
020C:373D  C6 06 2B36 01			mov	byte ptr ds:[2B36h],1	; (ss:2B36=75h)
020C:3742  8A 26 327D				mov	ah,byte ptr ds:[327Dh]	; (ss:327D=15h)
020C:3746  E8 20F3				call	$+20F6h
020C:3749  E8 1D48				call	$+1D4Bh
020C:374C  80 3E 4F13 01			cmp	byte ptr ds:[4F13h],1	; (ss:4F13=0A3h)
020C:3751  75 08				jne	loc_393			; Jump if not equal
020C:3753  C6 06 4F13 00			mov	byte ptr ds:[4F13h],0	; (ss:4F13=0A3h)
020C:3758  E9 0E95				jmp	loc_573			; (45F0)
020C:375B			loc_393:
020C:375B  E8 3A7F				call	$+3A82h
020C:375E  2E: 80 3E 0098 01			cmp	cs:data_52,1		; (020C:0098=0)
020C:3764  74 20				je	loc_397			; Jump if equal
020C:3766  B4 07				mov	ah,7
020C:3768  CD 21				int	21h			; DOS Services  ah=function 07h
										;  get keybd char al, no echo
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 125

020C:376A  3C 00				cmp	al,0
020C:376C  75 0D				jne	loc_395			; Jump if not equal
020C:376E  B4 07				mov	ah,7
020C:3770  CD 21				int	21h			; DOS Services  ah=function 07h
										;  get keybd char al, no echo
020C:3772  3C 3B				cmp	al,3Bh			; ';'
020C:3774  75 03				jne	loc_394			; Jump if not equal
020C:3776  E9 188C		;*		jmp	loc_683			;*(5005)
020C:3776  E9 8C 18				db	0E9h, 8Ch, 18h
020C:3779			loc_394:
020C:3779  EB 3B				jmp	short loc_400		; (37B6)
020C:377B			loc_395:
020C:377B  3C 3F				cmp	al,3Fh			; '?'
020C:377D  75 03				jne	loc_396			; Jump if not equal
020C:377F  E9 1883		;*		jmp	loc_683			;*(5005)
020C:377F  E9 83 18				db	0E9h, 83h, 18h
020C:3782			loc_396:
020C:3782  3C 1B				cmp	al,1Bh
020C:3784  75 03				jne	loc_398			; Jump if not equal
020C:3786			loc_397:
020C:3786  E9 161C				jmp	loc_657			; (4DA5)
020C:3789			loc_398:
020C:3789  3C 2B				cmp	al,2Bh			; '+'
020C:378B  75 03				jne	loc_399			; Jump if not equal
020C:378D  E9 19B5				jmp	$+19B8h
020C:3790			loc_399:
020C:3790  3C 80				cmp	al,80h
020C:3792  73 E5				jae	loc_394			; Jump if above or =
020C:3794  A8 40				test	al,40h			; '@'
020C:3796  74 E1				jz	loc_394			; Jump if zero
020C:3798  24 5F				and	al,5Fh			; '_'
020C:379A  B9 5069				mov	cx,5069h
020C:379D  81 E9 5050				sub	cx,5050h
020C:37A1  BF 5050				mov	di,5050h
020C:37A4  FC					cld				; Clear direction
020C:37A5  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020C:37A7  E3 0D				jcxz	loc_400			; Jump if cx=0
020C:37A9  4F					dec	di
020C:37AA  81 EF 5050				sub	di,5050h
020C:37AE  D1 E7				shl	di,1			; Shift w/zeros fill
020C:37B0  81 C7 5069				add	di,5069h
020C:37B4  FF 25				jmp	word ptr [di]		;*
020C:37B6			loc_400:
020C:37B6  9A 1516:2B10		;*		call	far ptr sub_62		;*(1516:2B10)
020C:37B6  9A					db	9Ah
020C:37B7  2B10 1516				dw	2B10h, 1516h
020C:37BB  EB 9E				jmp	short loc_393		; (375B)
							                        ;* No entry point to code
020C:37BD  E8 2020				call	$+2023h
020C:37C0  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020C:37C4  B4 22				mov	ah,22h			; '"'
020C:37C6  E8 2073				call	$+2076h
020C:37C9  E8 1CC8				call	$+1CCBh
020C:37CC  80 3E 1329 01			cmp	byte ptr ds:[1329h],1	; (ss:1329=0E9h)
020C:37D1  75 30				jne	loc_403			; Jump if not equal
020C:37D3  B4 02				mov	ah,2
020C:37D5  32 FF				xor	bh,bh			; Zero register
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 126

020C:37D7  BA 0500				mov	dx,500h
020C:37DA  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:37DA  9A					db	9Ah
020C:37DB  2BA8 1516				dw	2BA8h, 1516h
020C:37DF  BE 0623				mov	si,623h
020C:37E2  B9 0BC3				mov	cx,0BC3h
020C:37E5  81 E9 0623				sub	cx,623h
020C:37E9  49					dec	cx
020C:37EA  E8 39F3				call	$+39F6h

020C:37ED			locloop_401:
020C:37ED  33 ED				xor	bp,bp			; Zero register
020C:37EF  26: 8A 14				mov	dl,es:[si]
020C:37F2  80 FA F4				cmp	dl,0F4h
020C:37F5  72 02				jb	loc_402			; Jump if below
020C:37F7  B2 20				mov	dl,20h			; ' '
020C:37F9			loc_402:
020C:37F9  9A 1516:07A0		;*		call	far ptr sub_53		;*(1516:07A0)
020C:37F9  9A					db	9Ah
020C:37FA  07A0 1516				dw	7A0h, 1516h
020C:37FE  46					inc	si
020C:37FF  E2 EC				loop	locloop_401		; Loop if cx > 0

020C:3801  EB 7C				jmp	short loc_412		; (387F)
020C:3803			loc_403:
020C:3803  E8 1CD2				call	$+1CD5h
020C:3806  8E 06 131B				mov	es,word ptr ds:[131Bh]	; (ss:131B=19F9h)
020C:380A  BF 0320				mov	di,320h
020C:380D  03 3E 131D				add	di,word ptr ds:[131Dh]	; (ss:131D=777h)
020C:3811  E8 39B4				call	$+39B7h
020C:3814  BE 0623				mov	si,623h
020C:3817  B9 0BC3				mov	cx,0BC3h
020C:381A  81 E9 0623				sub	cx,623h
020C:381E  B7 07				mov	bh,7
020C:3820  FC					cld				; Clear direction

020C:3821			locloop_404:
020C:3821  8A DF				mov	bl,bh
020C:3823  80 3C FE				cmp	byte ptr [si],0FEh
020C:3826  75 0F				jne	loc_407			; Jump if not equal
020C:3828  80 FF 07				cmp	bh,7
020C:382B  75 04				jne	loc_405			; Jump if not equal
020C:382D  B7 0F				mov	bh,0Fh
020C:382F  EB 02				jmp	short loc_406		; (3833)
020C:3831			loc_405:
020C:3831  B7 07				mov	bh,7
020C:3833			loc_406:
020C:3833  8A DF				mov	bl,bh
020C:3835  EB 0F				jmp	short loc_408		; (3846)
020C:3837			loc_407:
020C:3837  80 3C F4				cmp	byte ptr [si],0F4h
020C:383A  72 15				jb	loc_409			; Jump if below
020C:383C  1E					push	ds
020C:383D  E8 3985				call	$+3988h
020C:3840  8A 1E 1207				mov	bl,byte ptr ds:[1207h]	; (ss:1207=6)
020C:3844  1F					pop	ds
020C:3845  FC					cld				; Clear direction
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 127

020C:3846			loc_408:
020C:3846  B0 20				mov	al,20h			; ' '
020C:3848  AA					stosb				; Store al to es:[di]
020C:3849  46					inc	si
020C:384A  26: 88 1D				mov	es:[di],bl
020C:384D  47					inc	di
020C:384E  49					dec	cx
020C:384F  EB 0E				jmp	short loc_410		; (385F)
020C:3851			loc_409:
020C:3851  80 3C 80				cmp	byte ptr [si],80h
020C:3854  72 09				jb	loc_410			; Jump if below
020C:3856  1E					push	ds
020C:3857  E8 396B				call	$+396Eh
020C:385A  8A 1E 1206				mov	bl,byte ptr ds:[1206h]	; (ss:1206=0)
020C:385E  1F					pop	ds
020C:385F			loc_410:
020C:385F  AC					lodsb				; String [si] to al
020C:3860  1E					push	ds
020C:3861  E8 3961				call	$+3964h
020C:3864  80 3E 2B44 02			cmp	byte ptr ds:[2B44h],2	; (ss:2B44=0FAh)
020C:3869  75 0C				jne	loc_411			; Jump if not equal
020C:386B  3C 80				cmp	al,80h
020C:386D  72 08				jb	loc_411			; Jump if below
020C:386F  53					push	bx
020C:3870  BB 2B61				mov	bx,2B61h
020C:3873  2C 80				sub	al,80h
020C:3875  D7					xlat				; al=[al+[bx]] table
020C:3876  5B					pop	bx
020C:3877			loc_411:
020C:3877  1F					pop	ds
020C:3878  AA					stosb				; Store al to es:[di]
020C:3879  26: 88 1D				mov	es:[di],bl
020C:387C  47					inc	di
020C:387D  E2 A2				loop	locloop_404		; Loop if cx > 0

020C:387F			loc_412:
020C:387F  E8 3943				call	$+3946h
020C:3882  E8 1C77				call	$+1C7Ah
020C:3885  83 26 4E19 FE			and	word ptr ds:[4E19h],0FFFEh	; (ss:4E19=3F08h)
020C:388A  8B 1E 4E22				mov	bx,word ptr ds:[4E22h]	; (ss:4E22=804Eh)
020C:388E  E8 237F				call	$+2382h
020C:3891			loc_414:
020C:3891  9A 1516:0760		;*		call	far ptr sub_52		;*(1516:0760)
020C:3891  9A					db	9Ah
020C:3892  0760 1516				dw	760h, 1516h
020C:3896  3C 00				cmp	al,0
020C:3898  74 0A				je	loc_415			; Jump if equal
020C:389A  24 5F				and	al,5Fh			; '_'
020C:389C  3C 41				cmp	al,41h			; 'A'
020C:389E  72 04				jb	loc_415			; Jump if below
020C:38A0  3C 5A				cmp	al,5Ah			; 'Z'
020C:38A2  76 03				jbe	loc_416			; Jump if below or =
020C:38A4			loc_415:
020C:38A4  E9 0098				jmp	loc_421			; (393F)
020C:38A7			loc_416:
020C:38A7  503C			data_287	dw	503Ch
020C:38A9  77 29				ja	loc_417			; Jump if above
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 128

020C:38AB  2C 41				sub	al,41h			; 'A'
020C:38AD  BB 8000				mov	bx,8000h
020C:38B0  8A C8				mov	cl,al
020C:38B2  D3 CB				ror	bx,cl			; Rotate
020C:38B4  8B 16 4E22				mov	dx,word ptr ds:[4E22h]	; (ss:4E22=804Eh)
020C:38B8  8B CA				mov	cx,dx
020C:38BA  23 D3				and	dx,bx
020C:38BC  F7 D2				not	dx
020C:38BE  23 D3				and	dx,bx
020C:38C0  F7 D3				not	bx
020C:38C2  23 CB				and	cx,bx
020C:38C4  0B CA				or	cx,dx
020C:38C6  F7 06 4E19 0002			test	word ptr ds:[4E19h],2	; (ss:4E19=3F08h)
020C:38CC  75 62				jnz	loc_419			; Jump if not zero
020C:38CE  89 0E 4E22				mov	word ptr ds:[4E22h],cx	; (ss:4E22=804Eh)
020C:38D2  EB 61				jmp	short loc_420		; (3935)
020C:38D4			loc_417:
020C:38D4  3C 54				cmp	al,54h			; 'T'
020C:38D6  77 2F				ja	loc_418			; Jump if above
020C:38D8  80 3E 35E6 00			cmp	byte ptr ds:[35E6h],0	; (ss:35E6=52h)
020C:38DD  74 51				je	loc_419			; Jump if equal
020C:38DF  2C 51				sub	al,51h			; 'Q'
020C:38E1  B3 04				mov	bl,4
020C:38E3  8A C8				mov	cl,al
020C:38E5  D2 CB				ror	bl,cl			; Rotate
020C:38E7  8A 16 4E7F				mov	dl,byte ptr ds:[4E7Fh]	; (ss:4E7F=3)
020C:38EB  8A CA				mov	cl,dl
020C:38ED  22 D3				and	dl,bl
020C:38EF  F6 D2				not	dl
020C:38F1  22 D3				and	dl,bl
020C:38F3  F6 D3				not	bl
020C:38F5  22 CB				and	cl,bl
020C:38F7  0A CA				or	cl,dl
020C:38F9  F7 06 4E19 0002			test	word ptr ds:[4E19h],2	; (ss:4E19=3F08h)
020C:38FF  75 2F				jnz	loc_419			; Jump if not zero
020C:3901  88 0E 4E7F				mov	byte ptr ds:[4E7Fh],cl	; (ss:4E7F=3)
020C:3905  EB 2E				jmp	short loc_420		; (3935)
020C:3907			loc_418:
020C:3907  2C 55				sub	al,55h			; 'U'
020C:3909  BB 0080				mov	bx,80h
020C:390C  8A C8				mov	cl,al
020C:390E  D3 CB				ror	bx,cl			; Rotate
020C:3910  8B 16 4E24				mov	dx,word ptr ds:[4E24h]	; (ss:4E24=7400h)
020C:3914  8B CA				mov	cx,dx
020C:3916  23 D3				and	dx,bx
020C:3918  F7 D2				not	dx
020C:391A  23 D3				and	dx,bx
020C:391C  F7 D3				not	bx
020C:391E  23 CB				and	cx,bx
020C:3920  0B CA				or	cx,dx
020C:3922  F7 06 4E19 0002			test	word ptr ds:[4E19h],2	; (ss:4E19=3F08h)
020C:3928  75 06				jnz	loc_419			; Jump if not zero
020C:392A  89 0E 4E24				mov	word ptr ds:[4E24h],cx	; (ss:4E24=7400h)
020C:392E  EB 05				jmp	short loc_420		; (3935)
020C:3930			loc_419:
020C:3930  9A 1516:2B10		;*		call	far ptr sub_62		;*(1516:2B10)
020C:3930  9A					db	9Ah
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 129

020C:3931  2B10 1516				dw	2B10h, 1516h
020C:3935			loc_420:
020C:3935  8B 1E 4E22				mov	bx,word ptr ds:[4E22h]	; (ss:4E22=804Eh)
020C:3939  E8 22D4				call	$+22D7h
020C:393C  E9 FF52				jmp	loc_414			; (3891)
020C:393F			loc_421:
020C:393F  E8 1EC6				call	$+1EC9h
020C:3942  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020C:3946  C6 47 67 00				mov	byte ptr [bx+67h],0
020C:394A  C6 06 2B36 01			mov	byte ptr ds:[2B36h],1	; (ss:2B36=75h)
020C:394F  8A 26 327D				mov	ah,byte ptr ds:[327Dh]	; (ss:327D=15h)
020C:3953  E8 1EE6				call	$+1EE9h
020C:3956  E8 1B3B				call	$+1B3Eh
020C:3959  A0 2B3B				mov	al,byte ptr ds:[2B3Bh]	; (ss:2B3B=0BAh)
020C:395C  F6 06 4E7F 07			test	byte ptr ds:[4E7Fh],7	; (ss:4E7F=3)
020C:3961  74 0C				jz	loc_422			; Jump if zero
020C:3963  80 3E 2B3B 0A			cmp	byte ptr ds:[2B3Bh],0Ah	; (ss:2B3B=0BAh)
020C:3968  73 05				jae	loc_422			; Jump if above or =
020C:396A  B0 0A				mov	al,0Ah
020C:396C  E8 264D				call	$+2650h
020C:396F			loc_422:
020C:396F  E8 2322				call	$+2325h
020C:3972  E9 FDE6				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:3975  E8 1E68				call	$+1E6Bh
020C:3978  C6 47 52 00				mov	byte ptr [bx+52h],0
020C:397C  C6 47 39 0F				mov	byte ptr [bx+39h],0Fh
020C:3980  C6 47 79 0F				mov	byte ptr [bx+79h],0Fh
020C:3984  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020C:3988  E8 19E5				call	$+19E8h
020C:398B  B4 02				mov	ah,2
020C:398D  32 FF				xor	bh,bh			; Zero register
020C:398F  BA 1313				mov	dx,1313h
020C:3992  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:3992  9A					db	9Ah
020C:3993  2BA8 1516				dw	2BA8h, 1516h
020C:3997  E8 2266				call	$+2269h
020C:399A  B1 04				mov	cl,4
020C:399C  B3 02				mov	bl,2
020C:399E  BE 0699				mov	si,699h
020C:39A1  9A 1516:0620		;*		call	far ptr sub_51		;*(1516:0620)
020C:39A1  9A					db	9Ah
020C:39A2  0620 1516				dw	620h, 1516h
020C:39A6  3C 1B				cmp	al,1Bh
020C:39A8  75 03				jne	loc_423			; Jump if not equal
020C:39AA  E9 00A2				jmp	loc_429			; (3A4F)
020C:39AD			loc_423:
020C:39AD  80 F9 00				cmp	cl,0
020C:39B0  74 03				je	loc_424			; Jump if equal
020C:39B2  E9 0095				jmp	loc_428			; (3A4A)
020C:39B5			loc_424:
020C:39B5  B9 0080				mov	cx,80h
020C:39B8  BF 0699				mov	di,699h
020C:39BB  E8 0262				call	sub_38			; (3C20)
020C:39BE  72 03				jc	loc_425			; Jump if carry Set
020C:39C0  E9 0087				jmp	loc_428			; (3A4A)
020C:39C3			loc_425:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 130

020C:39C3  89 16 3029				mov	word ptr ds:[3029h],dx	; (ss:3029=0FFFBh)
020C:39C7  B2 3A				mov	dl,3Ah			; ':'
020C:39C9  9A 1516:07A0		;*		call	far ptr sub_53		;*(1516:07A0)
020C:39C9  9A					db	9Ah
020C:39CA  07A0 1516				dw	7A0h, 1516h
020C:39CE  B1 04				mov	cl,4
020C:39D0  B3 02				mov	bl,2
020C:39D2  BE 069E				mov	si,69Eh
020C:39D5  9A 1516:0620		;*		call	far ptr sub_51		;*(1516:0620)
020C:39D5  9A					db	9Ah
020C:39D6  0620 1516				dw	620h, 1516h
020C:39DA  3C 1B				cmp	al,1Bh
020C:39DC  74 71				je	loc_429			; Jump if equal
020C:39DE  80 F9 00				cmp	cl,0
020C:39E1  75 67				jne	loc_428			; Jump if not equal
020C:39E3  B9 0080				mov	cx,80h
020C:39E6  BF 069E				mov	di,69Eh
020C:39E9  E8 0234				call	sub_38			; (3C20)
020C:39EC  73 5C				jnc	loc_428			; Jump if carry=0
020C:39EE  E8 37E3				call	$+37E6h
020C:39F1  26: 89 16 0002			mov	word ptr es:[2],dx	; (19F9:0002=5F5Eh)
020C:39F6  26: 83 3E 0006 FF			cmp	word ptr es:[6],0FFFFh	; (19F9:0006=0CB5Bh)
020C:39FC  75 07				jne	loc_426			; Jump if not equal
020C:39FE  26: C7 06 0004 0000			mov	word ptr es:[4],0	; (19F9:0004=595Ah)
020C:3A05			loc_426:
020C:3A05  A1 3029				mov	ax,word ptr ds:[3029h]	; (ss:3029=0FFFBh)
020C:3A08  26: A3 0000				mov	word ptr es:[0],ax	; (19F9:0000=585Ah)
020C:3A0C  26: A3 0006				mov	word ptr es:[6],ax	; (19F9:0006=0CB5Bh)
020C:3A10  26: A3 0008				mov	word ptr es:[8],ax	; (19F9:0008=5350h)
020C:3A14  26: C6 06 000E 00			mov	byte ptr es:[0Eh],0	; (19F9:000E=50h)
020C:3A1A  26: 83 3E 000A FF			cmp	word ptr es:[0Ah],0FFFFh	; (19F9:000A=5251h)
020C:3A20  75 19				jne	loc_427			; Jump if not equal
020C:3A22  26: C7 06 000A 0000			mov	word ptr es:[0Ah],0	; (19F9:000A=5251h)
020C:3A29  26: C7 06 000C 0041			mov	word ptr es:[0Ch],41h	; (19F9:000C=5657h)
020C:3A30  80 3E 3040 00			cmp	byte ptr ds:[3040h],0	; (ss:3040=0Ch)
020C:3A35  77 04				ja	loc_427			; Jump if above
020C:3A37  FE 06 3040				inc	byte ptr ds:[3040h]	; (ss:3040=0Ch)
020C:3A3B			loc_427:
020C:3A3B  E8 379F				call	$+37A2h
020C:3A3E  E8 2E83				call	$+2E86h
020C:3A41  8A 26 327D				mov	ah,byte ptr ds:[327Dh]	; (ss:327D=15h)
020C:3A45  E8 1DF4				call	$+1DF7h
020C:3A48  EB 05				jmp	short loc_429		; (3A4F)
020C:3A4A			loc_428:
020C:3A4A  9A 1516:2B10		;*		call	far ptr sub_62		;*(1516:2B10)
020C:3A4A  9A					db	9Ah
020C:3A4B  2B10 1516				dw	2B10h, 1516h
020C:3A4F			loc_429:
020C:3A4F  E8 20DE				call	$+20E1h
020C:3A52  E8 1DB3				call	$+1DB6h
020C:3A55  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020C:3A59  C6 47 79 07				mov	byte ptr [bx+79h],7
020C:3A5D  C6 47 67 00				mov	byte ptr [bx+67h],0
020C:3A61  E8 2190				call	$+2193h
020C:3A64  E8 1A2D				call	$+1A30h
020C:3A67  E9 FCF1				jmp	loc_393			; (375B)
							                        ;* No entry point to code
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 131

020C:3A6A  8A 36 327F				mov	dh,byte ptr ds:[327Fh]	; (ss:327F=29h)
020C:3A6E  FE C6				inc	dh
020C:3A70  A0 2B3B				mov	al,byte ptr ds:[2B3Bh]	; (ss:2B3B=0BAh)
020C:3A73  80 FE 07				cmp	dh,7
020C:3A76  76 08				jbe	loc_430			; Jump if below or =
020C:3A78  B6 01				mov	dh,1
020C:3A7A  3C 09				cmp	al,9
020C:3A7C  75 02				jne	loc_430			; Jump if not equal
020C:3A7E  B0 04				mov	al,4
020C:3A80			loc_430:
020C:3A80  88 36 327F				mov	byte ptr ds:[327Fh],dh	; (ss:327F=29h)
020C:3A84  80 FE 01				cmp	dh,1
020C:3A87  76 06				jbe	loc_431			; Jump if below or =
020C:3A89  3C 04				cmp	al,4
020C:3A8B  75 02				jne	loc_431			; Jump if not equal
020C:3A8D  B0 12				mov	al,12h
020C:3A8F			loc_431:
020C:3A8F  9A 1516:0850		;*		call	far ptr sub_54		;*(1516:0850)
020C:3A8F  9A					db	9Ah
020C:3A90  0850 1516				dw	850h, 1516h
020C:3A94  E8 2525				call	$+2528h
020C:3A97  9A 1516:2B70		;*		call	far ptr sub_64		;*(1516:2B70)
020C:3A97  9A					db	9Ah
020C:3A98  2B70 1516				dw	2B70h, 1516h
020C:3A9C  E8 2091				call	$+2094h
020C:3A9F  E8 19F2				call	$+19F5h
020C:3AA2  E9 FCB6				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:3AA5  E8 1D38				call	$+1D3Bh
020C:3AA8  C6 47 52 07				mov	byte ptr [bx+52h],7
020C:3AAC  C6 47 3C 0F				mov	byte ptr [bx+3Ch],0Fh
020C:3AB0  C6 47 4F 0F				mov	byte ptr [bx+4Fh],0Fh
020C:3AB4  B4 1E				mov	ah,1Eh
020C:3AB6  E8 1D83				call	$+1D86h
020C:3AB9  C6 06 066E 20			mov	byte ptr ds:[66Eh],20h	; (ss:066E=3Ch) ' '
020C:3ABE  E8 18AF				call	$+18B2h
020C:3AC1  B4 02				mov	ah,2
020C:3AC3  32 FF				xor	bh,bh			; Zero register
020C:3AC5  BA 1238				mov	dx,1238h
020C:3AC8  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:3AC8  9A					db	9Ah
020C:3AC9  2BA8 1516				dw	2BA8h, 1516h
020C:3ACD  E8 2130				call	$+2133h
020C:3AD0  9A 1516:0760		;*		call	far ptr sub_52		;*(1516:0760)
020C:3AD0  9A					db	9Ah
020C:3AD1  0760 1516				dw	760h, 1516h
020C:3AD5  3C 80				cmp	al,80h
020C:3AD7  73 2A				jae	loc_432			; Jump if above or =
020C:3AD9  A8 40				test	al,40h			; '@'
020C:3ADB  74 26				jz	loc_432			; Jump if zero
020C:3ADD  24 5F				and	al,5Fh			; '_'
020C:3ADF  3C 41				cmp	al,41h			; 'A'
020C:3AE1  72 20				jb	loc_432			; Jump if below
020C:3AE3  3C 5A				cmp	al,5Ah			; 'Z'
020C:3AE5  77 1C				ja	loc_432			; Jump if above
020C:3AE7  8A D0				mov	dl,al
020C:3AE9  80					db	80h			; Data table (indexed access)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 132

020C:3AEA  EA 52DA:8A41				jmp	far ptr $+4F57h
							                        ;* No entry point to code
020C:3AEF  B4 02				mov	ah,2
020C:3AF1  32 FF				xor	bh,bh			; Zero register
020C:3AF3  BA 184F				mov	dx,184Fh
020C:3AF6  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:3AF6  9A					db	9Ah
020C:3AF7  2BA8 1516				dw	2BA8h, 1516h
020C:3AFB  E8 20F6				call	$+20F9h
020C:3AFE  5A					pop	dx
020C:3AFF  B4 0E				mov	ah,0Eh
020C:3B01  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020C:3B03			loc_432:
020C:3B03  B4 19				mov	ah,19h
020C:3B05  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020C:3B07  A2 30CE				mov	byte ptr ds:[30CEh],al	; (ss:30CE=80h)
020C:3B0A  04 61				add	al,61h			; 'a'
020C:3B0C  A2 066E				mov	byte ptr ds:[66Eh],al	; (ss:066E=3Ch)
020C:3B0F  E8 1B0E				call	$+1B11h
020C:3B12  8A 16 30CD				mov	dl,byte ptr ds:[30CDh]	; (ss:30CD=45h)
020C:3B16  B4 0E				mov	ah,0Eh
020C:3B18  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020C:3B1A  E8 1CEB				call	$+1CEEh
020C:3B1D  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020C:3B21  C6 47 4F 07				mov	byte ptr [bx+4Fh],7
020C:3B25  8A 26 327D				mov	ah,byte ptr ds:[327Dh]	; (ss:327D=15h)
020C:3B29  E8 1D10				call	$+1D13h
020C:3B2C  E8 20C5				call	$+20C8h
020C:3B2F  E8 1962				call	$+1965h
020C:3B32  E9 FC26				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:3B35  E8 1CA8				call	$+1CABh
020C:3B38  C6 47 52 00				mov	byte ptr [bx+52h],0
020C:3B3C  C6 47 3A 0F				mov	byte ptr [bx+3Ah],0Fh
020C:3B40  C6 47 7A 0F				mov	byte ptr [bx+7Ah],0Fh
020C:3B44  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020C:3B48  80 0E 1715 02			or	byte ptr ds:[1715h],2	; (ss:1715=15h)
020C:3B4D  E8 1FE0				call	$+1FE3h
020C:3B50  E8 181D				call	$+1820h
020C:3B53  B4 02				mov	ah,2
020C:3B55  32 FF				xor	bh,bh			; Zero register
020C:3B57  BA 1418				mov	dx,1418h
020C:3B5A  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:3B5A  9A					db	9Ah
020C:3B5B  2BA8 1516				dw	2BA8h, 1516h
020C:3B5F  E8 209E				call	$+20A1h
020C:3B62  B1 04				mov	cl,4
020C:3B64  B3 02				mov	bl,2
020C:3B66  BE 06EE				mov	si,6EEh
020C:3B69  9A 1516:0620		;*		call	far ptr sub_51		;*(1516:0620)
020C:3B69  9A					db	9Ah
020C:3B6A  0620 1516				dw	620h, 1516h
020C:3B6E  3C 1B				cmp	al,1Bh
020C:3B70  74 71				je	loc_436			; Jump if equal
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 133

020C:3B72  80 F9 00				cmp	cl,0
020C:3B75  75 67				jne	loc_435			; Jump if not equal
020C:3B77  B9 0080				mov	cx,80h
020C:3B7A  BF 06EE				mov	di,6EEh
020C:3B7D  E8 00A0				call	sub_38			; (3C20)
020C:3B80  73 5C				jnc	loc_435			; Jump if carry=0
020C:3B82  E8 364F				call	$+3652h
020C:3B85  26: 89 16 0004			mov	word ptr es:[4],dx	; (19F9:0004=595Ah)
020C:3B8A  26: 83 3E 0000 FF			cmp	word ptr es:[0],0FFFFh	; (19F9:0000=585Ah)
020C:3B90  75 38				jne	loc_434			; Jump if not equal
020C:3B92  33 C0				xor	ax,ax			; Zero register
020C:3B94  26: A3 0000				mov	word ptr es:[0],ax	; (19F9:0000=585Ah)
020C:3B98  26: A3 0002				mov	word ptr es:[2],ax	; (19F9:0002=5F5Eh)
020C:3B9C  26: A3 0000				mov	word ptr es:[0],ax	; (19F9:0000=585Ah)
020C:3BA0  26: A3 0006				mov	word ptr es:[6],ax	; (19F9:0006=0CB5Bh)
020C:3BA4  26: A3 0008				mov	word ptr es:[8],ax	; (19F9:0008=5350h)
020C:3BA8  26: A2 000E				mov	byte ptr es:[0Eh],al	; (19F9:000E=50h)
020C:3BAC  26: 83 3E 000A FF			cmp	word ptr es:[0Ah],0FFFFh	; (19F9:000A=5251h)
020C:3BB2  75 0B				jne	loc_433			; Jump if not equal
020C:3BB4  26: A3 000A				mov	word ptr es:[0Ah],ax	; (19F9:000A=5251h)
020C:3BB8  26: C7 06 000C 0041			mov	word ptr es:[0Ch],41h	; (19F9:000C=5657h)
020C:3BBF			loc_433:
020C:3BBF  80 3E 3040 00			cmp	byte ptr ds:[3040h],0	; (ss:3040=0Ch)
020C:3BC4  77 04				ja	loc_434			; Jump if above
020C:3BC6  FE 06 3040				inc	byte ptr ds:[3040h]	; (ss:3040=0Ch)
020C:3BCA			loc_434:
020C:3BCA  C6 06 1715 01			mov	byte ptr ds:[1715h],1	; (ss:1715=15h)
020C:3BCF  E8 360B				call	$+360Eh
020C:3BD2  E8 2CEF				call	$+2CF2h
020C:3BD5  8A 26 327D				mov	ah,byte ptr ds:[327Dh]	; (ss:327D=15h)
020C:3BD9  E8 1C60				call	$+1C63h
020C:3BDC  EB 0D				jmp	short loc_437		; (3BEB)
020C:3BDE			loc_435:
020C:3BDE  9A 1516:2B10		;*		call	far ptr sub_62		;*(1516:2B10)
020C:3BDE  9A					db	9Ah
020C:3BDF  2B10 1516				dw	2B10h, 1516h
020C:3BE3			loc_436:
020C:3BE3  80 26 1715 FD			and	byte ptr ds:[1715h],0FDh	; (ss:1715=15h)
020C:3BE8  E8 1F45				call	$+1F48h
020C:3BEB			loc_437:
020C:3BEB  E8 1C1A				call	$+1C1Dh
020C:3BEE  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020C:3BF2  C6 47 7A 07				mov	byte ptr [bx+7Ah],7
020C:3BF6  C6 47 67 00				mov	byte ptr [bx+67h],0
020C:3BFA  E8 1FF7				call	$+1FFAh
020C:3BFD  E8 1894				call	$+1897h
020C:3C00  E9 FB58				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:3C03  E8 35D7				call	$+35DAh
020C:3C06  B0 41				mov	al,41h			; 'A'
020C:3C08  80 3E 35E6 01			cmp	byte ptr ds:[35E6h],1	; (ss:35E6=52h)
020C:3C0D  74 02				je	loc_438			; Jump if equal
020C:3C0F  B0 4C				mov	al,4Ch			; 'L'
020C:3C11			loc_438:
020C:3C11  E8 0248				call	sub_40			; (3E5C)
020C:3C14  E8 187D				call	$+1880h
020C:3C17  E9 FB41				jmp	loc_393			; (375B)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 134

020C:3C1A  00					db	0
020C:3C1B  00					db	0
020C:3C1C  00					db	0
020C:3C1D  00 00				add	[bx+si],al
020C:3C1F  00 53 32				add	[bp+di+32h],dl
020C:3C22  DB					db	0DBh
020C:3C23  33 D2				xor	dx,dx			; Zero register
020C:3C25			loc_439:
020C:3C25  80 FB 04				cmp	bl,4
020C:3C28  73 32				jae	loc_443			; Jump if above or =
020C:3C2A  8A 05				mov	al,[di]
020C:3C2C  3C 40				cmp	al,40h			; '@'
020C:3C2E  72 0C				jb	loc_440			; Jump if below
020C:3C30  24 DF				and	al,0DFh
020C:3C32  2C 41				sub	al,41h			; 'A'
020C:3C34  3C 06				cmp	al,6
020C:3C36  73 1F				jae	loc_442			; Jump if above or =
020C:3C38  04 0A				add	al,0Ah
020C:3C3A  EB 06				jmp	short loc_441		; (3C42)
020C:3C3C			loc_440:
020C:3C3C  2C 30				sub	al,30h			; '0'
020C:3C3E  3C 09				cmp	al,9
020C:3C40  77 15				ja	loc_442			; Jump if above
020C:3C42			loc_441:
020C:3C42  32 E4				xor	ah,ah			; Zero register
020C:3C44  FE C3				inc	bl
020C:3C46  51					push	cx
020C:3C47  B1 04				mov	cl,4
020C:3C49  D3 E2				shl	dx,cl			; Shift w/zeros fill
020C:3C4B  59					pop	cx
020C:3C4C  03 D0				add	dx,ax
020C:3C4E  9A 1516:05A0		;*		call	far ptr sub_50		;*(1516:05A0)
020C:3C4E  9A					db	9Ah
020C:3C4F  05A0 1516				dw	5A0h, 1516h
020C:3C53  73 D0				jnc	loc_439			; Jump if carry=0
020C:3C55  EB 08				jmp	short loc_444		; (3C5F)
020C:3C57			loc_442:
020C:3C57  80 FB 01				cmp	bl,1
020C:3C5A  72 03				jb	loc_444			; Jump if below
020C:3C5C			loc_443:
020C:3C5C  F9					stc				; Set carry flag
020C:3C5D  EB 01				jmp	short loc_445		; (3C60)
020C:3C5F			loc_444:
020C:3C5F  F8					clc				; Clear carry flag
020C:3C60			loc_445:
020C:3C60  5B					pop	bx
020C:3C61  C3					retn
020C:3C62  87 DB				xchg	bx,bx

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_39		proc	near
020C:3C64  56					push	si
020C:3C65			loc_446:
020C:3C65  80 3C 20				cmp	byte ptr [si],20h	; ' '
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 135

020C:3C68  74 0A				je	loc_447			; Jump if equal
020C:3C6A  80 3C 09				cmp	byte ptr [si],9
020C:3C6D  74 05				je	loc_447			; Jump if equal
020C:3C6F  80 3C 3D				cmp	byte ptr [si],3Dh	; '='
020C:3C72  75 09				jne	loc_448			; Jump if not equal
020C:3C74			loc_447:
020C:3C74  46					inc	si
020C:3C75  3B 36 509E				cmp	si,word ptr ds:[509Eh]	; (020C:509E=7C3Ch)
020C:3C79  76 EA				jbe	loc_446			; Jump if below or =
020C:3C7B  EB 5D				jmp	short loc_455		; (3CDA)
020C:3C7D			loc_448:
020C:3C7D  33 D2				xor	dx,dx			; Zero register
020C:3C7F  B5 04				mov	ch,4
020C:3C81  8A CD				mov	cl,ch
020C:3C83			loc_449:
020C:3C83  8A 04				mov	al,[si]
020C:3C85  3C 40				cmp	al,40h			; '@'
020C:3C87  72 0C				jb	loc_450			; Jump if below
020C:3C89  24 DF				and	al,0DFh
020C:3C8B  2C 41				sub	al,41h			; 'A'
020C:3C8D  3C 06				cmp	al,6
020C:3C8F  73 24				jae	loc_454			; Jump if above or =
020C:3C91  04 0A				add	al,0Ah
020C:3C93  EB 06				jmp	short loc_451		; (3C9B)
020C:3C95			loc_450:
020C:3C95  2C 30				sub	al,30h			; '0'
020C:3C97  3C 09				cmp	al,9
020C:3C99  77 1A				ja	loc_454			; Jump if above
020C:3C9B			loc_451:
020C:3C9B  32 E4				xor	ah,ah			; Zero register
020C:3C9D  03 D0				add	dx,ax
020C:3C9F  D3 C2				rol	dx,cl			; Rotate
020C:3CA1  FE CD				dec	ch
020C:3CA3  80 FD 00				cmp	ch,0
020C:3CA6  74 07				je	loc_452			; Jump if equal
020C:3CA8  46					inc	si
020C:3CA9  3B 36 509E				cmp	si,word ptr ds:[509Eh]	; (020C:509E=7C3Ch)
020C:3CAD  76 D4				jbe	loc_449			; Jump if below or =
020C:3CAF			loc_452:
020C:3CAF  46					inc	si
020C:3CB0			loc_453:
020C:3CB0  D3 CA				ror	dx,cl			; Rotate
020C:3CB2  58					pop	ax
020C:3CB3  F8					clc				; Clear carry flag
020C:3CB4  C3					retn
020C:3CB5			loc_454:
020C:3CB5  80 FD 04				cmp	ch,4
020C:3CB8  74 20				je	loc_455			; Jump if equal
020C:3CBA  8A 04				mov	al,[si]
020C:3CBC  3C 20				cmp	al,20h			; ' '
020C:3CBE  74 F0				je	loc_453			; Jump if equal
020C:3CC0  3C 09				cmp	al,9
020C:3CC2  74 EC				je	loc_453			; Jump if equal
020C:3CC4  3C 00				cmp	al,0
020C:3CC6  74 E8				je	loc_453			; Jump if equal
020C:3CC8  3C 2C				cmp	al,2Ch			; ','
020C:3CCA  74 E4				je	loc_453			; Jump if equal
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 136

020C:3CCC  3C 3A				cmp	al,3Ah			; ':'
020C:3CCE  74 E0				je	loc_453			; Jump if equal
020C:3CD0  3C 3B				cmp	al,3Bh			; ';'
020C:3CD2  74 DC				je	loc_453			; Jump if equal
020C:3CD4  24 DF				and	al,0DFh
020C:3CD6  3C 48				cmp	al,48h			; 'H'
020C:3CD8  74 D6				je	loc_453			; Jump if equal
020C:3CDA			loc_455:
020C:3CDA  F9					stc				; Set carry flag
020C:3CDB  5E					pop	si
020C:3CDC  C3					retn
				sub_39		endp

020C:3CDD  00 00				add	[bx+si],al
020C:3CDF  00 BA 8005				add	[bp+si-7FFBh],bh
020C:3CE3  BB 04F0				mov	bx,4F0h
020C:3CE6  E8 ECB7				call	sub_37			; (29A0)
020C:3CE9  C3					retn
020C:3CEA  00					db	0
020C:3CEB  00					db	0
020C:3CEC  00					db	0
							                        ;* No entry point to code
020C:3CED  00 00				add	[bx+si],al
020C:3CEF  00 F7				add	bh,dh
020C:3CF1  06					push	es
020C:3CF2  19 4E 02				sbb	[bp+2],cx
020C:3CF5  00 74 02				add	[si+2],dh
020C:3CF8			loc_456:
020C:3CF8  EB 7B				jmp	short loc_464		; (3D75)
020C:3CFA			loc_457:
020C:3CFA  8A 04				mov	al,[si]
020C:3CFC  8A E0				mov	ah,al
020C:3CFE  3C 00				cmp	al,0
020C:3D00  74 F6				je	loc_456			; Jump if equal
020C:3D02  24 5F				and	al,5Fh			; '_'
020C:3D04  3C 41				cmp	al,41h			; 'A'
020C:3D06  72 F0				jb	loc_456			; Jump if below
020C:3D08  3C 5A				cmp	al,5Ah			; 'Z'
020C:3D0A  77 EC				ja	loc_456			; Jump if above
020C:3D0C  3C 50				cmp	al,50h			; 'P'
020C:3D0E  77 1E				ja	loc_459			; Jump if above
020C:3D10  2C 41				sub	al,41h			; 'A'
020C:3D12  BB 8000				mov	bx,8000h
020C:3D15  8A C8				mov	cl,al
020C:3D17  D3 CB				ror	bx,cl			; Rotate
020C:3D19  8B 16 4E22				mov	dx,data_300		; (020C:4E22=0E906h)
020C:3D1D  0B D3				or	dx,bx
020C:3D1F  F6 C4 20				test	ah,20h			; ' '
020C:3D22  74 04				jz	loc_458			; Jump if zero
020C:3D24  F7 D3				not	bx
020C:3D26  23 D3				and	dx,bx
020C:3D28			loc_458:
020C:3D28  89 16 4E22				mov	data_300,dx		; (020C:4E22=0E906h)
020C:3D2C  EB 44				jmp	short loc_463		; (3D72)
020C:3D2E			loc_459:
020C:3D2E  3C 54				cmp	al,54h			; 'T'
020C:3D30  77 24				ja	loc_461			; Jump if above
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 137

020C:3D32  80 3E 35E6 00			cmp	data_281,0		; (020C:35E6=72h)
020C:3D37  74 39				je	loc_463			; Jump if equal
020C:3D39  2C 51				sub	al,51h			; 'Q'
020C:3D3B  B3 04				mov	bl,4
020C:3D3D  8A C8				mov	cl,al
020C:3D3F  D2 CB				ror	bl,cl			; Rotate
020C:3D41  8A 16 4E7F				mov	dl,data_304		; (020C:4E7F=0EBh)
020C:3D45  0A D3				or	dl,bl
020C:3D47  F6 C4 20				test	ah,20h			; ' '
020C:3D4A  74 04				jz	loc_460			; Jump if zero
020C:3D4C  F6 D3				not	bl
020C:3D4E  22 D3				and	dl,bl
020C:3D50			loc_460:
020C:3D50  88 16 4E7F				mov	data_304,dl		; (020C:4E7F=0EBh)
020C:3D54  77 1C				ja	loc_463			; Jump if above
020C:3D56			loc_461:
020C:3D56  2C 55				sub	al,55h			; 'U'
020C:3D58  BB 0080				mov	bx,80h
020C:3D5B  8A C8				mov	cl,al
020C:3D5D  D3 CB				ror	bx,cl			; Rotate
020C:3D5F  8B 16 4E24				mov	dx,data_301		; (020C:4E24=0E935h)
020C:3D63  0B D3				or	dx,bx
020C:3D65  F6 C4 20				test	ah,20h			; ' '
020C:3D68  74 04				jz	loc_462			; Jump if zero
020C:3D6A  F7 D3				not	bx
020C:3D6C  23 D3				and	dx,bx
020C:3D6E			loc_462:
020C:3D6E  89 16 4E24				mov	data_301,dx		; (020C:4E24=0E935h)
020C:3D72			loc_463:
020C:3D72  46					inc	si
020C:3D73  EB 85				jmp	short loc_457		; (3CFA)
020C:3D75			loc_464:
020C:3D75  A0 2B3B				mov	al,data_217		; (020C:2B3B=0A0h)
020C:3D78  F6 06 4E7F 07			test	byte ptr data_304,7	; (020C:4E7F=0EBh)
020C:3D7D  74 0C				jz	loc_465			; Jump if zero
020C:3D7F  80 3E 2B3B 0A			cmp	data_217,0Ah		; (020C:2B3B=0A0h)
020C:3D84  73 05				jae	loc_465			; Jump if above or =
020C:3D86  B0 0A				mov	al,0Ah
020C:3D88  E8 2231				call	$+2234h
020C:3D8B			loc_465:
020C:3D8B  E8 1F06				call	$+1F09h
020C:3D8E  F7 06 4E22 0002			test	data_300,2		; (020C:4E22=0E906h)
020C:3D94  74 07				jz	loc_466			; Jump if zero
020C:3D96  B0 01				mov	al,1
020C:3D98  9A 1516:45B8		;*		call	far ptr sub_70		;*(1516:45B8)
020C:3D98  9A					db	9Ah
020C:3D99  45B8 1516				dw	45B8h, 1516h
020C:3D9D			loc_466:
020C:3D9D  C3					retn
							                        ;* No entry point to code
020C:3D9E  87 DB				xchg	bx,bx
020C:3DA0  80 3E 5614 01			cmp	byte ptr ds:[5614h],1	; (020C:5614=0C4h)
020C:3DA5  75 07				jne	loc_467			; Jump if not equal
020C:3DA7  C6 06 4FD6 12			mov	byte ptr data_310,12h	; (020C:4FD6=2)
020C:3DAC  EB 28				jmp	short loc_469		; (3DD6)
020C:3DAE			loc_467:
020C:3DAE  89 36 509E				mov	word ptr ds:[509Eh],si	; (020C:509E=7C3Ch)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 138

020C:3DB2  8B 1E 4F94				mov	bx,data_309		; (020C:4F94=1606h)
020C:3DB6  01 1E 509E				add	word ptr ds:[509Eh],bx	; (020C:509E=7C3Ch)
020C:3DBA  E8 FEA7				call	sub_39			; (3C64)
020C:3DBD  72 12				jc	loc_468			; Jump if carry Set
020C:3DBF  E8 3439				call	$+343Ch
020C:3DC2  3B D0				cmp	dx,ax
020C:3DC4  72 0B				jb	loc_468			; Jump if below
020C:3DC6  89 16 3035				mov	data_238,dx		; (020C:3035=3200h)
020C:3DCA  2E: 89 16 38A7			mov	cs:data_287,dx		; (020C:38A7=503Ch)
020C:3DCF  EB 05				jmp	short loc_469		; (3DD6)
020C:3DD1			loc_468:
020C:3DD1  C6 06 4FD6 31			mov	byte ptr data_310,31h	; (020C:4FD6=2) '1'
020C:3DD6			loc_469:
020C:3DD6  C3					retn
							                        ;* No entry point to code
020C:3DD7  90					nop
020C:3DD8  B4 01				mov	ah,1
020C:3DDA  3C 46				cmp	al,46h			; 'F'
020C:3DDC  74 37				je	loc_470			; Jump if equal
020C:3DDE  FE C4				inc	ah
020C:3DE0  3C 43				cmp	al,43h			; 'C'
020C:3DE2  74 31				je	loc_470			; Jump if equal
020C:3DE4  FE C4				inc	ah
020C:3DE6  3C 45				cmp	al,45h			; 'E'
020C:3DE8  74 2B				je	loc_470			; Jump if equal
020C:3DEA  FE C4				inc	ah
020C:3DEC  3C 5A				cmp	al,5Ah			; 'Z'
020C:3DEE  74 25				je	loc_470			; Jump if equal
020C:3DF0  FE C4				inc	ah
020C:3DF2  3C 44				cmp	al,44h			; 'D'
020C:3DF4  74 1F				je	loc_470			; Jump if equal
020C:3DF6  FE C4				inc	ah
020C:3DF8  3C 4F				cmp	al,4Fh			; 'O'
020C:3DFA  74 19				je	loc_470			; Jump if equal
020C:3DFC  FE C4				inc	ah
020C:3DFE  3C 53				cmp	al,53h			; 'S'
020C:3E00  74 13				je	loc_470			; Jump if equal
020C:3E02  FE C4				inc	ah
020C:3E04  3C 57				cmp	al,57h			; 'W'
020C:3E06  74 0D				je	loc_470			; Jump if equal
020C:3E08  FE C4				inc	ah
020C:3E0A  3C 4E				cmp	al,4Eh			; 'N'
020C:3E0C  74 07				je	loc_470			; Jump if equal
020C:3E0E  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:3E13  EB 0E				jmp	short loc_471		; (3E23)
020C:3E15			loc_470:
020C:3E15  88 26 327F				mov	byte ptr data_253+0FFh,ah	; (020C:327F='I')
020C:3E19  9A 1516:0850		;*		call	far ptr sub_54		;*(1516:0850)
020C:3E19  9A					db	9Ah
020C:3E1A  0850 1516				dw	850h, 1516h
020C:3E1E  9A 1516:2B70		;*		call	far ptr sub_64		;*(1516:2B70)
020C:3E1E  9A					db	9Ah
020C:3E1F  2B70 1516				dw	2B70h, 1516h
020C:3E23			loc_471:
020C:3E23  C3					retn
							                        ;* No entry point to code
020C:3E24  3C 41				cmp	al,41h			; 'A'
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 139

020C:3E26  72 2C				jb	loc_472			; Jump if below
020C:3E28  3C 5A				cmp	al,5Ah			; 'Z'
020C:3E2A  77 28				ja	loc_472			; Jump if above
020C:3E2C  8A D0				mov	dl,al
020C:3E2E  80 EA 41				sub	dl,41h			; 'A'
020C:3E31  8A DA				mov	bl,dl
020C:3E33  B4 19				mov	ah,19h
020C:3E35  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020C:3E37  50					push	ax
020C:3E38  B4 0E				mov	ah,0Eh
020C:3E3A  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020C:3E3C  B4 19				mov	ah,19h
020C:3E3E  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020C:3E40  A2 30CE				mov	byte ptr data_245+5Ch,al	; (020C:30CE=' ')
020C:3E43  04 61				add	al,61h			; 'a'
020C:3E45  A2 066E				mov	byte ptr ds:[66Eh],al	; (020C:066E=0Eh)
020C:3E48  E8 17D5				call	$+17D8h
020C:3E4B  58					pop	ax
020C:3E4C  8A D0				mov	dl,al
020C:3E4E  B4 0E				mov	ah,0Eh
020C:3E50  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020C:3E52  EB 05				jmp	short loc_473		; (3E59)
020C:3E54			loc_472:
020C:3E54  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:3E59			loc_473:
020C:3E59  C3					retn
020C:3E5A  87 DB				xchg	bx,bx

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_40		proc	near
020C:3E5C  50					push	ax
020C:3E5D  BF 036A				mov	di,36Ah
020C:3E60  B9 0009				mov	cx,9
020C:3E63  B0 2E				mov	al,2Eh			; '.'
020C:3E65  FC					cld				; Clear direction
020C:3E66  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020C:3E68  4F					dec	di
020C:3E69  58					pop	ax
020C:3E6A  3C 4C				cmp	al,4Ch			; 'L'
020C:3E6C  74 0C				je	loc_474			; Jump if equal
020C:3E6E  3C 41				cmp	al,41h			; 'A'
020C:3E70  74 0B				je	loc_475			; Jump if equal
020C:3E72  C6 06 4FD6 09			mov	byte ptr ds:[4FD6h],9	; (ss:4FD6=0)
020C:3E77  E9 0117				jmp	loc_484			; (3F91)
020C:3E7A			loc_474:
020C:3E7A  E9 009B				jmp	loc_480			; (3F18)
020C:3E7D			loc_475:
020C:3E7D  F6 06 14FA 80			test	byte ptr ds:[14FAh],80h	; (ss:14FA=88h)
020C:3E82  75 05				jnz	loc_476			; Jump if not zero
020C:3E84  C6 06 14FA 02			mov	byte ptr ds:[14FAh],2	; (ss:14FA=88h)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 140

020C:3E89			loc_476:
020C:3E89  C6 06 35E6 00			mov	byte ptr ds:[35E6h],0	; (ss:35E6=52h)
020C:3E8E  9A 1516:26A0		;*		call	far ptr sub_58		;*(1516:26A0)
020C:3E8E  9A					db	9Ah
020C:3E8F  26A0 1516				dw	26A0h, 1516h
020C:3E93  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (ss:1326=41B5h)
020C:3E97  C6 47 30 00				mov	byte ptr [bx+30h],0
020C:3E9B  C6 47 33 00				mov	byte ptr [bx+33h],0
020C:3E9F  C6 47 34 00				mov	byte ptr [bx+34h],0
020C:3EA3  C6 47 65 00				mov	byte ptr [bx+65h],0
020C:3EA7  C6 47 66 00				mov	byte ptr [bx+66h],0
020C:3EAB  C6 47 69 00				mov	byte ptr [bx+69h],0
020C:3EAF  C6 47 6A 00				mov	byte ptr [bx+6Ah],0
020C:3EB3  C6 47 6B 00				mov	byte ptr [bx+6Bh],0
020C:3EB7  C6 47 6C 00				mov	byte ptr [bx+6Ch],0
020C:3EBB  C6 47 70 00				mov	byte ptr [bx+70h],0
020C:3EBF  C6 47 71 00				mov	byte ptr [bx+71h],0
020C:3EC3  C6 47 7B 00				mov	byte ptr [bx+7Bh],0
020C:3EC7  C6 47 4A 00				mov	byte ptr [bx+4Ah],0
020C:3ECB  C6 06 4E7F 00			mov	byte ptr ds:[4E7Fh],0	; (ss:4E7F=3)
020C:3ED0  B9 000D				mov	cx,0Dh
020C:3ED3  BF 13E8				mov	di,13E8h
020C:3ED6  A0 13E4				mov	al,byte ptr ds:[13E4h]	; (ss:13E4=40h)

020C:3ED9			locloop_477:
020C:3ED9  3A 05				cmp	al,[di]
020C:3EDB  74 05				je	loc_478			; Jump if equal
020C:3EDD  83 C7 10				add	di,10h
020C:3EE0  E2 F7				loop	locloop_477		; Loop if cx > 0

020C:3EE2			loc_478:
020C:3EE2  81 7D 01 4F4E			cmp	word ptr [di+1],4F4Eh
020C:3EE7  75 1D				jne	loc_479			; Jump if not equal
020C:3EE9  BF 13E8				mov	di,13E8h
020C:3EEC  81 C7 00C0				add	di,0C0h
020C:3EF0  8A 45 0D				mov	al,[di+0Dh]
020C:3EF3  A2 13E5				mov	byte ptr ds:[13E5h],al	; (ss:13E5=30h)
020C:3EF6  8A 05				mov	al,[di]
020C:3EF8  A2 13E4				mov	byte ptr ds:[13E4h],al	; (ss:13E4=40h)
020C:3EFB  8B 45 0B				mov	ax,[di+0Bh]
020C:3EFE  A3 13E6				mov	word ptr ds:[13E6h],ax	; (ss:13E6=94EBh)
020C:3F01  9A 1516:2B34		;*		call	far ptr sub_63		;*(1516:2B34)
020C:3F01  9A					db	9Ah
020C:3F02  2B34 1516				dw	2B34h, 1516h
020C:3F06			loc_479:
020C:3F06  80 26 35E4 FE			and	byte ptr ds:[35E4h],0FEh	; (ss:35E4=1)
020C:3F0B  32 C0				xor	al,al			; Zero register
020C:3F0D  9A 1516:09D8		;*		call	far ptr sub_56		;*(1516:09D8)
020C:3F0D  9A					db	9Ah
020C:3F0E  09D8 1516				dw	9D8h, 1516h
020C:3F12  C6 47 48 00				mov	byte ptr [bx+48h],0
020C:3F16  EB 65				jmp	short loc_483		; (3F7D)
020C:3F18			loc_480:
020C:3F18  F6 06 14FA 80			test	byte ptr ds:[14FAh],80h	; (ss:14FA=88h)
020C:3F1D  75 05				jnz	loc_481			; Jump if not zero
020C:3F1F  C6 06 14FA 00			mov	byte ptr ds:[14FAh],0	; (ss:14FA=88h)
020C:3F24			loc_481:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 141

020C:3F24  C6 06 35E6 01			mov	byte ptr ds:[35E6h],1	; (ss:35E6=52h)
020C:3F29  9A 1516:26A0		;*		call	far ptr sub_58		;*(1516:26A0)
020C:3F29  9A					db	9Ah
020C:3F2A  26A0 1516				dw	26A0h, 1516h
020C:3F2E  A0 1209				mov	al,byte ptr ds:[1209h]	; (ss:1209=0C0h)
020C:3F31  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (ss:1326=41B5h)
020C:3F35  C6 47 30 0F				mov	byte ptr [bx+30h],0Fh
020C:3F39  C6 47 33 0F				mov	byte ptr [bx+33h],0Fh
020C:3F3D  C6 47 34 0F				mov	byte ptr [bx+34h],0Fh
020C:3F41  88 47 65				mov	[bx+65h],al
020C:3F44  C6 47 66 07				mov	byte ptr [bx+66h],7
020C:3F48  C6 47 69 07				mov	byte ptr [bx+69h],7
020C:3F4C  C6 47 6A 07				mov	byte ptr [bx+6Ah],7
020C:3F50  C6 47 6B 07				mov	byte ptr [bx+6Bh],7
020C:3F54  C6 47 6C 07				mov	byte ptr [bx+6Ch],7
020C:3F58  88 47 70				mov	[bx+70h],al
020C:3F5B  C6 47 71 07				mov	byte ptr [bx+71h],7
020C:3F5F  C6 47 7B 07				mov	byte ptr [bx+7Bh],7
020C:3F63  F6 06 35E3 01			test	byte ptr ds:[35E3h],1	; (ss:35E3=73h)
020C:3F68  75 04				jnz	loc_482			; Jump if not zero
020C:3F6A  C6 47 4A 07				mov	byte ptr [bx+4Ah],7
020C:3F6E			loc_482:
020C:3F6E  E8 1D23				call	$+1D26h
020C:3F71  80 0E 35E4 01			or	byte ptr ds:[35E4h],1	; (ss:35E4=1)
020C:3F76  B0 01				mov	al,1
020C:3F78  9A 1516:09D8		;*		call	far ptr sub_56		;*(1516:09D8)
020C:3F78  9A					db	9Ah
020C:3F79  09D8 1516				dw	9D8h, 1516h
020C:3F7D			loc_483:
020C:3F7D  E8 1544				call	$+1547h
020C:3F80  BF 3233				mov	di,3233h
020C:3F83  B9 003F				mov	cx,3Fh
020C:3F86  B0 2E				mov	al,2Eh			; '.'
020C:3F88  FC					cld				; Clear direction
020C:3F89  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020C:3F8B  4F					dec	di
020C:3F8C  9A 1516:26A0		;*		call	far ptr sub_58		;*(1516:26A0)
020C:3F8C  9A					db	9Ah
020C:3F8D  26A0 1516				dw	26A0h, 1516h
020C:3F91			loc_484:
020C:3F91  C3					retn
				sub_40		endp

							                        ;* No entry point to code
020C:3F92  87 DB				xchg	bx,bx
020C:3F94  C6 06 4F13 01			mov	byte ptr ds:[4F13h],1	; (ss:4F13=0A3h)
020C:3F99  C3					retn
							                        ;* No entry point to code
020C:3F9A  87 DB				xchg	bx,bx
020C:3F9C  8B 1E 4F94				mov	bx,data_309		; (020C:4F94=1606h)
020C:3FA0  80 3E 35E6 00			cmp	data_281,0		; (020C:35E6=72h)
020C:3FA5  74 1B				je	loc_486			; Jump if equal
020C:3FA7  BF 0378				mov	di,378h
020C:3FAA  B9 0021				mov	cx,21h
020C:3FAD  B0 20				mov	al,20h			; ' '
020C:3FAF  FC					cld				; Clear direction
020C:3FB0  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 142

020C:3FB2  B9 0020				mov	cx,20h
020C:3FB5  83 FB 20				cmp	bx,20h
020C:3FB8  77 02				ja	loc_485			; Jump if above
020C:3FBA  8B CB				mov	cx,bx
020C:3FBC			loc_485:
020C:3FBC  BF 0378				mov	di,378h
020C:3FBF  FC					cld				; Clear direction
020C:3FC0  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:3FC2			loc_486:
020C:3FC2  C3					retn
							                        ;* No entry point to code
020C:3FC3  90					nop
020C:3FC4  8B 1E 4F94				mov	bx,data_309		; (020C:4F94=1606h)
020C:3FC8  83 FB 00				cmp	bx,0
020C:3FCB  75 08				jne	loc_487			; Jump if not equal
020C:3FCD  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:3FD2  E9 00BC				jmp	loc_496			; (4091)
020C:3FD5			loc_487:
020C:3FD5  80 3C 3F				cmp	byte ptr [si],3Fh	; '?'
020C:3FD8  74 1D				je	loc_488			; Jump if equal
020C:3FDA  8B FE				mov	di,si
020C:3FDC  B0 00				mov	al,0
020C:3FDE  9A 1516:2724		;*		call	far ptr sub_60		;*(1516:2724)
020C:3FDE  9A					db	9Ah
020C:3FDF  2724 1516				dw	2724h, 1516h
020C:3FE3  9A 1516:27AC		;*		call	far ptr sub_61		;*(1516:27AC)
020C:3FE3  9A					db	9Ah
020C:3FE4  27AC 1516				dw	27ACh, 1516h
020C:3FE8  A2 327E				mov	byte ptr data_253+0FEh,al	; (020C:327E='F')
020C:3FEB  3C 01				cmp	al,1
020C:3FED  77 12				ja	loc_489			; Jump if above
020C:3FEF  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:3FF4  E9 009A				jmp	loc_496			; (4091)
020C:3FF7			loc_488:
020C:3FF7  80 3E 327E 01			cmp	byte ptr data_253+0FEh,1	; (020C:327E='F')
020C:3FFC  77 25				ja	loc_490			; Jump if above
020C:3FFE  E9 009D				jmp	loc_497			; (409E)
020C:4001			loc_489:
020C:4001  BF 31F0				mov	di,31F0h
020C:4004  B9 0040				mov	cx,40h
020C:4007  B0 00				mov	al,0
020C:4009  FC					cld				; Clear direction
020C:400A  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:400C  BF 0649				mov	di,649h
020C:400F  B9 000C				mov	cx,0Ch
020C:4012  B0 20				mov	al,20h			; ' '
020C:4014  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:4016  BF 31F0				mov	di,31F0h
020C:4019  8B CB				mov	cx,bx
020C:401B  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:401D  4F					dec	di
020C:401E  9A 1516:7270		;*		call	far ptr sub_73		;*(1516:7270)
020C:401E  9A					db	9Ah
020C:401F  7270 1516				dw	7270h, 1516h
020C:4023			loc_490:
020C:4023  80 3E 3031 03			cmp	data_236,3		; (020C:3031=0)
020C:4028  75 05				jne	loc_491			; Jump if not equal
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 143

020C:402A  C6 06 3031 04			mov	data_236,4		; (020C:3031=0)
020C:402F			loc_491:
020C:402F  E8 5522				call	$+5525h
020C:4032  73 05				jnc	loc_492			; Jump if carry=0
020C:4034  A2 4FD6				mov	data_310,al		; (020C:4FD6=2)
020C:4037  EB 58				jmp	short loc_496		; (4091)
020C:4039			loc_492:
020C:4039  C6 06 5614 01			mov	byte ptr ds:[5614h],1	; (020C:5614=0C4h)
020C:403E  80 3E 2B38 01			cmp	byte ptr ds:[2B38h],1	; (020C:2B38=0E5h)
020C:4043  74 05				je	loc_493			; Jump if equal
020C:4045  B0 0A				mov	al,0Ah
020C:4047  E8 1F72				call	$+1F75h
020C:404A			loc_493:
020C:404A  E8 3187				call	$+318Ah
020C:404D  BE 0000				mov	si,0
020C:4050  BB 291D				mov	bx,291Dh
020C:4053  B9 00FA				mov	cx,0FAh
020C:4056  32 D2				xor	dl,dl			; Zero register

020C:4058			locloop_494:
020C:4058  26: 8B 04				mov	ax,es:[si]
020C:405B  26: 89 07				mov	es:[bx],ax
020C:405E  3D FFFF				cmp	ax,0FFFFh
020C:4061  74 02				je	loc_495			; Jump if equal
020C:4063  FE C2				inc	dl
020C:4065			loc_495:
020C:4065  83 C6 15				add	si,15h
020C:4068  43					inc	bx
020C:4069  43					inc	bx
020C:406A  E2 EC				loop	locloop_494		; Loop if cx > 0

020C:406C  88 16 3042				mov	data_241,dl		; (020C:3042=0CFh)
020C:4070  80 3E 3031 04			cmp	data_236,4		; (020C:3031=0)
020C:4075  75 1A				jne	loc_496			; Jump if not equal
020C:4077  FE 0E 3031				dec	data_236		; (020C:3031=0)
020C:407B  BF 0000				mov	di,0
020C:407E  A0 3040				mov	al,data_240		; (020C:3040=0B3h)
020C:4081  B4 15				mov	ah,15h
020C:4083  F6 E4				mul	ah			; ax = reg * al
020C:4085  8B C8				mov	cx,ax
020C:4087  B0 FF				mov	al,0FFh
020C:4089  FC					cld				; Clear direction
020C:408A  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:408C  C6 06 3040 00			mov	data_240,0		; (020C:3040=0B3h)
020C:4091			loc_496:
020C:4091  E8 3149				call	$+314Ch
020C:4094  51					push	cx
020C:4095  B4 2A				mov	ah,2Ah			; '*'
020C:4097  E8 17A2				call	$+17A5h
020C:409A  E8 140F				call	$+1412h
020C:409D  59					pop	cx
020C:409E			loc_497:
020C:409E  C3					retn
							                        ;* No entry point to code
020C:409F  90					nop
020C:40A0  89 36 509E				mov	word ptr ds:[509Eh],si	; (020C:509E=7C3Ch)
020C:40A4  8B 1E 4F94				mov	bx,data_309		; (020C:4F94=1606h)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 144

020C:40A8  01 1E 509E				add	word ptr ds:[509Eh],bx	; (020C:509E=7C3Ch)
020C:40AC  E8 FBB5				call	sub_39			; (3C64)
020C:40AF  72 2B				jc	loc_498			; Jump if carry Set
020C:40B1  89 16 35E9				mov	data_283,dx		; (020C:35E9=1F16h)
020C:40B5  89 16 35EB				mov	data_284,dx		; (020C:35EB=0B913h)
020C:40B9  83 26 35EB E7			and	data_284,0FFE7h		; (020C:35EB=0B913h)
020C:40BE  88 36 53D4				mov	byte ptr ds:[53D4h],dh	; (020C:53D4=1)
020C:40C2  F7 06 35E9 0002			test	data_283,2		; (020C:35E9=1F16h)
020C:40C8  74 17				jz	loc_499			; Jump if zero
020C:40CA  BF 338A				mov	di,338Ah
020C:40CD  83 EF 03				sub	di,3
020C:40D0  B9 0004				mov	cx,4
020C:40D3  2B F9				sub	di,cx
020C:40D5  B0 58				mov	al,58h			; 'X'
020C:40D7  FC					cld				; Clear direction
020C:40D8  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:40DA  EB 05				jmp	short loc_499		; (40E1)
020C:40DC			loc_498:
020C:40DC  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:40E1			loc_499:
020C:40E1  C3					retn
							                        ;* No entry point to code
020C:40E2  87 DB				xchg	bx,bx
020C:40E4  80 3E 5614 01			cmp	byte ptr ds:[5614h],1	; (020C:5614=0C4h)
020C:40E9  75 07				jne	loc_500			; Jump if not equal
020C:40EB  C6 06 4FD6 12			mov	byte ptr data_310,12h	; (020C:4FD6=2)
020C:40F0  EB 2B				jmp	short loc_503		; (411D)
020C:40F2			loc_500:
020C:40F2  B4 01				mov	ah,1
020C:40F4  3C 46				cmp	al,46h			; 'F'
020C:40F6  74 16				je	loc_501			; Jump if equal
020C:40F8  FE C4				inc	ah
020C:40FA  3C 42				cmp	al,42h			; 'B'
020C:40FC  74 10				je	loc_501			; Jump if equal
020C:40FE  FE C4				inc	ah
020C:4100  3C 44				cmp	al,44h			; 'D'
020C:4102  74 0A				je	loc_501			; Jump if equal
020C:4104  2C 31				sub	al,31h			; '1'
020C:4106  3C 02				cmp	al,2
020C:4108  77 0E				ja	loc_502			; Jump if above
020C:410A  FE C0				inc	al
020C:410C  8A E0				mov	ah,al
020C:410E			loc_501:
020C:410E  88 26 3031				mov	data_236,ah		; (020C:3031=0)
020C:4112  88 26 3032				mov	data_237,ah		; (020C:3032=0)
020C:4116  EB 05				jmp	short loc_503		; (411D)
020C:4118			loc_502:
020C:4118  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:411D			loc_503:
020C:411D  C3					retn
							                        ;* No entry point to code
020C:411E  87 DB				xchg	bx,bx
020C:4120  32 E4				xor	ah,ah			; Zero register
020C:4122  3C 44				cmp	al,44h			; 'D'
020C:4124  74 1D				je	loc_504			; Jump if equal
020C:4126  FE C4				inc	ah
020C:4128  3C 5A				cmp	al,5Ah			; 'Z'
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 145

020C:412A  74 17				je	loc_504			; Jump if equal
020C:412C  FE C4				inc	ah
020C:412E  3C 53				cmp	al,53h			; 'S'
020C:4130  74 11				je	loc_504			; Jump if equal
020C:4132  FE C4				inc	ah
020C:4134  3C 4C				cmp	al,4Ch			; 'L'
020C:4136  74 0B				je	loc_504			; Jump if equal
020C:4138  3C 4E				cmp	al,4Eh			; 'N'
020C:413A  74 07				je	loc_504			; Jump if equal
020C:413C  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:4141  EB 0A				jmp	short loc_505		; (414D)
020C:4143			loc_504:
020C:4143  88 26 15D0				mov	data_149,ah		; (020C:15D0=0)
020C:4147  E8 1B9A				call	$+1B9Dh
020C:414A  E8 0364				call	sub_41			; (44B1)
020C:414D			loc_505:
020C:414D  C3					retn
020C:414E  87 DB				xchg	bx,bx
020C:4150  413C			data_291	dw	413Ch
020C:4152  75 07				jnz	loc_506			; Jump if not zero
020C:4154  80 0E 30B2 80			or	byte ptr data_245+40h,80h	; (020C:30B2='1')
020C:4159  EB 0E				jmp	short loc_507		; (4169)
020C:415B			loc_506:
020C:415B  80 26 30B2 7F			and	byte ptr data_245+40h,7Fh	; (020C:30B2='1')
020C:4160  8A 44 01				mov	al,[si+1]
020C:4163  24 5F				and	al,5Fh			; '_'
020C:4165  3C 4E				cmp	al,4Eh			; 'N'
020C:4167  74 08				je	loc_508			; Jump if equal
020C:4169			loc_507:
020C:4169  C6 06 30B0 00			mov	byte ptr data_245+3Eh,0	; (020C:30B0='E')
020C:416E  E9 0256				jmp	loc_542			; (43C7)
020C:4171			loc_508:
020C:4171  C6 06 30B0 01			mov	byte ptr data_245+3Eh,1	; (020C:30B0='E')
020C:4176  E9 024E				jmp	loc_542			; (43C7)
							                        ;* No entry point to code
020C:4179  87 DB				xchg	bx,bx
020C:417B  90					nop
020C:417C  A0 4E90				mov	al,data_306		; (020C:4E90=30h)
020C:417F  24 DF				and	al,0DFh
020C:4181  3C 41				cmp	al,41h			; 'A'
020C:4183  75 0D				jne	loc_509			; Jump if not equal
020C:4185  C6 06 35E3 01			mov	data_279,1		; (020C:35E3=0E8h)
020C:418A  8B 1E 1326				mov	bx,data_142		; (020C:1326=0)
020C:418E  C6 47 4A 00				mov	byte ptr [bx+4Ah],0
020C:4192			loc_509:
020C:4192  C3					retn
							                        ;* No entry point to code
020C:4193  90					nop
020C:4194  8B 1E 4F94				mov	bx,data_309		; (020C:4F94=1606h)
020C:4198  83 FB 00				cmp	bx,0
020C:419B  75 08				jne	loc_510			; Jump if not equal
020C:419D  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:41A2  E9 0090				jmp	loc_516			; (4235)
020C:41A5			loc_510:
020C:41A5  FC					cld				; Clear direction
020C:41A6  BF 3233				mov	di,3233h
020C:41A9  B9 0029				mov	cx,29h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 146

020C:41AC  B0 00				mov	al,0
020C:41AE  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:41B0  BF 036A				mov	di,36Ah
020C:41B3  B9 000C				mov	cx,0Ch
020C:41B6  B0 20				mov	al,20h			; ' '
020C:41B8  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:41BA  BF 3233				mov	di,3233h
020C:41BD  8B CB				mov	cx,bx

020C:41BF			locloop_511:
020C:41BF  80 3C 2E				cmp	byte ptr [si],2Eh	; '.'
020C:41C2  74 03				je	loc_512			; Jump if equal
020C:41C4  A4					movsb				; Mov [si] to es:[di]
020C:41C5  E2 F8				loop	locloop_511		; Loop if cx > 0

020C:41C7			loc_512:
020C:41C7  2B D9				sub	bx,cx
020C:41C9  9A 1516:26A0		;*		call	far ptr sub_58		;*(1516:26A0)
020C:41C9  9A					db	9Ah
020C:41CA  26A0 1516				dw	26A0h, 1516h
020C:41CE  83 C3 04				add	bx,4
020C:41D1  47					inc	di
020C:41D2  8B CB				mov	cx,bx
020C:41D4			loc_513:
020C:41D4  8A 05				mov	al,[di]
020C:41D6  3C 3A				cmp	al,3Ah			; ':'
020C:41D8  74 0D				je	loc_514			; Jump if equal
020C:41DA  3C 5C				cmp	al,5Ch			; '\'
020C:41DC  74 09				je	loc_514			; Jump if equal
020C:41DE  83 F9 01				cmp	cx,1
020C:41E1  76 06				jbe	loc_515			; Jump if below or =
020C:41E3  49					dec	cx
020C:41E4  4F					dec	di
020C:41E5  EB ED				jmp	short loc_513		; (41D4)
020C:41E7			loc_514:
020C:41E7  47					inc	di
020C:41E8  41					inc	cx
020C:41E9			loc_515:
020C:41E9  2B D9				sub	bx,cx
020C:41EB  8B CB				mov	cx,bx
020C:41ED  41					inc	cx
020C:41EE  83 F9 0C				cmp	cx,0Ch
020C:41F1  77 42				ja	loc_516			; Jump if above
020C:41F3  8B F7				mov	si,di
020C:41F5  BF 036A				mov	di,36Ah
020C:41F8  FC					cld				; Clear direction
020C:41F9  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:41FB  80 3E 3234 3A			cmp	byte ptr data_253+0B4h,3Ah	; (020C:3234='D') ':'
020C:4200  75 33				jne	loc_516			; Jump if not equal
020C:4202  A0 3233				mov	al,byte ptr data_253+0B3h	; (020C:3233='M')
020C:4205  24 5F				and	al,5Fh			; '_'
020C:4207  3C 41				cmp	al,41h			; 'A'
020C:4209  72 2A				jb	loc_516			; Jump if below
020C:420B  3C 5A				cmp	al,5Ah			; 'Z'
020C:420D  77 26				ja	loc_516			; Jump if above
020C:420F  8A D0				mov	dl,al
020C:4211  80 EA 41				sub	dl,41h			; 'A'
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 147

020C:4214  8A DA				mov	bl,dl
020C:4216  B4 19				mov	ah,19h
020C:4218  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020C:421A  50					push	ax
020C:421B  B4 0E				mov	ah,0Eh
020C:421D  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020C:421F  B4 19				mov	ah,19h
020C:4221  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020C:4223  A2 30CE				mov	byte ptr data_245+5Ch,al	; (020C:30CE=' ')
020C:4226  04 61				add	al,61h			; 'a'
020C:4228  A2 066E				mov	byte ptr ds:[66Eh],al	; (020C:066E=0Eh)
020C:422B  E8 13F2				call	$+13F5h
020C:422E  58					pop	ax
020C:422F  8A D0				mov	dl,al
020C:4231  B4 0E				mov	ah,0Eh
020C:4233  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020C:4235			loc_516:
020C:4235  C3					retn
020C:4236  87 DB				xchg	bx,bx
020C:4238  2C 32				sub	al,32h			; '2'
020C:423A  3C 07				cmp	al,7
020C:423C  77 0E				ja	loc_518			; Jump if above
020C:423E  04 02				add	al,2
020C:4240  D0 E0				shl	al,1			; Shift w/zeros fill
020C:4242  E8 1D77				call	$+1D7Ah
020C:4245  C6 06 2B38 01			mov	byte ptr ds:[2B38h],1	; (020C:2B38=0E5h)
020C:424A  EB 05				jmp	short loc_519		; (4251)
020C:424C			loc_518:
020C:424C  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:4251			loc_519:
020C:4251  C3					retn
							                        ;* No entry point to code
020C:4252  87 DB				xchg	bx,bx
020C:4254  8B 1E 4F94				mov	bx,data_309		; (020C:4F94=1606h)
020C:4258  32 E4				xor	ah,ah			; Zero register
020C:425A  3C 4E				cmp	al,4Eh			; 'N'
020C:425C  74 3E				je	loc_521			; Jump if equal
020C:425E  FE C4				inc	ah
020C:4260  3C 44				cmp	al,44h			; 'D'
020C:4262  74 38				je	loc_521			; Jump if equal
020C:4264  FE C4				inc	ah
020C:4266  3C 49				cmp	al,49h			; 'I'
020C:4268  74 32				je	loc_521			; Jump if equal
020C:426A  B4 04				mov	ah,4
020C:426C  3C 4F				cmp	al,4Fh			; 'O'
020C:426E  74 2C				je	loc_521			; Jump if equal
020C:4270  B4 07				mov	ah,7
020C:4272  3C 41				cmp	al,41h			; 'A'
020C:4274  74 26				je	loc_521			; Jump if equal
020C:4276  3C 45				cmp	al,45h			; 'E'
020C:4278  75 2B				jne	loc_522			; Jump if not equal
020C:427A			loc_520:
020C:427A  46					inc	si
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 148

020C:427B  4B					dec	bx
020C:427C  74 27				jz	loc_522			; Jump if zero
020C:427E  80 3C 20				cmp	byte ptr [si],20h	; ' '
020C:4281  75 F7				jne	loc_520			; Jump if not equal
020C:4283  46					inc	si
020C:4284  4B					dec	bx
020C:4285  74 1E				jz	loc_522			; Jump if zero
020C:4287  B4 06				mov	ah,6
020C:4289  80 3C 44				cmp	byte ptr [si],44h	; 'D'
020C:428C  74 0E				je	loc_521			; Jump if equal
020C:428E  FE CC				dec	ah
020C:4290  80 3C 49				cmp	byte ptr [si],49h	; 'I'
020C:4293  74 07				je	loc_521			; Jump if equal
020C:4295  B4 03				mov	ah,3
020C:4297  80 3C 4F				cmp	byte ptr [si],4Fh	; 'O'
020C:429A  75 09				jne	loc_522			; Jump if not equal
020C:429C			loc_521:
020C:429C  88 26 16AB				mov	byte ptr data_153,ah	; (020C:16AB='AAAAAAAAAAAAAAA')
020C:42A0  E8 1ACD				call	$+1AD0h
020C:42A3  EB 05				jmp	short loc_523		; (42AA)
020C:42A5			loc_522:
020C:42A5  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:42AA			loc_523:
020C:42AA  C3					retn
							                        ;* No entry point to code
020C:42AB  90					nop
020C:42AC  80 3E 35E6 00			cmp	data_281,0		; (020C:35E6=72h)
020C:42B1  74 28				je	loc_526			; Jump if equal
020C:42B3  8A E0				mov	ah,al
020C:42B5  80 FC 4F				cmp	ah,4Fh			; 'O'
020C:42B8  74 1A				je	loc_525			; Jump if equal
020C:42BA  C6 06 35E4 01			mov	data_280,1		; (020C:35E4=7Eh)
020C:42BF  B0 01				mov	al,1
020C:42C1  80 FC 4E				cmp	ah,4Eh			; 'N'
020C:42C4  74 07				je	loc_524			; Jump if equal
020C:42C6  80 0E 35E4 02			or	data_280,2		; (020C:35E4=7Eh)
020C:42CB  EB 0E				jmp	short loc_526		; (42DB)
020C:42CD			loc_524:
020C:42CD  80 0E 35E4 08			or	data_280,8		; (020C:35E4=7Eh)
020C:42D2  EB 07				jmp	short loc_526		; (42DB)
020C:42D4			loc_525:
020C:42D4  80 26 35E4 FE			and	data_280,0FEh		; (020C:35E4=7Eh)
020C:42D9  32 C0				xor	al,al			; Zero register
020C:42DB			loc_526:
020C:42DB  C3					retn
							                        ;* No entry point to code
020C:42DC  BF 13E8				mov	di,13E8h
020C:42DF  8A 05				mov	al,[di]
020C:42E1  A2 13E4				mov	data_144,al		; (020C:13E4=0)
020C:42E4  33 ED				xor	bp,bp			; Zero register
020C:42E6  8D 55 0B				lea	dx,[di+0Bh]		; Load effective addr
020C:42E9  8D 4D 01				lea	cx,[di+1]		; Load effective addr
020C:42EC  2B D1				sub	dx,cx
020C:42EE  8B CA				mov	cx,dx
020C:42F0  33 DB				xor	bx,bx			; Zero register
020C:42F2  56					push	si

           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 149

020C:42F3			locloop_527:
020C:42F3  8A 04				mov	al,[si]
020C:42F5  3C 00				cmp	al,0
020C:42F7  74 3E				je	loc_532			; Jump if equal
020C:42F9  3C 20				cmp	al,20h			; ' '
020C:42FB  74 04				je	loc_528			; Jump if equal
020C:42FD  3C 09				cmp	al,9
020C:42FF  75 03				jne	loc_529			; Jump if not equal
020C:4301			loc_528:
020C:4301  46					inc	si
020C:4302  EB EF				jmp	short locloop_527	; (42F3)
020C:4304			loc_529:
020C:4304  81 39 582E				cmp	word ptr [bx+di],582Eh
020C:4308  75 0B				jne	loc_530			; Jump if not equal
020C:430A  3C 30				cmp	al,30h			; '0'
020C:430C  72 18				jb	loc_531			; Jump if below
020C:430E  3C 39				cmp	al,39h			; '9'
020C:4310  77 03				ja	loc_530			; Jump if above
020C:4312  46					inc	si
020C:4313  EB 28				jmp	short loc_533		; (433D)
020C:4315			loc_530:
020C:4315  38 41 01				cmp	[bx+di+1],al
020C:4318  75 0C				jne	loc_531			; Jump if not equal
020C:431A  43					inc	bx
020C:431B  46					inc	si
020C:431C  80 79 01 20				cmp	byte ptr [bx+di+1],20h	; ' '
020C:4320  74 1B				je	loc_533			; Jump if equal
020C:4322  E2 CF				loop	locloop_527		; Loop if cx > 0

020C:4324  E3 17				jcxz	loc_533			; Jump if cx=0
020C:4326			loc_531:
020C:4326  5E					pop	si
020C:4327  56					push	si
020C:4328  45					inc	bp
020C:4329  83 FD 0D				cmp	bp,0Dh
020C:432C  73 09				jae	loc_532			; Jump if above or =
020C:432E  8B CA				mov	cx,dx
020C:4330  83 C7 10				add	di,10h
020C:4333  33 DB				xor	bx,bx			; Zero register
020C:4335  EB BC				jmp	short locloop_527	; (42F3)
020C:4337			loc_532:
020C:4337  5E					pop	si
020C:4338  B4 36				mov	ah,36h			; '6'
020C:433A  E9 2A3B				jmp	$+2A3Eh
020C:433D			loc_533:
020C:433D  8A 45 0D				mov	al,[di+0Dh]
020C:4340  A2 13E5				mov	data_145,al		; (020C:13E5=0)
020C:4343  8A 05				mov	al,[di]
020C:4345  A2 13E4				mov	data_144,al		; (020C:13E4=0)
020C:4348  8B 45 0B				mov	ax,[di+0Bh]
020C:434B  A3 13E6				mov	data_146,ax		; (020C:13E6=0)
020C:434E			loc_534:
020C:434E  8A 04				mov	al,[si]
020C:4350  3C 00				cmp	al,0
020C:4352  74 26				je	loc_537			; Jump if equal
020C:4354  3C 2C				cmp	al,2Ch			; ','
020C:4356  74 03				je	loc_535			; Jump if equal
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 150

020C:4358  46					inc	si
020C:4359  EB F3				jmp	short loc_534		; (434E)
020C:435B			loc_535:
020C:435B  8A 04				mov	al,[si]
020C:435D  3C 00				cmp	al,0
020C:435F  74 19				je	loc_537			; Jump if equal
020C:4361  B4 80				mov	ah,80h
020C:4363  3C 46				cmp	al,46h			; 'F'
020C:4365  74 0F				je	loc_536			; Jump if equal
020C:4367  FE C4				inc	ah
020C:4369  3C 53				cmp	al,53h			; 'S'
020C:436B  74 09				je	loc_536			; Jump if equal
020C:436D  FE C4				inc	ah
020C:436F  3C 42				cmp	al,42h			; 'B'
020C:4371  74 03				je	loc_536			; Jump if equal
020C:4373  46					inc	si
020C:4374  EB E5				jmp	short loc_535		; (435B)
020C:4376			loc_536:
020C:4376  88 26 14FA				mov	data_147,ah		; (020C:14FA=0)
020C:437A			loc_537:
020C:437A  9A 1516:2B34		;*		call	far ptr sub_63		;*(1516:2B34)
020C:437A  9A					db	9Ah
020C:437B  2B34 1516				dw	2B34h, 1516h
020C:437F  E8 1142				call	$+1145h
020C:4382  5E					pop	si
020C:4383  C3					retn
							                        ;* No entry point to code
020C:4384  8B 04				mov	ax,[si]
020C:4386  8A 5C 02				mov	bl,[si+2]
020C:4389  BF 4F96				mov	di,4F96h
020C:438C			loc_538:
020C:438C  3B 05				cmp	ax,[di]
020C:438E  75 05				jne	loc_539			; Jump if not equal
020C:4390  3A 5D 02				cmp	bl,[di+2]
020C:4393  74 10				je	loc_540			; Jump if equal
020C:4395			loc_539:
020C:4395  83 C7 04				add	di,4
020C:4398  81 FF 4FD6				cmp	di,4FD6h
020C:439C  72 EE				jb	loc_538			; Jump if below
020C:439E  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:43A3  EB 5E				jmp	short loc_546		; (4403)
020C:43A5			loc_540:
020C:43A5  8A 45 03				mov	al,[di+3]
020C:43A8  3C F1				cmp	al,0F1h
020C:43AA  74 57				je	loc_546			; Jump if equal
020C:43AC  8A 36 30A0				mov	dh,byte ptr data_245+2Eh	; (020C:30A0='P')
020C:43B0  3C F2				cmp	al,0F2h
020C:43B2  75 09				jne	loc_541			; Jump if not equal
020C:43B4  A0 30A1				mov	al,byte ptr data_245+2Fh	; (020C:30A1='R')
020C:43B7  A8 F0				test	al,0F0h
020C:43B9  74 02				jz	loc_541			; Jump if zero
020C:43BB  0C 08				or	al,8
020C:43BD			loc_541:
020C:43BD  A2 30A0				mov	byte ptr data_245+2Eh,al	; (020C:30A0='P')
020C:43C0  C6 06 30B0 00			mov	byte ptr data_245+3Eh,0	; (020C:30B0='E')
020C:43C5  EB 25				jmp	short loc_544		; (43EC)
020C:43C7			loc_542:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 151

020C:43C7  A0 30A0				mov	al,byte ptr data_245+2Eh	; (020C:30A0='P')
020C:43CA  F6 06 30B0 1F			test	byte ptr data_245+3Eh,1Fh	; (020C:30B0='E')
020C:43CF  74 1B				jz	loc_544			; Jump if zero
020C:43D1  C6 06 30B0 01			mov	byte ptr data_245+3Eh,1	; (020C:30B0='E')
020C:43D6  A8 10				test	al,10h
020C:43D8  74 07				jz	loc_543			; Jump if zero
020C:43DA  C6 06 30B0 02			mov	byte ptr data_245+3Eh,2	; (020C:30B0='E')
020C:43DF  EB 1D				jmp	short loc_545		; (43FE)
020C:43E1			loc_543:
020C:43E1  A8 20				test	al,20h			; ' '
020C:43E3  74 07				jz	loc_544			; Jump if zero
020C:43E5  C6 06 30B0 04			mov	byte ptr data_245+3Eh,4	; (020C:30B0='E')
020C:43EA  EB 12				jmp	short loc_545		; (43FE)
020C:43EC			loc_544:
020C:43EC  A8 C0				test	al,0C0h
020C:43EE  74 0E				jz	loc_545			; Jump if zero
020C:43F0  C6 06 30B0 0C			mov	byte ptr data_245+3Eh,0Ch	; (020C:30B0='E')
020C:43F5  A8 80				test	al,80h
020C:43F7  74 05				jz	loc_545			; Jump if zero
020C:43F9  C6 06 30B0 14			mov	byte ptr data_245+3Eh,14h	; (020C:30B0='E')
020C:43FE			loc_545:
020C:43FE  B6 01				mov	dh,1
020C:4400  E8 12D5				call	$+12D8h
020C:4403			loc_546:
020C:4403  C3					retn
							                        ;* No entry point to code
020C:4404  55					push	bp
020C:4405  8B 2E 4F94				mov	bp,data_309		; (020C:4F94=1606h)
020C:4409  33 DB				xor	bx,bx			; Zero register
020C:440B  32 C9				xor	cl,cl			; Zero register
020C:440D  8A 1C				mov	bl,[si]
020C:440F  80 EB 30				sub	bl,30h			; '0'
020C:4412  80 FB 09				cmp	bl,9
020C:4415  76 03				jbe	loc_547			; Jump if below or =
020C:4417  E9 008F				jmp	loc_554			; (44A9)
020C:441A			loc_547:
020C:441A  8A C3				mov	al,bl
020C:441C  46					inc	si
020C:441D  4D					dec	bp
020C:441E  FE C1				inc	cl
020C:4420  8A 1C				mov	bl,[si]
020C:4422  80 EB 30				sub	bl,30h			; '0'
020C:4425  80 FB 09				cmp	bl,9
020C:4428  76 04				jbe	loc_548			; Jump if below or =
020C:442A  8A D8				mov	bl,al
020C:442C  EB 22				jmp	short loc_549		; (4450)
020C:442E			loc_548:
020C:442E  B5 0A				mov	ch,0Ah
020C:4430  F6 E5				mul	ch			; ax = reg * al
020C:4432  03 D8				add	bx,ax
020C:4434  46					inc	si
020C:4435  4D					dec	bp
020C:4436  FE C1				inc	cl
020C:4438  8A 14				mov	dl,[si]
020C:443A  80 EA 30				sub	dl,30h			; '0'
020C:443D  80 FA 09				cmp	dl,9
020C:4440  77 0E				ja	loc_549			; Jump if above
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 152

020C:4442  46					inc	si
020C:4443  4D					dec	bp
020C:4444  FE C1				inc	cl
020C:4446  8B C3				mov	ax,bx
020C:4448  F6 E5				mul	ch			; ax = reg * al
020C:444A  32 F6				xor	dh,dh			; Zero register
020C:444C  03 C2				add	ax,dx
020C:444E  8B D8				mov	bx,ax
020C:4450			loc_549:
020C:4450  83 FB 00				cmp	bx,0
020C:4453  74 0B				je	loc_550			; Jump if equal
020C:4455  83 FB 0A				cmp	bx,0Ah
020C:4458  72 4F				jb	loc_554			; Jump if below
020C:445A  81 FB 00FF				cmp	bx,0FFh
020C:445E  77 49				ja	loc_554			; Jump if above
020C:4460			loc_550:
020C:4460  88 1E 35E8				mov	byte ptr ds:[35E8h],bl	; (020C:35E8=89h)
020C:4464  80 FB 00				cmp	bl,0
020C:4467  74 11				je	loc_551			; Jump if equal
020C:4469  BF 5ABD				mov	di,5ABDh
020C:446C  C7 45 FF 2020			mov	word ptr [di-1],2020h
020C:4471  56					push	si
020C:4472  4E					dec	si
020C:4473  32 ED				xor	ch,ch			; Zero register
020C:4475  FD					std				; Set direction flag
020C:4476  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:4478  FC					cld				; Clear direction
020C:4479  5E					pop	si
020C:447A			loc_551:
020C:447A  83 FD 02				cmp	bp,2
020C:447D  72 2A				jb	loc_554			; Jump if below
020C:447F  83 FD 32				cmp	bp,32h
020C:4482  77 25				ja	loc_554			; Jump if above
020C:4484			loc_552:
020C:4484  80 3C 2C				cmp	byte ptr [si],2Ch	; ','
020C:4487  74 06				je	loc_553			; Jump if equal
020C:4489  4D					dec	bp
020C:448A  74 1D				jz	loc_554			; Jump if zero
020C:448C  46					inc	si
020C:448D  EB F5				jmp	short loc_552		; (4484)
020C:448F			loc_553:
020C:448F  46					inc	si
020C:4490  4D					dec	bp
020C:4491  74 16				jz	loc_554			; Jump if zero
020C:4493  80 3C 20				cmp	byte ptr [si],20h	; ' '
020C:4496  74 F7				je	loc_553			; Jump if equal
020C:4498  80 3C 43				cmp	byte ptr [si],43h	; 'C'
020C:449B  75 0C				jne	loc_554			; Jump if not equal
020C:449D  46					inc	si
020C:449E  8A 04				mov	al,[si]
020C:44A0  2C 30				sub	al,30h			; '0'
020C:44A2  3C 07				cmp	al,7
020C:44A4  77 03				ja	loc_554			; Jump if above
020C:44A6  A2 35E1				mov	byte ptr ds:[35E1h],al	; (020C:35E1=9Eh)
020C:44A9			loc_554:
020C:44A9  5D					pop	bp
020C:44AA  C3					retn
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 153

							                        ;* No entry point to code
020C:44AB  90					nop
020C:44AC  C6 06 35DF 00			mov	byte ptr ds:[35DFh],0	; (020C:35DF=0)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_41		proc	near
020C:44B1  BE 03D0				mov	si,3D0h
020C:44B4  BA 0003				mov	dx,3
020C:44B7			loc_555:
020C:44B7  B9 0016				mov	cx,16h
020C:44BA  E8 1EAF				call	$+1EB2h
020C:44BD  83 C6 3A				add	si,3Ah
020C:44C0  4A					dec	dx
020C:44C1  75 F4				jnz	loc_555			; Jump if not zero
020C:44C3  B9 3BCD				mov	cx,3BCDh
020C:44C6  81 E9 3634				sub	cx,3634h
020C:44CA  BE 3634				mov	si,3634h
020C:44CD  E8 1E9C				call	$+1E9Fh
020C:44D0  B9 5FF9				mov	cx,5FF9h
020C:44D3  81 E9 5BA8				sub	cx,5BA8h
020C:44D7  BE 5BA8				mov	si,5BA8h
020C:44DA  E8 1E8F				call	$+1E92h
020C:44DD  C3					retn
				sub_41		endp

							                        ;* No entry point to code
020C:44DE  87 DB				xchg	bx,bx
020C:44E0  8B 1E 4F94				mov	bx,data_309		; (020C:4F94=1606h)
020C:44E4  80 3E 35E6 00			cmp	data_281,0		; (020C:35E6=72h)
020C:44E9  74 35				je	loc_559			; Jump if equal
020C:44EB  83 FB 02				cmp	bx,2
020C:44EE  72 0F				jb	loc_556			; Jump if below
020C:44F0  8A 44 01				mov	al,[si+1]
020C:44F3  B3 07				mov	bl,7
020C:44F5  3C 4E				cmp	al,4Eh			; 'N'
020C:44F7  74 0D				je	loc_557			; Jump if equal
020C:44F9  32 DB				xor	bl,bl			; Zero register
020C:44FB  3C 46				cmp	al,46h			; 'F'
020C:44FD  74 07				je	loc_557			; Jump if equal
020C:44FF			loc_556:
020C:44FF  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:4504  EB 1A				jmp	short loc_559		; (4520)
020C:4506			loc_557:
020C:4506  88 1E 4E7F				mov	data_304,bl		; (020C:4E7F=0EBh)
020C:450A  80 FB 00				cmp	bl,0
020C:450D  74 0E				je	loc_558			; Jump if equal
020C:450F  80 3E 2B3B 0A			cmp	data_217,0Ah		; (020C:2B3B=0A0h)
020C:4514  73 0A				jae	loc_559			; Jump if above or =
020C:4516  B0 0A				mov	al,0Ah
020C:4518  E8 1AA1				call	$+1AA4h
020C:451B  EB 03				jmp	short loc_559		; (4520)
020C:451D			loc_558:
020C:451D  E8 1774				call	$+1777h
020C:4520			loc_559:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 154

020C:4520  C3					retn
							                        ;* No entry point to code
020C:4521  87 DB				xchg	bx,bx
020C:4523  90					nop
020C:4524  89 36 509E				mov	word ptr ds:[509Eh],si	; (020C:509E=7C3Ch)
020C:4528  8B 1E 4F94				mov	bx,data_309		; (020C:4F94=1606h)
020C:452C  01 1E 509E				add	word ptr ds:[509Eh],bx	; (020C:509E=7C3Ch)
020C:4530  E8 F731				call	sub_39			; (3C64)
020C:4533  72 02				jc	loc_560			; Jump if carry Set
020C:4535  EB 05				jmp	short loc_561		; (453C)
020C:4537			loc_560:
020C:4537  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:453C			loc_561:
020C:453C  C3					retn
							                        ;* No entry point to code
020C:453D  87 DB				xchg	bx,bx
020C:453F  90					nop
020C:4540  C6 06 2BE6 00			mov	data_224,0		; (020C:2BE6=0)
020C:4545  80 3E 5614 01			cmp	byte ptr ds:[5614h],1	; (020C:5614=0C4h)
020C:454A  75 08				jne	loc_562			; Jump if not equal
020C:454C  C6 06 4FD6 12			mov	byte ptr data_310,12h	; (020C:4FD6=2)
020C:4551  E9 0082				jmp	loc_571			; (45D6)
020C:4554			loc_562:
020C:4554  89 36 509E				mov	word ptr ds:[509Eh],si	; (020C:509E=7C3Ch)
020C:4558  8B 1E 4F94				mov	bx,data_309		; (020C:4F94=1606h)
020C:455C  01 1E 509E				add	word ptr ds:[509Eh],bx	; (020C:509E=7C3Ch)
020C:4560  33 DB				xor	bx,bx			; Zero register
020C:4562  81 3C 5856				cmp	word ptr [si],5856h
020C:4566  75 08				jne	loc_563			; Jump if not equal
020C:4568  83 C6 03				add	si,3
020C:456B  C6 06 2BE6 01			mov	data_224,1		; (020C:2BE6=0)
020C:4570			loc_563:
020C:4570  E8 F6F1				call	sub_39			; (3C64)
020C:4573  72 5C				jc	loc_570			; Jump if carry Set
020C:4575  80 3C 3A				cmp	byte ptr [si],3Ah	; ':'
020C:4578  75 17				jne	loc_566			; Jump if not equal
020C:457A  46					inc	si
020C:457B  80 3E 2BE6 01			cmp	data_224,1		; (020C:2BE6=0)
020C:4580  75 06				jne	loc_564			; Jump if not equal
020C:4582  89 16 2C0F				mov	word ptr ds:[2C0Fh],dx	; (020C:2C0F=4DE2h)
020C:4586  EB 04				jmp	short loc_565		; (458C)
020C:4588			loc_564:
020C:4588  89 97 2BE7				mov	data_225[bx],dx		; (020C:2BE7=0)
020C:458C			loc_565:
020C:458C  E8 F6D5				call	sub_39			; (3C64)
020C:458F  72 40				jc	loc_570			; Jump if carry Set
020C:4591			loc_566:
020C:4591  80 3E 2BE6 01			cmp	data_224,1		; (020C:2BE6=0)
020C:4596  75 06				jne	loc_567			; Jump if not equal
020C:4598  89 16 2C11				mov	data_230,dx		; (020C:2C11=410h)
020C:459C  EB 2D				jmp	short loc_569		; (45CB)
020C:459E			loc_567:
020C:459E  89 97 2BE9				mov	data_226[bx],dx		; (020C:2BE9=0)
020C:45A2  80 3C 2C				cmp	byte ptr [si],2Ch	; ','
020C:45A5  75 24				jne	loc_569			; Jump if not equal
020C:45A7  46					inc	si
020C:45A8  E8 F6B9				call	sub_39			; (3C64)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 155

020C:45AB  72 24				jc	loc_570			; Jump if carry Set
020C:45AD  80 3C 3A				cmp	byte ptr [si],3Ah	; ':'
020C:45B0  75 0A				jne	loc_568			; Jump if not equal
020C:45B2  46					inc	si
020C:45B3  89 97 2BEB				mov	data_227[bx],dx		; (020C:2BEB=0)
020C:45B7  E8 F6AA				call	sub_39			; (3C64)
020C:45BA  72 15				jc	loc_570			; Jump if carry Set
020C:45BC			loc_568:
020C:45BC  89 97 2BED				mov	data_228[bx],dx		; (020C:2BED=0)
020C:45C0  80 3C 3B				cmp	byte ptr [si],3Bh	; ';'
020C:45C3  75 06				jne	loc_569			; Jump if not equal
020C:45C5  46					inc	si
020C:45C6  83 C3 08				add	bx,8
020C:45C9  EB A5				jmp	short loc_563		; (4570)
020C:45CB			loc_569:
020C:45CB  FE 06 2BE6				inc	data_224		; (020C:2BE6=0)
020C:45CF  EB 05				jmp	short loc_571		; (45D6)
020C:45D1			loc_570:
020C:45D1  C6 06 4FD6 09			mov	byte ptr data_310,9	; (020C:4FD6=2)
020C:45D6			loc_571:
020C:45D6  C3					retn
							                        ;* No entry point to code
020C:45D7  90					nop
020C:45D8  2C 30				sub	al,30h			; '0'
020C:45DA  3C 7F				cmp	al,7Fh
020C:45DC  77 03				ja	loc_572			; Jump if above
020C:45DE  A2 35D3				mov	byte ptr ds:[35D3h],al	; (020C:35D3=21h)
020C:45E1			loc_572:
020C:45E1  C3					retn
020C:45E2  000E[00]				db	14 dup (0)
020C:45F0			loc_573:
020C:45F0  BE 4E43				mov	si,4E43h
020C:45F3  80 3E 327D 00			cmp	byte ptr data_253+0FDh,0	; (020C:327D='I')
020C:45F8  74 03				je	loc_574			; Jump if equal
020C:45FA  E9 F140				jmp	loc_392			; (373D)
020C:45FD			loc_574:
020C:45FD  B6 01				mov	dh,1
020C:45FF  B2 37				mov	dl,37h			; '7'
020C:4601  E8 7640				call	$+7643h
020C:4604  0A F6				or	dh,dh			; Zero ?
020C:4606  74 09				jz	loc_575			; Jump if zero
020C:4608  83 4C D6 04				or	word ptr [si-2Ah],4
020C:460C  B2 25				mov	dl,25h			; '%'
020C:460E  E8 7633				call	$+7636h
020C:4611			loc_575:
020C:4611  A1 4E22				mov	ax,data_300		; (020C:4E22=0E906h)
020C:4614  A3 4E1C				mov	data_298,ax		; (020C:4E1C=2B34h)
020C:4617  A1 4E24				mov	ax,data_301		; (020C:4E24=0E935h)
020C:461A  A3 4E1E				mov	data_299,ax		; (020C:4E1E=1516h)
020C:461D  F7 06 4E22 0002			test	data_300,2		; (020C:4E22=0E906h)
020C:4623  74 07				jz	loc_576			; Jump if zero
020C:4625  B0 01				mov	al,1
020C:4627  9A 1516:45B8		;*		call	far ptr sub_70		;*(1516:45B8)
020C:4627  9A					db	9Ah
020C:4628  45B8 1516				dw	45B8h, 1516h
020C:462C			loc_576:
020C:462C  8A 16 30CE				mov	dl,byte ptr data_245+5Ch	; (020C:30CE=' ')
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 156

020C:4630  80 C2 61				add	dl,61h			; 'a'
020C:4633  88 16 3231				mov	byte ptr data_253+0B1h,dl	; (020C:3231='.')
020C:4637  BA 4355				mov	dx,4355h
020C:463A  B4 1A				mov	ah,1Ah
020C:463C  CD 21				int	21h			; DOS Services  ah=function 1Ah
										;  set DTA(disk xfer area) ds:dx
020C:463E  BA 3233				mov	dx,3233h
020C:4641  80 3E 3234 3A			cmp	byte ptr data_253+0B4h,3Ah	; (020C:3234='D') ':'
020C:4646  74 03				je	loc_577			; Jump if equal
020C:4648  BA 3231				mov	dx,3231h
020C:464B			loc_577:
020C:464B  B9 0000				mov	cx,0
020C:464E  B4 4E				mov	ah,4Eh
020C:4650  CD 21				int	21h			; DOS Services  ah=function 4Eh
										;  find 1st filenam match @ds:dx
020C:4652  72 53				jc	loc_580			; Jump if carry Set
020C:4654  E8 1189				call	$+118Ch
020C:4657  A0 1208				mov	al,data_136		; (020C:1208=0)
020C:465A  88 47 52				mov	[bx+52h],al
020C:465D  B4 19				mov	ah,19h
020C:465F  E8 11DA				call	$+11DDh
020C:4662  E8 0D0B				call	$+0D0Eh
020C:4665  B4 02				mov	ah,2
020C:4667  32 FF				xor	bh,bh			; Zero register
020C:4669  BA 174B				mov	dx,174Bh
020C:466C  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:466C  9A					db	9Ah
020C:466D  2BA8 1516				dw	2BA8h, 1516h
020C:4671  E8 158C				call	$+158Fh
020C:4674			loc_578:
020C:4674  F7 06 35E9 0004			test	data_283,4		; (020C:35E9=1F16h)
020C:467A  75 2B				jnz	loc_580			; Jump if not zero
020C:467C  9A 1516:0760		;*		call	far ptr sub_52		;*(1516:0760)
020C:467C  9A					db	9Ah
020C:467D  0760 1516				dw	760h, 1516h
020C:4681  24 DF				and	al,0DFh
020C:4683  3C 59				cmp	al,59h			; 'Y'
020C:4685  74 20				je	loc_580			; Jump if equal
020C:4687  3C 4E				cmp	al,4Eh			; 'N'
020C:4689  74 07				je	loc_579			; Jump if equal
020C:468B  9A 1516:2B10		;*		call	far ptr sub_62		;*(1516:2B10)
020C:468B  9A					db	9Ah
020C:468C  2B10 1516				dw	2B10h, 1516h
020C:4690  EB E2				jmp	short loc_578		; (4674)
020C:4692			loc_579:
020C:4692  8A 16 30CD				mov	dl,byte ptr data_245+5Bh	; (020C:30CD='E')
020C:4696  B4 0E				mov	ah,0Eh
020C:4698  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020C:469A  E8 1557				call	$+155Ah
020C:469D  E8 1168				call	$+116Bh
020C:46A0  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020C:46A4  E9 F096				jmp	loc_392			; (373D)
020C:46A7			loc_580:
020C:46A7  8B 1E 1326				mov	bx,data_142		; (020C:1326=0)
020C:46AB  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020C:46AF  E8 1542				call	$+1545h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 157

020C:46B2  E8 2B28				call	$+2B2Bh
020C:46B5  B9 000C				mov	cx,0Ch
020C:46B8  BE 036A				mov	si,36Ah
020C:46BB  BF 3346				mov	di,3346h

020C:46BE			locloop_581:
020C:46BE  80 3C 00				cmp	byte ptr [si],0
020C:46C1  74 09				je	loc_582			; Jump if equal
020C:46C3  80 3C 20				cmp	byte ptr [si],20h	; ' '
020C:46C6  74 04				je	loc_582			; Jump if equal
020C:46C8  FC					cld				; Clear direction
020C:46C9  A4					movsb				; Mov [si] to es:[di]
020C:46CA  E2 F2				loop	locloop_581		; Loop if cx > 0

020C:46CC			loc_582:
020C:46CC  BB 4DEB				mov	bx,4DEBh
020C:46CF  B9 0020				mov	cx,20h
020C:46D2  BE 0378				mov	si,378h
020C:46D5  BF 3356				mov	di,3356h
020C:46D8  FC					cld				; Clear direction
020C:46D9  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:46DB  F7 47 2E 0002			test	word ptr [bx+2Eh],2
020C:46E0  74 03				jz	loc_583			; Jump if zero
020C:46E2  E9 2617				jmp	$+261Ah
020C:46E5			loc_583:
020C:46E5  F7 06 4E24 0020			test	data_301,20h		; (020C:4E24=0E935h)
020C:46EB  75 0A				jnz	loc_584			; Jump if not zero
020C:46ED  C6 06 6822 2A			mov	byte ptr ds:[6822h],2Ah	; (020C:6822=0C3h) '*'
020C:46F2  C6 06 6A59 2A			mov	byte ptr ds:[6A59h],2Ah	; (020C:6A59=70h) '*'
020C:46F7			loc_584:
020C:46F7  83 3E 3037 00			cmp	data_239,0		; (020C:3037=0Eh)
020C:46FC  75 44				jne	loc_587			; Jump if not equal
020C:46FE  8B 1E 2B3D				mov	bx,data_219		; (020C:2B3D=0EBADh)
020C:4702  8C C8				mov	ax,cs
020C:4704  2D 0010				sub	ax,10h
020C:4707  06					push	es
020C:4708  8E C0				mov	es,ax
020C:470A  B4 4A				mov	ah,4Ah
020C:470C  CD 21				int	21h			; DOS Services  ah=function 4Ah
										;  change memory allocation
										;   bx=bytes/16, es=mem segment
020C:470E  07					pop	es
020C:470F  73 06				jnc	loc_585			; Jump if carry=0
020C:4711  B8 0008				mov	ax,8
020C:4714  E9 256C				jmp	$+256Fh
020C:4717			loc_585:
020C:4717  E8 2ADE				call	$+2AE1h
020C:471A  8C CB				mov	bx,cs
020C:471C  83 EB 10				sub	bx,10h
020C:471F  2B C3				sub	ax,bx
020C:4721  8B 1E 2B3D				mov	bx,data_219		; (020C:2B3D=0EBADh)
020C:4725  2B D8				sub	bx,ax
020C:4727  B9 FFFF				mov	cx,0FFFFh
020C:472A  81 FB 1000				cmp	bx,1000h
020C:472E  73 0A				jae	loc_586			; Jump if above or =
020C:4730  8B CB				mov	cx,bx
020C:4732  D1 E1				shl	cx,1			; Shift w/zeros fill
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 158

020C:4734  D1 E1				shl	cx,1			; Shift w/zeros fill
020C:4736  D1 E1				shl	cx,1			; Shift w/zeros fill
020C:4738  D1 E1				shl	cx,1			; Shift w/zeros fill
020C:473A			loc_586:
020C:473A  89 0E 4E82				mov	data_305,cx		; (020C:4E82=20C6h)
020C:473E  D1 E9				shr	cx,1			; Shift w/zeros fill
020C:4740  EB 26				jmp	short loc_589		; (4768)
020C:4742			loc_587:
020C:4742  E8 2A9B				call	$+2A9Eh
020C:4745  8C C0				mov	ax,es
020C:4747  8B 0E 3037				mov	cx,data_239		; (020C:3037=0Eh)
020C:474B  2B C8				sub	cx,ax
020C:474D  81 F9 1000				cmp	cx,1000h
020C:4751  76 03				jbe	loc_588			; Jump if below or =
020C:4753  B9 1000				mov	cx,1000h
020C:4756			loc_588:
020C:4756  D1 E1				shl	cx,1			; Shift w/zeros fill
020C:4758  D1 E1				shl	cx,1			; Shift w/zeros fill
020C:475A  D1 E1				shl	cx,1			; Shift w/zeros fill
020C:475C  89 0E 4E82				mov	data_305,cx		; (020C:4E82=20C6h)
020C:4760  FF 0E 4E82				dec	data_305		; (020C:4E82=20C6h)
020C:4764  D1 26 4E82				shl	data_305,1		; (020C:4E82=20C6h) Shift w/zeros fill
020C:4768			loc_589:
020C:4768  E8 2A75				call	$+2A78h
020C:476B  B8 FFFF				mov	ax,0FFFFh
020C:476E  33 FF				xor	di,di			; Zero register
020C:4770  FC					cld				; Clear direction
020C:4771  F3/ AB				rep	stosw			; Rep when cx >0 Store ax to es:[di]
020C:4773  E8 2A67				call	$+2A6Ah
020C:4776  B4 2C				mov	ah,2Ch
020C:4778  CD 21				int	21h			; DOS Services  ah=function 2Ch
										;  get time, cx=hrs/min, dx=sec
020C:477A  89 0E 4E73				mov	data_302,cx		; (020C:4E73=130h)
020C:477E  89 16 4E75				mov	data_303,dx		; (020C:4E75=0C6F6h)
020C:4782  E8 105B				call	$+105Eh
020C:4785  A0 1207				mov	al,data_135		; (020C:1207=0)
020C:4788  88 47 4C				mov	[bx+4Ch],al
020C:478B  C6 47 4E 07				mov	byte ptr [bx+4Eh],7
020C:478F  C6 47 3F 00				mov	byte ptr [bx+3Fh],0
020C:4793  C6 47 40 00				mov	byte ptr [bx+40h],0
020C:4797  C6 47 56 00				mov	byte ptr [bx+56h],0
020C:479B  C6 47 70 00				mov	byte ptr [bx+70h],0
020C:479F  C6 47 71 00				mov	byte ptr [bx+71h],0
020C:47A3  C6 47 72 00				mov	byte ptr [bx+72h],0
020C:47A7  C6 47 73 00				mov	byte ptr [bx+73h],0
020C:47AB  C6 47 74 00				mov	byte ptr [bx+74h],0
020C:47AF  C6 47 75 00				mov	byte ptr [bx+75h],0
020C:47B3  C6 47 34 00				mov	byte ptr [bx+34h],0
020C:47B7  C6 47 35 00				mov	byte ptr [bx+35h],0
020C:47BB  C6 47 36 00				mov	byte ptr [bx+36h],0
020C:47BF  E8 2BA6				call	$+2BA9h
020C:47C2  C7 06 2B39 0010			mov	data_216,10h		; (020C:2B39=0A420h)
020C:47C8  9A 1516:2C58		;*		call	far ptr sub_66		;*(1516:2C58)
020C:47C8  9A					db	9Ah
020C:47C9  2C58 1516				dw	2C58h, 1516h
020C:47CD  B4 05				mov	ah,5
020C:47CF  E8 106A				call	$+106Dh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 159

020C:47D2  E8 0CBF				call	$+0CC2h
020C:47D5  8A 1E 3042				mov	bl,data_241		; (020C:3042=0CFh)
020C:47D9  FE CB				dec	bl
020C:47DB  BA FFFF				mov	dx,0FFFFh
020C:47DE  BE 0000				mov	si,0
020C:47E1  E8 29F0				call	$+29F3h
020C:47E4			loc_590:
020C:47E4  81 FE 291D				cmp	si,291Dh
020C:47E8  73 08				jae	loc_591			; Jump if above or =
020C:47EA  26: 8B 04				mov	ax,es:[si]
020C:47ED  3D FFFF				cmp	ax,0FFFFh
020C:47F0  75 02				jne	loc_592			; Jump if not equal
020C:47F2			loc_591:
020C:47F2  EB 58				jmp	short loc_602		; (484C)
020C:47F4			loc_592:
020C:47F4  BF 291D				mov	di,291Dh
020C:47F7  32 C9				xor	cl,cl			; Zero register
020C:47F9			loc_593:
020C:47F9  26: 83 3D FF				cmp	word ptr es:[di],0FFFFh
020C:47FD  74 0F				je	loc_594			; Jump if equal
020C:47FF  26: 3B 05				cmp	ax,es:[di]
020C:4802  74 12				je	loc_596			; Jump if equal
020C:4804  83 C7 02				add	di,2
020C:4807  FE C1				inc	cl
020C:4809  80 F9 FA				cmp	cl,0FAh
020C:480C  72 EB				jb	loc_593			; Jump if below
020C:480E			loc_594:
020C:480E  3B C2				cmp	ax,dx
020C:4810  74 02				je	loc_595			; Jump if equal
020C:4812  FE C3				inc	bl
020C:4814			loc_595:
020C:4814  8A CB				mov	cl,bl
020C:4816			loc_596:
020C:4816  88 0E 3046				mov	data_242,cl		; (020C:3046=0F9h)
020C:481A  80 F9 19				cmp	cl,19h
020C:481D  77 07				ja	loc_597			; Jump if above
020C:481F  80 C1 41				add	cl,41h			; 'A'
020C:4822  B5 20				mov	ch,20h			; ' '
020C:4824  EB 13				jmp	short loc_600		; (4839)
020C:4826			loc_597:
020C:4826  B5 41				mov	ch,41h			; 'A'
020C:4828			loc_598:
020C:4828  80 E9 1A				sub	cl,1Ah
020C:482B  80 F9 19				cmp	cl,19h
020C:482E  76 04				jbe	loc_599			; Jump if below or =
020C:4830  FE C5				inc	ch
020C:4832  EB F4				jmp	short loc_598		; (4828)
020C:4834			loc_599:
020C:4834  80 C1 41				add	cl,41h			; 'A'
020C:4837  86 CD				xchg	cl,ch
020C:4839			loc_600:
020C:4839  26: F7 44 0C 8000			test	word ptr es:[si+0Ch],8000h
020C:483F  75 04				jnz	loc_601			; Jump if not zero
020C:4841  26: 89 4C 0C				mov	es:[si+0Ch],cx
020C:4845			loc_601:
020C:4845  8B D0				mov	dx,ax
020C:4847  83 C6 15				add	si,15h
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 160

020C:484A  EB 98				jmp	short loc_590		; (47E4)
020C:484C			loc_602:
020C:484C  BE 0000				mov	si,0
020C:484F			loc_603:
020C:484F  BF 0000				mov	di,0
020C:4852  26: 83 3C FF				cmp	word ptr es:[si],0FFFFh
020C:4856  75 03				jne	loc_604			; Jump if not equal
020C:4858  E9 0111				jmp	loc_618			; (496C)
020C:485B			loc_604:
020C:485B  26: F6 44 0B 01			test	byte ptr es:[si+0Bh],1
020C:4860  75 05				jnz	loc_606			; Jump if not zero
020C:4862			loc_605:
020C:4862  83 C6 15				add	si,15h
020C:4865  EB E8				jmp	short loc_603		; (484F)
020C:4867			loc_606:
020C:4867  26: 8B 04				mov	ax,es:[si]
020C:486A  26: 8B 5C 02				mov	bx,es:[si+2]
020C:486E  26: 8B 4C 04				mov	cx,es:[si+4]
020C:4872			loc_607:
020C:4872  26: F6 45 0B 01			test	byte ptr es:[di+0Bh],1
020C:4877  74 0B				jz	loc_610			; Jump if zero
020C:4879			loc_608:
020C:4879  83 C7 15				add	di,15h
020C:487C			loc_609:
020C:487C  26: 83 3D FF				cmp	word ptr es:[di],0FFFFh
020C:4880  75 F0				jne	loc_607			; Jump if not equal
020C:4882  EB DE				jmp	short loc_605		; (4862)
020C:4884			loc_610:
020C:4884  26: 3B 05				cmp	ax,es:[di]
020C:4887  75 F0				jne	loc_608			; Jump if not equal
020C:4889  26: 3B 4D 02				cmp	cx,es:[di+2]
020C:488D  72 EA				jb	loc_608			; Jump if below
020C:488F  26: 3B 5D 04				cmp	bx,es:[di+4]
020C:4893  77 E4				ja	loc_608			; Jump if above
020C:4895  26: 3B 5D 02				cmp	bx,es:[di+2]
020C:4899  76 15				jbe	loc_611			; Jump if below or =
020C:489B  26: 3B 4D 04				cmp	cx,es:[di+4]
020C:489F  72 47				jb	loc_615			; Jump if below
020C:48A1  8B D3				mov	dx,bx
020C:48A3  4A					dec	dx
020C:48A4  26: 3B 55 02				cmp	dx,es:[di+2]
020C:48A8  74 1B				je	loc_613			; Jump if equal
020C:48AA  26: 89 55 04				mov	es:[di+4],dx
020C:48AE  EB C9				jmp	short loc_608		; (4879)
020C:48B0			loc_611:
020C:48B0  26: 3B 4D 04				cmp	cx,es:[di+4]
020C:48B4  73 0F				jae	loc_613			; Jump if above or =
020C:48B6			loc_612:
020C:48B6  8B D1				mov	dx,cx
020C:48B8  42					inc	dx
020C:48B9  26: 3B 55 04				cmp	dx,es:[di+4]
020C:48BD  74 06				je	loc_613			; Jump if equal
020C:48BF  26: 89 55 02				mov	es:[di+2],dx
020C:48C3  EB B4				jmp	short loc_608		; (4879)
020C:48C5			loc_613:
020C:48C5  06					push	es
020C:48C6  1F					pop	ds
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 161

020C:48C7  56					push	si
020C:48C8  57					push	di
020C:48C9  8B F7				mov	si,di
020C:48CB  83 C6 15				add	si,15h
020C:48CE  B9 291D				mov	cx,291Dh
020C:48D1  2B CE				sub	cx,si
020C:48D3  FC					cld				; Clear direction
020C:48D4  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:48D6  5F					pop	di
020C:48D7  5E					pop	si
020C:48D8  E8 28EA				call	$+28EDh
020C:48DB  3B F7				cmp	si,di
020C:48DD  72 03				jb	loc_614			; Jump if below
020C:48DF  83 EE 15				sub	si,15h
020C:48E2			loc_614:
020C:48E2  FE 0E 3040				dec	data_240		; (020C:3040=0B3h)
020C:48E6  EB 94				jmp	short loc_609		; (487C)
020C:48E8			loc_615:
020C:48E8  8B D3				mov	dx,bx
020C:48EA  4A					dec	dx
020C:48EB  26: 3B 55 02				cmp	dx,es:[di+2]
020C:48EF  74 C5				je	loc_612			; Jump if equal
020C:48F1  26: 87 55 04				xchg	es:[di+4],dx
020C:48F5  80 3E 3040 FA			cmp	data_240,0FAh		; (020C:3040=0B3h)
020C:48FA  73 6D				jae	loc_617			; Jump if above or =
020C:48FC  56					push	si
020C:48FD  53					push	bx
020C:48FE  50					push	ax
020C:48FF  B8 0015				mov	ax,15h
020C:4902  8A 1E 3040				mov	bl,data_240		; (020C:3040=0B3h)
020C:4906  F6 E3				mul	bl			; ax = reg * al
020C:4908  05 0000				add	ax,0
020C:490B  8B F0				mov	si,ax
020C:490D  8B D9				mov	bx,cx
020C:490F  43					inc	bx
020C:4910  3B DA				cmp	bx,dx
020C:4912  74 53				je	loc_616			; Jump if equal
020C:4914  26: 89 5C 02				mov	es:[si+2],bx
020C:4918  58					pop	ax
020C:4919  26: 89 04				mov	es:[si],ax
020C:491C  26: 89 54 04				mov	es:[si+4],dx
020C:4920  26: 8B 55 06				mov	dx,es:[di+6]
020C:4924  26: 89 54 06				mov	es:[si+6],dx
020C:4928  26: 8B 55 08				mov	dx,es:[di+8]
020C:492C  26: 89 54 08				mov	es:[si+8],dx
020C:4930  26: 8B 55 0A				mov	dx,es:[di+0Ah]
020C:4934  26: 89 54 0A				mov	es:[si+0Ah],dx
020C:4938  26: 8B 55 0C				mov	dx,es:[di+0Ch]
020C:493C  26: 89 54 0C				mov	es:[si+0Ch],dx
020C:4940  26: 8A 55 0E				mov	dl,es:[di+0Eh]
020C:4944  80 E2 FE				and	dl,0FEh
020C:4947  26: 88 54 0E				mov	es:[si+0Eh],dl
020C:494B  26: 8B 55 0F				mov	dx,es:[di+0Fh]
020C:494F  26: 89 54 0F				mov	es:[si+0Fh],dx
020C:4953  26: 8B 55 11				mov	dx,es:[di+11h]
020C:4957  26: 89 54 11				mov	es:[si+11h],dx
020C:495B  26: 8B 55 13				mov	dx,es:[di+13h]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 162

020C:495F  26: 89 54 13				mov	es:[si+13h],dx
020C:4963  FE 06 3040				inc	data_240		; (020C:3040=0B3h)
020C:4967			loc_616:
020C:4967  5B					pop	bx
020C:4968  5E					pop	si
020C:4969			loc_617:
020C:4969  E9 FF0D				jmp	loc_608			; (4879)
020C:496C			loc_618:
020C:496C  E8 DF81				call	sub_36			; (28F0)
020C:496F  E8 2862				call	$+2865h
020C:4972  8A 16 3040				mov	dl,data_240		; (020C:3040=0B3h)
020C:4976  80 FA 01				cmp	dl,1
020C:4979  77 03				ja	loc_620			; Jump if above
020C:497B			loc_619:
020C:497B  E9 00A9				jmp	loc_626			; (4A27)
020C:497E			loc_620:
020C:497E  BF 0000				mov	di,0
020C:4981  32 F6				xor	dh,dh			; Zero register
020C:4983			loc_621:
020C:4983  26: F6 45 0B 01			test	byte ptr es:[di+0Bh],1
020C:4988  75 F1				jnz	loc_619			; Jump if not zero
020C:498A  26: 80 7D 0A 03			cmp	byte ptr es:[di+0Ah],3
020C:498F  74 63				je	loc_623			; Jump if equal
020C:4991  26: 8B 4D 04				mov	cx,es:[di+4]
020C:4995  26: 2B 4D 02				sub	cx,es:[di+2]
020C:4999  83 F9 64				cmp	cx,64h
020C:499C  72 56				jb	loc_623			; Jump if below
020C:499E  E8 2824				call	$+2827h
020C:49A1  26: 8B 05				mov	ax,es:[di]
020C:49A4  3B 06 304C				cmp	ax,data_243		; (020C:304C=0)
020C:49A8  74 4A				je	loc_623			; Jump if equal
020C:49AA  8E D8				mov	ds,ax
020C:49AC  26: 8B 75 02				mov	si,es:[di+2]
020C:49B0  56					push	si
020C:49B1  2E: FF 36 38A3			push	word ptr cs:[38A3h]	; (020C:38A3=0E903h)
020C:49B6  06					push	es
020C:49B7  9A 1516:3514		;*		call	far ptr sub_68		;*(1516:3514)
020C:49B7  9A					db	9Ah
020C:49B8  3514 1516				dw	3514h, 1516h
020C:49BC  2E: 89 16 0092			mov	cs:data_49,dx		; (020C:0092=4D00h)
020C:49C1  9C					pushf				; Push flags
020C:49C2  2E: 8F 06 0096			pop	cs:data_50		; (020C:0096=0)
020C:49C7  5A					pop	dx
020C:49C8  8E C2				mov	es,dx
020C:49CA  2E: 3B 16 38A1			cmp	dx,word ptr cs:[38A1h]	; (020C:38A1=765Ah)
020C:49CF  5A					pop	dx
020C:49D0  75 0A				jnz	loc_622			; Jump if not zero
020C:49D2  2E: 3B 16 38A3			cmp	dx,word ptr cs:[38A3h]	; (020C:38A3=0E903h)
020C:49D7  74 03				je	loc_622			; Jump if equal
020C:49D9  E8 2B60				call	$+2B63h
020C:49DC			loc_622:
020C:49DC  2E: FF 36 0096			push	cs:data_50		; (020C:0096=0)
020C:49E1  9D					popf				; Pop flags
020C:49E2  2E: 8B 16 0092			mov	dx,cs:data_49		; (020C:0092=4D00h)
020C:49E7  5E					pop	si
020C:49E8  72 0A				jc	loc_623			; Jump if carry Set
020C:49EA  FE C6				inc	dh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 163

020C:49EC  26: 80 4D 0E 80			or	byte ptr es:[di+0Eh],80h
020C:49F1  26: 8B 1D				mov	bx,es:[di]
020C:49F4			loc_623:
020C:49F4  83 C7 15				add	di,15h
020C:49F7  FE CA				dec	dl
020C:49F9  75 88				jnz	loc_621			; Jump if not zero
020C:49FB  E8 27C7				call	$+27CAh
020C:49FE  80 FE 01				cmp	dh,1
020C:4A01  75 24				jne	loc_626			; Jump if not equal
020C:4A03  8A 16 3040				mov	dl,byte ptr ds:[3040h]	; (1828:3040=0DAh)
020C:4A07  BF 0000				mov	di,0
020C:4A0A			loc_624:
020C:4A0A  26: 80 7D 0A 03			cmp	byte ptr es:[di+0Ah],3
020C:4A0F  74 0F				je	loc_625			; Jump if equal
020C:4A11  26: F6 45 0E 80			test	byte ptr es:[di+0Eh],80h
020C:4A16  75 08				jnz	loc_625			; Jump if not zero
020C:4A18  26: 89 5D 06				mov	es:[di+6],bx
020C:4A1C  26: 89 5D 08				mov	es:[di+8],bx
020C:4A20			loc_625:
020C:4A20  83 C7 15				add	di,15h
020C:4A23  FE CA				dec	dl
020C:4A25  75 E3				jnz	loc_624			; Jump if not zero
020C:4A27			loc_626:
020C:4A27  E8 279B				call	$+279Eh
020C:4A2A  F6 06 35D3 40			test	byte ptr ds:[35D3h],40h	; (1828:35D3=26h) '@'
020C:4A2F  74 25				jz	loc_628			; Jump if zero
020C:4A31  9A 1516:26F0		;*		call	far ptr sub_59		;*(1516:26F0)
020C:4A31  9A					db	9Ah
020C:4A32  26F0 1516				dw	26F0h, 1516h
020C:4A36  C6 06 35E6 00			mov	byte ptr ds:[35E6h],0	; (1828:35E6=0E8h)
020C:4A3B  E8 8D92				call	$-726Bh
020C:4A3E  8B 1E 4150				mov	bx,word ptr ds:[4150h]	; (1828:4150=0CB8Bh)
020C:4A42  E8 59D7				call	$+59DAh
020C:4A45  80 3E 2B3C 01			cmp	byte ptr ds:[2B3Ch],1	; (1828:2B3C=13h)
020C:4A4A  75 07				jne	loc_627			; Jump if not equal
020C:4A4C  8B 1E 4150				mov	bx,word ptr ds:[4150h]	; (1828:4150=0CB8Bh)
020C:4A50  E8 59C9				call	$+59CCh
020C:4A53			loc_627:
020C:4A53  E9 1F9A				jmp	$+1F9Dh
020C:4A56			loc_628:
020C:4A56  9A 1516:4F4C		;*		call	far ptr sub_72		;*(1516:4F4C)
020C:4A56  9A					db	9Ah
020C:4A57  4F4C 1516				dw	4F4Ch, 1516h
020C:4A5B  B2 00				mov	dl,0
020C:4A5D			loc_629:
020C:4A5D  E8 2774				call	$+2777h
020C:4A60  B8 0015				mov	ax,15h
020C:4A63  F6 E2				mul	dl			; ax = reg * al
020C:4A65  05 0000				add	ax,0
020C:4A68  8B D8				mov	bx,ax
020C:4A6A  26: 8B 47 0A				mov	ax,es:[bx+0Ah]
020C:4A6E  24 03				and	al,3
020C:4A70  3C 02				cmp	al,2
020C:4A72  77 1F				ja	loc_631			; Jump if above
020C:4A74  26: 8B 07				mov	ax,es:[bx]
020C:4A77  26: 8B 7F 02				mov	di,es:[bx+2]
020C:4A7B  26: 8B 4F 04				mov	cx,es:[bx+4]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 164

020C:4A7F  8E C0				mov	es,ax
020C:4A81  2B CF				sub	cx,di
020C:4A83  81 F9 03E8				cmp	cx,3E8h
020C:4A87  72 03				jb	loc_630			; Jump if below
020C:4A89  B9 03E8				mov	cx,3E8h
020C:4A8C			loc_630:
020C:4A8C  9A 1516:4C30		;*		call	far ptr sub_71		;*(1516:4C30)
020C:4A8C  9A					db	9Ah
020C:4A8D  4C30 1516				dw	4C30h, 1516h
020C:4A91  72 08				jc	loc_632			; Jump if carry Set
020C:4A93			loc_631:
020C:4A93  FE C2				inc	dl
020C:4A95  3A 16 3040				cmp	dl,byte ptr ds:[3040h]	; (1828:3040=0DAh)
020C:4A99  76 C2				jbe	loc_629			; Jump if below or =
020C:4A9B			loc_632:
020C:4A9B  E8 2736				call	$+2739h
020C:4A9E  26: A1 0000				mov	ax,word ptr es:[0]	; (1828:0000=3CC5h)
020C:4AA2  A3 3050				mov	word ptr ds:[3050h],ax	; (1828:3050=725h)
020C:4AA5  E9 A1D8				jmp	$-5E25h
							                        ;* No entry point to code
020C:4AA8  80 3E 35E6 00			cmp	byte ptr ds:[35E6h],0	; (1828:35E6=0E8h)
020C:4AAD  74 5C				je	loc_633			; Jump if equal
020C:4AAF  E8 272B				call	$+272Eh
020C:4AB2  BF 0378				mov	di,378h
020C:4AB5  B9 0021				mov	cx,21h
020C:4AB8  B0 20				mov	al,20h			; ' '
020C:4ABA  FC					cld				; Clear direction
020C:4ABB  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:4ABD  E8 0D20				call	$+0D23h
020C:4AC0  C6 47 52 00				mov	byte ptr [bx+52h],0
020C:4AC4  C6 47 69 0F				mov	byte ptr [bx+69h],0Fh
020C:4AC8  C6 47 33 0F				mov	byte ptr [bx+33h],0Fh
020C:4ACC  C6 47 66 0F				mov	byte ptr [bx+66h],0Fh
020C:4AD0  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020C:4AD4  E8 0899				call	$+89Ch
020C:4AD7  B4 02				mov	ah,2
020C:4AD9  32 FF				xor	bh,bh			; Zero register
020C:4ADB  BA 0912				mov	dx,912h
020C:4ADE  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:4ADE  9A					db	9Ah
020C:4ADF  2BA8 1516				dw	2BA8h, 1516h
020C:4AE3  E8 111A				call	$+111Dh
020C:4AE6  BE 0378				mov	si,378h
020C:4AE9  B1 20				mov	cl,20h			; ' '
020C:4AEB  B3 01				mov	bl,1
020C:4AED  9A 1516:0620		;*		call	far ptr sub_51		;*(1516:0620)
020C:4AED  9A					db	9Ah
020C:4AEE  0620 1516				dw	620h, 1516h
020C:4AF2  E8 0D13				call	$+0D16h
020C:4AF5  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020C:4AF9  C6 47 69 07				mov	byte ptr [bx+69h],7
020C:4AFD  C6 47 66 07				mov	byte ptr [bx+66h],7
020C:4B01  C6 47 67 00				mov	byte ptr [bx+67h],0
020C:4B05  E8 10EC				call	$+10EFh
020C:4B08  E8 0989				call	$+98Ch
020C:4B0B			loc_633:
020C:4B0B  E9 EC4D				jmp	loc_393			; (375B)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 165

							                        ;* No entry point to code
020C:4B0E  2E: 80 3E 3E64 00			cmp	byte ptr cs:[3E64h],0	; (020C:3E64=2Eh)
020C:4B14  74 08				je	loc_634			; Jump if equal
020C:4B16  9A 1516:2B10		;*		call	far ptr sub_62		;*(1516:2B10)
020C:4B16  9A					db	9Ah
020C:4B17  2B10 1516				dw	2B10h, 1516h
020C:4B1B  E9 EC3D				jmp	loc_393			; (375B)
020C:4B1E			loc_634:
020C:4B1E  E8 0013				call	sub_42			; (4B34)
020C:4B21  80 3E 31F0 00			cmp	byte ptr ds:[31F0h],0	; (1828:31F0=5Ch)
020C:4B26  74 03				je	loc_635			; Jump if equal
020C:4B28  E8 283D				call	$+2840h
020C:4B2B			loc_635:
020C:4B2B  E8 0CDA				call	$+0CDDh
020C:4B2E  E8 0963				call	$+966h
020C:4B31  E9 EC27				jmp	loc_393			; (375B)

				;ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
				;                              SUBROUTINE
				;ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ

				sub_42		proc	near
020C:4B34  E8 0CA9				call	$+0CACh
020C:4B37  C6 47 53 00				mov	byte ptr [bx+53h],0
020C:4B3B  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020C:4B3F  B4 02				mov	ah,2
020C:4B41  E8 0CF8				call	$+0CFBh
020C:4B44  E8 0829				call	$+82Ch
020C:4B47  B4 02				mov	ah,2
020C:4B49  32 FF				xor	bh,bh			; Zero register
020C:4B4B  BA 171A				mov	dx,171Ah
020C:4B4E  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:4B4E  9A					db	9Ah
020C:4B4F  2BA8 1516				dw	2BA8h, 1516h
020C:4B53  E8 10AA				call	$+10ADh
020C:4B56  B1 28				mov	cl,28h			; '('
020C:4B58  B3 01				mov	bl,1
020C:4B5A  BE 07E0				mov	si,7E0h
020C:4B5D  9A 1516:0620		;*		call	far ptr sub_51		;*(1516:0620)
020C:4B5D  9A					db	9Ah
020C:4B5E  0620 1516				dw	620h, 1516h
020C:4B62  B3 28				mov	bl,28h			; '('
020C:4B64  2A D9				sub	bl,cl
020C:4B66  32 FF				xor	bh,bh			; Zero register
020C:4B68  83 FB 00				cmp	bx,0
020C:4B6B  75 02				jne	loc_636			; Jump if not equal
020C:4B6D  EB 74				jmp	short loc_639		; (4BE3)
020C:4B6F			loc_636:
020C:4B6F  3C 1B				cmp	al,1Bh
020C:4B71  75 02				jne	loc_637			; Jump if not equal
020C:4B73  EB 6E				jmp	short loc_639		; (4BE3)
020C:4B75			loc_637:
020C:4B75  E8 2665				call	$+2668h
020C:4B78  BF 07E0				mov	di,7E0h
020C:4B7B  B0 20				mov	al,20h			; ' '
020C:4B7D  8B CB				mov	cx,bx
020C:4B7F  FC					cld				; Clear direction
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 166

020C:4B80  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020C:4B82  74 5F				jz	loc_639			; Jump if zero
020C:4B84  BF 07E0				mov	di,7E0h
020C:4B87  B0 20				mov	al,20h			; ' '
020C:4B89  9A 1516:2724		;*		call	far ptr sub_60		;*(1516:2724)
020C:4B89  9A					db	9Ah
020C:4B8A  2724 1516				dw	2724h, 1516h
020C:4B8E  9A 1516:27AC		;*		call	far ptr sub_61		;*(1516:27AC)
020C:4B8E  9A					db	9Ah
020C:4B8F  27AC 1516				dw	27ACh, 1516h
020C:4B93  A2 327E				mov	byte ptr ds:[327Eh],al	; (1828:327E=33h)
020C:4B96  3C 01				cmp	al,1
020C:4B98  77 1C				ja	loc_638			; Jump if above
020C:4B9A  B4 10				mov	ah,10h
020C:4B9C  E8 0C9D				call	$+0CA0h
020C:4B9F  8B 1E 1326				mov	bx,word ptr ds:[1326h]	; (1828:1326=4AEBh)
020C:4BA3  A0 1208				mov	al,byte ptr ds:[1208h]	; (1828:1208=83h)
020C:4BA6  88 47 52				mov	[bx+52h],al
020C:4BA9  E8 1048				call	$+104Bh
020C:4BAC  E8 08E5				call	$+8E8h
020C:4BAF  9A 1516:0760		;*		call	far ptr sub_52		;*(1516:0760)
020C:4BAF  9A					db	9Ah
020C:4BB0  0760 1516				dw	760h, 1516h
020C:4BB4  EB 2D				jmp	short loc_639		; (4BE3)
020C:4BB6			loc_638:
020C:4BB6  BF 31F0				mov	di,31F0h
020C:4BB9  B9 0040				mov	cx,40h
020C:4BBC  B0 00				mov	al,0
020C:4BBE  FC					cld				; Clear direction
020C:4BBF  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:4BC1  BF 0649				mov	di,649h
020C:4BC4  B9 000C				mov	cx,0Ch
020C:4BC7  B0 20				mov	al,20h			; ' '
020C:4BC9  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:4BCB  BE 07E0				mov	si,7E0h
020C:4BCE  BF 31F0				mov	di,31F0h
020C:4BD1  8B CB				mov	cx,bx
020C:4BD3  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:4BD5  4F					dec	di
020C:4BD6  9A 1516:7270		;*		call	far ptr sub_73		;*(1516:7270)
020C:4BD6  9A					db	9Ah
020C:4BD7  7270 1516				dw	7270h, 1516h
020C:4BDB  E8 4976				call	$+4979h
020C:4BDE  73 03				jnc	loc_639			; Jump if carry=0
020C:4BE0  E9 20A0				jmp	$+20A3h
020C:4BE3			loc_639:
020C:4BE3  8A 26 327D				mov	ah,byte ptr ds:[327Dh]	; (1828:327D=8Dh)
020C:4BE7  E8 0C52				call	$+0C55h
020C:4BEA  E8 0C1B				call	$+0C1Eh
020C:4BED  C6 47 52 0F				mov	byte ptr [bx+52h],0Fh
020C:4BF1  C6 47 53 07				mov	byte ptr [bx+53h],7
020C:4BF5  C6 47 67 00				mov	byte ptr [bx+67h],0
020C:4BF9  E8 0FF8				call	$+0FFBh
020C:4BFC  E8 0895				call	$+898h
020C:4BFF  C3					retn
				sub_42		endp

           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 167

							                        ;* No entry point to code
020C:4C00  80 3E 15CE 01			cmp	data_148,1		; (020C:15CE=0)
020C:4C05  75 07				jne	loc_640			; Jump if not equal
020C:4C07  80 36 15D0 01			xor	data_149,1		; (020C:15D0=0)
020C:4C0C  EB 09				jmp	short loc_641		; (4C17)
020C:4C0E			loc_640:
020C:4C0E  FE 06 15D0				inc	data_149		; (020C:15D0=0)
020C:4C12  80 26 15D0 03			and	data_149,3		; (020C:15D0=0)
020C:4C17			loc_641:
020C:4C17  E8 10CA				call	$+10CDh
020C:4C1A  E8 F894				call	sub_41			; (44B1)
020C:4C1D  E8 0874				call	$+877h
020C:4C20  E9 EB38				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:4C23  F6 06 30A0 C0			test	byte ptr data_245+2Eh,0C0h	; (020C:30A0='P')
020C:4C28  75 36				jnz	loc_645			; Jump if not zero
020C:4C2A  8A 36 30B0				mov	dh,byte ptr data_245+3Eh	; (020C:30B0='E')
020C:4C2E  F6 C6 1F				test	dh,1Fh
020C:4C31  74 04				jz	loc_642			; Jump if zero
020C:4C33  B6 00				mov	dh,0
020C:4C35  EB 38				jmp	short loc_647		; (4C6F)
020C:4C37			loc_642:
020C:4C37  F6 06 30B2 80			test	byte ptr data_245+40h,80h	; (020C:30B2='1')
020C:4C3C  75 07				jnz	loc_643			; Jump if not zero
020C:4C3E  80 0E 30B2 80			or	byte ptr data_245+40h,80h	; (020C:30B2='1')
020C:4C43  EB 2E				jmp	short loc_648		; (4C73)
020C:4C45			loc_643:
020C:4C45  80 26 30B2 7F			and	byte ptr data_245+40h,7Fh	; (020C:30B2='1')
020C:4C4A  B6 01				mov	dh,1
020C:4C4C  F6 06 30A0 10			test	byte ptr data_245+2Eh,10h	; (020C:30A0='P')
020C:4C51  74 02				jz	loc_644			; Jump if zero
020C:4C53  B6 02				mov	dh,2
020C:4C55			loc_644:
020C:4C55  F6 06 30A0 20			test	byte ptr data_245+2Eh,20h	; (020C:30A0='P') ' '
020C:4C5A  74 13				jz	loc_647			; Jump if zero
020C:4C5C  B6 04				mov	dh,4
020C:4C5E  EB 0F				jmp	short loc_647		; (4C6F)
020C:4C60			loc_645:
020C:4C60  F6 06 30A0 40			test	byte ptr data_245+2Eh,40h	; (020C:30A0='P') '@'
020C:4C65  74 04				jz	loc_646			; Jump if zero
020C:4C67  B6 0C				mov	dh,0Ch
020C:4C69  EB 04				jmp	short loc_647		; (4C6F)
020C:4C6B			loc_646:
020C:4C6B  B6 14				mov	dh,14h
020C:4C6D  EB 00				jmp	short loc_647		; (4C6F)
020C:4C6F			loc_647:
020C:4C6F  88 36 30B0				mov	byte ptr data_245+3Eh,dh	; (020C:30B0='E')
020C:4C73			loc_648:
020C:4C73  B6 01				mov	dh,1
020C:4C75  E8 0A60				call	$+0A63h
020C:4C78  E9 EAE0				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:4C7B  80 3E 35E6 01			cmp	data_281,1		; (020C:35E6=72h)
020C:4C80  75 1C				jne	loc_649			; Jump if not equal
020C:4C82  FE 06 35E3				inc	data_279		; (020C:35E3=0E8h)
020C:4C86  80 26 35E3 01			and	data_279,1		; (020C:35E3=0E8h)
020C:4C8B  8B 1E 1326				mov	bx,data_142		; (020C:1326=0)
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 168

020C:4C8F  C6 47 4A 07				mov	byte ptr [bx+4Ah],7
020C:4C93  F6 06 35E3 01			test	data_279,1		; (020C:35E3=0E8h)
020C:4C98  74 04				jz	loc_649			; Jump if zero
020C:4C9A  C6 47 4A 00				mov	byte ptr [bx+4Ah],0
020C:4C9E			loc_649:
020C:4C9E  E8 07F3				call	$+7F6h
020C:4CA1  E9 EAB7				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:4CA4  E8 0B39				call	$+0B3Ch
020C:4CA7  C6 47 68 00				mov	byte ptr [bx+68h],0
020C:4CAB  C6 47 67 0F				mov	byte ptr [bx+67h],0Fh
020C:4CAF  B4 03				mov	ah,3
020C:4CB1  E8 0B88				call	$+0B8Bh
020C:4CB4  E8 06B9				call	$+6BCh
020C:4CB7  B4 02				mov	ah,2
020C:4CB9  32 FF				xor	bh,bh			; Zero register
020C:4CBB  BA 171A				mov	dx,171Ah
020C:4CBE  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:4CBE  9A					db	9Ah
020C:4CBF  2BA8 1516				dw	2BA8h, 1516h
020C:4CC3  E8 0F3A				call	$+0F3Dh
020C:4CC6  B1 28				mov	cl,28h			; '('
020C:4CC8  B3 03				mov	bl,3
020C:4CCA  BE 07E0				mov	si,7E0h
020C:4CCD  9A 1516:0620		;*		call	far ptr sub_51		;*(1516:0620)
020C:4CCD  9A					db	9Ah
020C:4CCE  0620 1516				dw	620h, 1516h
020C:4CD2  B3 28				mov	bl,28h			; '('
020C:4CD4  2A D9				sub	bl,cl
020C:4CD6  32 FF				xor	bh,bh			; Zero register
020C:4CD8  83 FB 00				cmp	bx,0
020C:4CDB  74 13				je	loc_650			; Jump if equal
020C:4CDD  3C 1B				cmp	al,1Bh
020C:4CDF  74 0F				je	loc_650			; Jump if equal
020C:4CE1  E8 24F9				call	$+24FCh
020C:4CE4  BF 07E0				mov	di,7E0h
020C:4CE7  B0 20				mov	al,20h			; ' '
020C:4CE9  8B CB				mov	cx,bx
020C:4CEB  FC					cld				; Clear direction
020C:4CEC  F2/ AE				repne	scasb			; Rep zf=0+cx >0 Scan es:[di] for al
020C:4CEE  75 03				jnz	loc_651			; Jump if not zero
020C:4CF0			loc_650:
020C:4CF0  E9 0086				jmp	loc_655			; (4D79)
020C:4CF3			loc_651:
020C:4CF3  FC					cld				; Clear direction
020C:4CF4  BF 3233				mov	di,3233h
020C:4CF7  B9 0029				mov	cx,29h
020C:4CFA  B0 00				mov	al,0
020C:4CFC  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:4CFE  BF 036A				mov	di,36Ah
020C:4D01  B9 000C				mov	cx,0Ch
020C:4D04  B0 20				mov	al,20h			; ' '
020C:4D06  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:4D08  BE 07E0				mov	si,7E0h
020C:4D0B  BF 3233				mov	di,3233h
020C:4D0E  8B CB				mov	cx,bx
020C:4D10  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 169

020C:4D12  9A 1516:26A0		;*		call	far ptr sub_58		;*(1516:26A0)
020C:4D12  9A					db	9Ah
020C:4D13  26A0 1516				dw	26A0h, 1516h
020C:4D17  83 C3 04				add	bx,4
020C:4D1A  47					inc	di
020C:4D1B  8B CB				mov	cx,bx
020C:4D1D			loc_652:
020C:4D1D  8A 05				mov	al,[di]
020C:4D1F  3C 3A				cmp	al,3Ah			; ':'
020C:4D21  74 0D				je	loc_653			; Jump if equal
020C:4D23  3C 5C				cmp	al,5Ch			; '\'
020C:4D25  74 09				je	loc_653			; Jump if equal
020C:4D27  83 F9 01				cmp	cx,1
020C:4D2A  76 05				jbe	loc_654			; Jump if below or =
020C:4D2C  49					dec	cx
020C:4D2D  4F					dec	di
020C:4D2E  EB ED				jmp	short loc_652		; (4D1D)
020C:4D30			loc_653:
020C:4D30  47					inc	di
020C:4D31			loc_654:
020C:4D31  2B D9				sub	bx,cx
020C:4D33  8B CB				mov	cx,bx
020C:4D35  41					inc	cx
020C:4D36  83 F9 0C				cmp	cx,0Ch
020C:4D39  77 3E				ja	loc_655			; Jump if above
020C:4D3B  8B F7				mov	si,di
020C:4D3D  BF 036A				mov	di,36Ah
020C:4D40  FC					cld				; Clear direction
020C:4D41  F3/ A4				rep	movsb			; Rep when cx >0 Mov [si] to es:[di]
020C:4D43  80 3E 3234 3A			cmp	byte ptr data_253+0B4h,3Ah	; (020C:3234='D') ':'
020C:4D48  75 2F				jne	loc_655			; Jump if not equal
020C:4D4A  A0 3233				mov	al,byte ptr data_253+0B3h	; (020C:3233='M')
020C:4D4D  24 5F				and	al,5Fh			; '_'
020C:4D4F  3C 41				cmp	al,41h			; 'A'
020C:4D51  72 26				jb	loc_655			; Jump if below
020C:4D53  3C 5A				cmp	al,5Ah			; 'Z'
020C:4D55  77 22				ja	loc_655			; Jump if above
020C:4D57  8A D0				mov	dl,al
020C:4D59  80 EA 41				sub	dl,41h			; 'A'
020C:4D5C  8A DA				mov	bl,dl
020C:4D5E  B4 0E				mov	ah,0Eh
020C:4D60  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020C:4D62  B4 19				mov	ah,19h
020C:4D64  CD 21				int	21h			; DOS Services  ah=function 19h
										;  get default drive al  (0=a:)
020C:4D66  A2 30CE				mov	byte ptr data_245+5Ch,al	; (020C:30CE=' ')
020C:4D69  04 61				add	al,61h			; 'a'
020C:4D6B  A2 066E				mov	byte ptr ds:[66Eh],al	; (020C:066E=0Eh)
020C:4D6E  E8 08AF				call	$+8B2h
020C:4D71  8A 16 30CD				mov	dl,byte ptr data_245+5Bh	; (020C:30CD='E')
020C:4D75  B4 0E				mov	ah,0Eh
020C:4D77  CD 21				int	21h			; DOS Services  ah=function 0Eh
										;  set default drive dl  (0=a:)
020C:4D79			loc_655:
020C:4D79  E8 0A8C				call	$+0A8Fh
020C:4D7C  C6 47 68 07				mov	byte ptr [bx+68h],7
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 170

020C:4D80  C6 47 67 00				mov	byte ptr [bx+67h],0
020C:4D84  8A 26 327D				mov	ah,byte ptr data_253+0FDh	; (020C:327D='I')
020C:4D88  E8 0AB1				call	$+0AB4h
020C:4D8B  E8 0E66				call	$+0E69h
020C:4D8E  E8 0703				call	$+706h
020C:4D91  E9 E9C7				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:4D94  A0 2B3B				mov	al,data_217		; (020C:2B3B=0A0h)
020C:4D97  04 02				add	al,2
020C:4D99  3C 14				cmp	al,14h
020C:4D9B  72 02				jb	loc_656			; Jump if below
020C:4D9D  B0 04				mov	al,4
020C:4D9F			loc_656:
020C:4D9F  E8 121A				call	$+121Dh
020C:4DA2  E9 E9B6				jmp	loc_393			; (375B)
020C:4DA5			loc_657:
020C:4DA5  B4 11				mov	ah,11h
020C:4DA7  E9 1FCE				jmp	$+1FD1h
							                        ;* No entry point to code
020C:4DAA  A0 16AB				mov	al,byte ptr data_153	; (020C:16AB='AAAAAAAAAAAAAAA')
020C:4DAD  BB 16AD				mov	bx,16ADh
020C:4DB0  D7					xlat				; al=[al+[bx]] table
020C:4DB1  A2 16AB				mov	byte ptr data_153,al	; (020C:16AB='AAAAAAAAAAAAAAA')
020C:4DB4  E8 0FB9				call	$+0FBCh
020C:4DB7  E8 06DA				call	$+6DDh
020C:4DBA  E9 E99E				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:4DBD  80 3E 35E6 00			cmp	data_281,0		; (020C:35E6=72h)
020C:4DC2  74 20				je	loc_661			; Jump if equal
020C:4DC4  A0 35E4				mov	al,data_280		; (020C:35E4=7Eh)
020C:4DC7  A8 01				test	al,1
020C:4DC9  74 0C				jz	loc_659			; Jump if zero
020C:4DCB  A8 06				test	al,6
020C:4DCD  74 04				jz	loc_658			; Jump if zero
020C:4DCF  B0 09				mov	al,9
020C:4DD1  EB 06				jmp	short loc_660		; (4DD9)
020C:4DD3			loc_658:
020C:4DD3  B0 02				mov	al,2
020C:4DD5  EB 02				jmp	short loc_660		; (4DD9)
020C:4DD7			loc_659:
020C:4DD7  B0 03				mov	al,3
020C:4DD9			loc_660:
020C:4DD9  A2 35E4				mov	data_280,al		; (020C:35E4=7Eh)
020C:4DDC  9A 1516:09D8		;*		call	far ptr sub_56		;*(1516:09D8)
020C:4DDC  9A					db	9Ah
020C:4DDD  09D8 1516				dw	9D8h, 1516h
020C:4DE1  E8 06B0				call	$+6B3h
020C:4DE4			loc_661:
020C:4DE4  E9 E974				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:4DE7  BF 13E8				mov	di,13E8h
020C:4DEA  A0 13E4				mov	al,data_144		; (020C:13E4=0)
020C:4DED  32 C9				xor	cl,cl			; Zero register
020C:4DEF			loc_662:
020C:4DEF  3A 05				cmp	al,[di]
020C:4DF1  74 0C				je	loc_663			; Jump if equal
020C:4DF3  FE C1				inc	cl
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 171

020C:4DF5  80 F9 0D				cmp	cl,0Dh
020C:4DF8  73 05				jae	loc_663			; Jump if above or =
020C:4DFA  83 C7 10				add	di,10h
020C:4DFD  EB F0				jmp	short loc_662		; (4DEF)
020C:4DFF			loc_663:
020C:4DFF  80 F9 0C				cmp	cl,0Ch
020C:4E02  72 03				jb	loc_664			; Jump if below
020C:4E04  BF 13D8				mov	di,13D8h
020C:4E07			loc_664:
020C:4E07  83 C7 10				add	di,10h
020C:4E0A  8A 45 0D				mov	al,[di+0Dh]
020C:4E0D  A2 13E5				mov	data_145,al		; (020C:13E5=0)
020C:4E10  8A 05				mov	al,[di]
020C:4E12  A2 13E4				mov	data_144,al		; (020C:13E4=0)
020C:4E15  8B 45 0B				mov	ax,[di+0Bh]
020C:4E18  A3 13E6				mov	data_146,ax		; (020C:13E6=0)
020C:4E1B  9A 1516:2B34		;*		call	far ptr sub_63		;*(1516:2B34)
020C:4E1B  9A					db	9Ah
020C:4E1C  2B34 1516				dw	2B34h, 1516h
020C:4E20  E8 0671				call	$+674h
020C:4E23  E9 E935				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:4E26  01 02				add	[bp+si],ax
020C:4E28  04 10				add	al,10h
020C:4E2A  18 20				sbb	[bx+si],ah
020C:4E2C  28 40 48				sub	[bx+si+48h],al
020C:4E2F  88 00				mov	[bx+si],al
020C:4E31  8A 36 30A0				mov	dh,byte ptr data_245+2Eh	; (020C:30A0='P')
020C:4E35  B8 0000				mov	ax,0
020C:4E38  56					push	si
020C:4E39  BE 1926				mov	si,1926h
020C:4E3C			loc_665:
020C:4E3C  2E: 3A 34				cmp	dh,cs:[si]
020C:4E3F  74 11				je	loc_667			; Jump if equal
020C:4E41  46					inc	si
020C:4E42  2E: 80 3C 00				cmp	byte ptr cs:[si],0
020C:4E46  74 02				je	loc_666			; Jump if equal
020C:4E48  EB F2				jmp	short loc_665		; (4E3C)
020C:4E4A			loc_666:
020C:4E4A  B6 01				mov	dh,1
020C:4E4C  C6 06 30B0 00			mov	byte ptr data_245+3Eh,0	; (020C:30B0='E')
020C:4E51  4E					dec	si
020C:4E52			loc_667:
020C:4E52  46					inc	si
020C:4E53  2E: 80 3C 00				cmp	byte ptr cs:[si],0
020C:4E57  75 08				jne	loc_668			; Jump if not equal
020C:4E59  BE 1926				mov	si,1926h
020C:4E5C  C6 06 30B0 00			mov	byte ptr data_245+3Eh,0	; (020C:30B0='E')
020C:4E61			loc_668:
020C:4E61  2E: 8A 34				mov	dh,cs:[si]
020C:4E64  5E					pop	si
020C:4E65  88 36 30A0				mov	byte ptr data_245+2Eh,dh	; (020C:30A0='P')
020C:4E69  F6 06 30B0 1F			test	byte ptr data_245+3Eh,1Fh	; (020C:30B0='E')
020C:4E6E  74 1D				jz	loc_669			; Jump if zero
020C:4E70  C6 06 30B0 01			mov	byte ptr data_245+3Eh,1	; (020C:30B0='E')
020C:4E75  C6F6			data_303	dw	0C6F6h
020C:4E77  10 74 07				adc	[si+7],dh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 172

020C:4E7A  C6 06 30B0 02			mov	byte ptr data_245+3Eh,2	; (020C:30B0='E')
020C:4E7F  EB			data_304	db	0EBh
020C:4E80  0C F6				or	al,0F6h
020C:4E82  20C6			data_305	dw	20C6h
020C:4E84  74 07				jz	loc_669			; Jump if zero
020C:4E86  C6 06 30B0 04			mov	byte ptr data_245+3Eh,4	; (020C:30B0='E')
020C:4E8B  EB 18				jmp	short loc_670		; (4EA5)
020C:4E8D			loc_669:
020C:4E8D  F6 06 30A0 C0			test	byte ptr data_245+2Eh,0C0h	; (020C:30A0='P')
020C:4E92  74 11				jz	loc_670			; Jump if zero
020C:4E94  C6 06 30B0 0C			mov	byte ptr data_245+3Eh,0Ch	; (020C:30B0='E')
020C:4E99  F6 06 30A0 80			test	byte ptr data_245+2Eh,80h	; (020C:30A0='P')
020C:4E9E  74 05				jz	loc_670			; Jump if zero
020C:4EA0  C6 06 30B0 14			mov	byte ptr data_245+3Eh,14h	; (020C:30B0='E')
020C:4EA5			loc_670:
020C:4EA5  B6 01				mov	dh,1
020C:4EA7  E8 082E				call	$+831h
020C:4EAA  E9 E8AE				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:4EAD  80 3E 35DF 00			cmp	byte ptr ds:[35DFh],0	; (020C:35DF=0)
020C:4EB2  74 07				je	loc_671			; Jump if equal
020C:4EB4  C6 06 35DF 00			mov	byte ptr ds:[35DFh],0	; (020C:35DF=0)
020C:4EB9  EB 05				jmp	short loc_672		; (4EC0)
020C:4EBB			loc_671:
020C:4EBB  C6 06 35DF 60			mov	byte ptr ds:[35DFh],60h	; (020C:35DF=0) '`'
020C:4EC0			loc_672:
020C:4EC0  E8 F5EE				call	sub_41			; (44B1)
020C:4EC3  E8 05CE				call	$+5D1h
020C:4EC6  E9 E892				jmp	loc_393			; (375B)
							                        ;* No entry point to code
020C:4EC9  80 3E 35E6 00			cmp	data_281,0		; (020C:35E6=72h)
020C:4ECE  74 23				je	loc_675			; Jump if equal
020C:4ED0  8A 1E 4E7F				mov	bl,data_304		; (020C:4E7F=0EBh)
020C:4ED4  F6 C3 07				test	bl,7
020C:4ED7  74 07				jz	loc_673			; Jump if zero
020C:4ED9  C6 06 4E7F 00			mov	data_304,0		; (020C:4E7F=0EBh)
020C:4EDE  EB 0D				jmp	short loc_674		; (4EED)
020C:4EE0			loc_673:
020C:4EE0  80 0E 4E7F 07			or	data_304,7		; (020C:4E7F=0EBh)
020C:4EE5  B0 0A				mov	al,0Ah
020C:4EE7  E8 10D2				call	$+10D5h
020C:4EEA  E9 E86E				jmp	loc_393			; (375B)
020C:4EED			loc_674:
020C:4EED  E8 0DA4				call	$+0DA7h
020C:4EF0  E9 E868				jmp	loc_393			; (375B)
020C:4EF3			loc_675:
020C:4EF3  E9 E8C0				jmp	loc_400			; (37B6)
							                        ;* No entry point to code
020C:4EF6  E8 08E7				call	$+8EAh
020C:4EF9  B4 18				mov	ah,18h
020C:4EFB  E8 093E				call	$+941h
020C:4EFE  E8 0593				call	$+596h
020C:4F01  9A 1516:0760		;*		call	far ptr sub_52		;*(1516:0760)
020C:4F01  9A					db	9Ah
020C:4F02  0760 1516				dw	760h, 1516h
020C:4F06  2C 30				sub	al,30h			; '0'
020C:4F08  3C 7F				cmp	al,7Fh
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 173

020C:4F0A  77 3A				ja	loc_677			; Jump if above
020C:4F0C  A2 35D3				mov	byte ptr ds:[35D3h],al	; (020C:35D3=21h)
020C:4F0F  A8 EB				test	al,0EBh
020C:4F11  74 2F				jz	loc_676			; Jump if zero
020C:4F13  80			data_307	db	80h
020C:4F14  3E					db	3Eh
020C:4F15  3E					db	3Eh
020C:4F16  13 01				adc	ax,[bx+di]
020C:4F18  74 28				jz	loc_676			; Jump if zero
020C:4F1A  50					push	ax
020C:4F1B  51					push	cx
020C:4F1C  57					push	di
020C:4F1D  06					push	es
020C:4F1E  1E					push	ds
020C:4F1F  07					pop	es
020C:4F20  B9 001D				mov	cx,1Dh
020C:4F23  B0 20				mov	al,20h			; ' '
020C:4F25  BF 0708				mov	di,708h
020C:4F28  FC					cld				; Clear direction
020C:4F29  F3/ AA				rep	stosb			; Rep when cx >0 Store al to es:[di]
020C:4F2B  BD 071C				mov	bp,71Ch
020C:4F2E  A1 4E82				mov	ax,data_305		; (020C:4E82=20C6h)
020C:4F31  9A 1516:021C		;*		call	far ptr sub_49		;*(1516:021C)
020C:4F31  9A					db	9Ah
020C:4F32  021C 1516				dw	21Ch, 1516h
020C:4F36  8B 3E 1326				mov	di,data_142		; (020C:1326=0)
020C:4F3A  C6 45 5D 07				mov	byte ptr [di+5Dh],7
020C:4F3E  07					pop	es
020C:4F3F  5F					pop	di
020C:4F40  59					pop	cx
020C:4F41  58					pop	ax
020C:4F42			loc_676:
020C:4F42  A8 08				test	al,8
020C:4F44  75 03				jnz	loc_678			; Jump if not zero
020C:4F46			loc_677:
020C:4F46  E9 00B3				jmp	loc_682			; (4FFC)
020C:4F49			loc_678:
020C:4F49  80 26 35D3 F7			and	byte ptr ds:[35D3h],0F7h	; (020C:35D3=21h)
020C:4F4E  B4 23				mov	ah,23h			; '#'
020C:4F50  E8 08E9				call	$+8ECh
020C:4F53  E8 041A				call	$+41Dh
020C:4F56  B4 02				mov	ah,2
020C:4F58  32 FF				xor	bh,bh			; Zero register
020C:4F5A  BA 1710				mov	dx,1710h
020C:4F5D  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:4F5D  9A					db	9Ah
020C:4F5E  2BA8 1516				dw	2BA8h, 1516h
020C:4F62  E8 0C9B				call	$+0C9Eh
020C:4F65  9A 1516:0760		;*		call	far ptr sub_52		;*(1516:0760)
020C:4F65  9A					db	9Ah
020C:4F66  0760 1516				dw	760h, 1516h
020C:4F6A  8A D0				mov	dl,al
020C:4F6C  2C 30				sub	al,30h			; '0'
020C:4F6E  3C 10				cmp	al,10h
020C:4F70  76 03				jbe	loc_679			; Jump if below or =
020C:4F72  E9 0087				jmp	loc_682			; (4FFC)
020C:4F75			loc_679:
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 174

020C:4F75  D0 E0				shl	al,1			; Shift w/zeros fill
020C:4F77  A2 35D4				mov	byte ptr ds:[35D4h],al	; (020C:35D4=13h)
020C:4F7A  9A 1516:07A0		;*		call	far ptr sub_53		;*(1516:07A0)
020C:4F7A  9A					db	9Ah
020C:4F7B  07A0 1516				dw	7A0h, 1516h
020C:4F7F  B4 02				mov	ah,2
020C:4F81  32 FF				xor	bh,bh			; Zero register
020C:4F83  BA 1727				mov	dx,1727h
020C:4F86  9A 1516:2BA8		;*		call	far ptr sub_65		;*(1516:2BA8)
020C:4F86  9A					db	9Ah
020C:4F87  2BA8 1516				dw	2BA8h, 1516h
020C:4F8B  B1 04				mov	cl,4
020C:4F8D  B3 02				mov	bl,2
020C:4F8F  BE 07ED				mov	si,7EDh
020C:4F92  9A 1516:0620		;*		call	far ptr sub_51		;*(1516:0620)
020C:4F92  9A					db	9Ah
020C:4F93  0620 1516				dw	620h, 1516h
020C:4F97  3C 1B				cmp	al,1Bh
020C:4F99  74 61				je	loc_682			; Jump if equal
020C:4F9B  3C 0D				cmp	al,0Dh
020C:4F9D  75 19				jne	loc_681			; Jump if not equal
020C:4F9F  A1 0699				mov	ax,data_98		; (020C:0699=0B050h)
020C:4FA2  A3 07ED				mov	word ptr ds:[7EDh],ax	; (020C:07ED=2400h)
020C:4FA5  A1 069B				mov	ax,data_99		; (020C:069B=47Fh)
020C:4FA8  A3 07EF				mov	data_104,ax		; (020C:07EF=0C75h)
020C:4FAB  B9 0004				mov	cx,4

020C:4FAE			locloop_680:
020C:4FAE  8A 14				mov	dl,[si]
020C:4FB0  46					inc	si
020C:4FB1  9A 1516:07A0		;*		call	far ptr sub_53		;*(1516:07A0)
020C:4FB1  9A					db	9Ah
020C:4FB2  07A0 1516				dw	7A0h, 1516h
020C:4FB6  E2 F6				loop	locloop_680		; Loop if cx > 0

020C:4FB8			loc_681:
020C:4FB8  80 F9 00				cmp	cl,0
020C:4FBB  75 3F				jne	loc_682			; Jump if not equal
020C:4FBD  B9 0080				mov	cx,80h
020C:4FC0  BF 07ED				mov	di,7EDh
020C:4FC3  E8 EC5A		;*		call	sub_38			;*(3C20)
020C:4FC3  E8 5A EC				db	0E8h, 5Ah,0ECh
020C:4FC6  73 34				jnc	loc_682			; Jump if carry=0
020C:4FC8  89 16 35D5				mov	word ptr ds:[35D5h],dx	; (020C:35D5=7400h)
020C:4FCC  B2 3A				mov	dl,3Ah			; ':'
020C:4FCE  9A 1516:07A0		;*		call	far ptr sub_53		;*(1516:07A0)
020C:4FCE  9A					db	9Ah
020C:4FCF  07A0 1516				dw	7A0h, 1516h
020C:4FD3  B1 04				mov	cl,4
020C:4FD5  B3 02				mov	bl,2
020C:4FD7  BE 07F2				mov	si,7F2h
020C:4FDA  9A 1516:0620		;*		call	far ptr sub_51		;*(1516:0620)
020C:4FDA  9A					db	9Ah
020C:4FDB  0620 1516				dw	620h, 1516h
020C:4FDF  3C 1B				cmp	al,1Bh
020C:4FE1  74 19				je	loc_682			; Jump if equal
020C:4FE3  80 F9 00				cmp	cl,0
           Temp.lst				Sourcer	v5.10    9-Sep-20   4:42 pm   Page 175

020C:4FE6  75 14				jne	loc_682			; Jump if not equal
020C:4FE8  B9 0080				mov	cx,80h
020C:4FEB  BF 07F2				mov	di,7F2h
020C:4FEE  E8 EC2F		;*		call	sub_38			;*(3C20)
020C:4FEE  E8 2F EC				db	0E8h, 2Fh,0ECh
020C:4FF1  73 09				jnc	loc_682			; Jump if carry=0
020C:4FF3  89 16 35D7				mov	word ptr ds:[35D7h],dx	; (020C:35D7=0BE14h)
020C:4FF7  80 0E 35D3 08			or	byte ptr ds:[35D3h],8	; (020C:35D3=21h)
020C:4FFC			loc_682:
020C:4FFC  E8 0BF5				call	$+0BF8h
020C:4FFF  E8 0806				call	$+809h

